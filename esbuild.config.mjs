import esbuild from "esbuild";
import esbuildSvelte from "esbuild-svelte";
import process from "process";
import { sveltePreprocess } from "svelte-preprocess";
import fs from "fs";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository (https://github.com/denolehov/obsidian-git)
*/
`;

const prod = process.argv[2] === "production";

// 目标目录配置
const targetDir = "C:\\Code\\Obsidian沙箱仓库\\.obsidian\\plugins\\git-master";

// 确保目标目录存在
console.log("📁 目标目录:", targetDir);
try {
    if (!fs.existsSync(targetDir)) {
        console.log("📂 创建目标目录...");
        fs.mkdirSync(targetDir, { recursive: true });
        console.log("✅ 目标目录创建成功");
    } else {
        console.log("✅ 目标目录已存在");
    }
} catch (error) {
    console.error("❌ 创建目录失败:", error);
}

// 复制必要文件到目标目录的函数
function copyPluginFiles() {
    // 复制 manifest.json
    fs.copyFileSync("manifest.json", path.join(targetDir, "manifest.json"));
    
    // 复制 styles.css
    fs.copyFileSync("styles.css", path.join(targetDir, "styles.css"));
    
    console.log("✅ 插件文件已复制到:", targetDir);
}

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "child_process",
        "fs",
        "path",
        "moment",
        "node:events",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
    ],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    platform: "browser",
    minify: prod,
    conditions: [prod ? "production" : "development"], // https://www.npmjs.com/package/esm-env
    plugins: [
        esbuildSvelte({
            compilerOptions: {
                css: "injected",
                dev: !prod,
            },
            filterWarnings: (warning) => {
                if (warning.code.startsWith("a11y-")) return false;
                return true;
            },
            preprocess: sveltePreprocess(),
        }),
    ],
    inject: ["polyfill_buffer.js"],
    outfile: path.join(targetDir, "main.js"),
});

if (prod) {
    await context.rebuild();
    copyPluginFiles();
    process.exit(0);
} else {
    // 开发模式：先复制文件，然后监听变化
    copyPluginFiles();
    await context.watch();
    
    // 监听 manifest.json 和 styles.css 的变化
    fs.watchFile("manifest.json", () => {
        console.log("📝 manifest.json 已更新");
        copyPluginFiles();
    });
    
    fs.watchFile("styles.css", () => {
        console.log("🎨 styles.css 已更新");
        copyPluginFiles();
    });
    
    console.log("👀 监听模式已启动，文件变化将自动同步到插件目录");
}
