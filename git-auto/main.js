/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GitAutoCommitPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");
var import_child_process = require("child_process");
var import_util = require("util");

// data-manager.ts
var DEFAULT_PLUGIN_DATA = {
  settings: {
    defaultCommitScope: "all",
    defaultMessageType: "ai",
    pushToRemote: true,
    remoteBranch: "main",
    autoCommit: false,
    includeFileTypes: [".md", ".txt", ".canvas", ".json"],
    excludePatterns: [".obsidian/", "node_modules/", ".git/"],
    showNotifications: true,
    batchProcessingEnabled: true,
    batchSizeLimitMB: 10,
    debugMode: false,
    // 默认关闭调试模式
    // 新增默认值：定时自动提交设置
    timedAutoCommit: false,
    autoCommitInterval: 30,
    enableEditingDelay: false,
    editingDelayMinutes: 5
  },
  models: {
    configs: [],
    defaultModelId: null
  },
  preferences: {},
  version: "1.0.0",
  lastModified: Date.now()
};
var DataManager = class {
  constructor(app, pluginDir) {
    this.app = app;
    this.dataFile = `${pluginDir}/plugin-data.json`;
    this.data = { ...DEFAULT_PLUGIN_DATA };
  }
  /**
   * 初始化数据管理器
   */
  async initialize() {
    try {
      await this.loadData();
      await this.migrateOldData();
      const cleanupResult = await this.cleanupPlaintextApiKeys();
      if (cleanupResult.cleaned > 0) {
        console.log(`Git Auto Commit - \u5B89\u5168\u6E05\u7406\u5B8C\u6210\uFF1A\u5DF2\u6E05\u7406 ${cleanupResult.cleaned}/${cleanupResult.total} \u4E2A\u6A21\u578B\u4E2D\u7684\u660E\u6587\u5BC6\u94A5`);
      }
    } catch (error) {
      console.log("Git Auto Commit - \u6570\u636E\u6587\u4EF6\u4E0D\u5B58\u5728\u6216\u635F\u574F\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u6570\u636E");
      this.data = { ...DEFAULT_PLUGIN_DATA };
      await this.saveData();
    }
  }
  /**
   * 从文件加载数据
   */
  async loadData() {
    try {
      const fileExists = await this.app.vault.adapter.exists(this.dataFile);
      if (!fileExists) {
        console.log("Git Auto Commit - \u6570\u636E\u6587\u4EF6\u4E0D\u5B58\u5728\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u914D\u7F6E");
        this.data = { ...DEFAULT_PLUGIN_DATA };
        return;
      }
      const fileContent = await this.app.vault.adapter.read(this.dataFile);
      const loadedData = JSON.parse(fileContent);
      this.data = this.mergeWithDefaults(loadedData);
      console.log("Git Auto Commit - \u6570\u636E\u52A0\u8F7D\u6210\u529F");
    } catch (error) {
      console.error("Git Auto Commit - \u52A0\u8F7D\u6570\u636E\u5931\u8D25:", error);
      throw error;
    }
  }
  /**
   * 保存数据到文件
   */
  async saveData() {
    try {
      this.data.lastModified = Date.now();
      const jsonContent = JSON.stringify(this.data, null, 2);
      await this.app.vault.adapter.write(this.dataFile, jsonContent);
      console.log("Git Auto Commit - \u6570\u636E\u4FDD\u5B58\u6210\u529F");
    } catch (error) {
      console.error("Git Auto Commit - \u4FDD\u5B58\u6570\u636E\u5931\u8D25:", error);
      throw error;
    }
  }
  /**
   * 合并默认数据，确保数据结构完整
   */
  mergeWithDefaults(loadedData) {
    const merged = { ...DEFAULT_PLUGIN_DATA };
    if (loadedData) {
      if (loadedData.settings) {
        merged.settings = { ...merged.settings, ...loadedData.settings };
      }
      if (loadedData.models) {
        merged.models = {
          configs: loadedData.models.configs || [],
          defaultModelId: loadedData.models.defaultModelId || null
        };
      }
      if (loadedData.preferences) {
        merged.preferences = { ...loadedData.preferences };
      }
      if (loadedData.version) {
        merged.version = loadedData.version;
      }
    }
    return merged;
  }
  /**
   * 从旧的存储方式迁移数据
   */
  async migrateOldData() {
    let hasMigration = false;
    try {
      const oldModels = localStorage.getItem("git-auto-commit-models");
      const oldDefaultModel = localStorage.getItem("git-auto-commit-default-model");
      if (oldModels && this.data.models.configs.length === 0) {
        const parsedModels = JSON.parse(oldModels);
        this.data.models.configs = parsedModels.map((model) => {
          const { apiKey, ...modelWithoutApiKey } = model;
          return {
            ...modelWithoutApiKey,
            encodedApiKey: this.encodeApiKey(apiKey)
            // 编码API密钥
          };
        });
        if (oldDefaultModel) {
          this.data.models.defaultModelId = oldDefaultModel;
        }
        hasMigration = true;
        console.log("Git Auto Commit - \u8FC1\u79FB\u4E86\u6A21\u578B\u914D\u7F6E\u6570\u636E");
      }
      if (hasMigration) {
        localStorage.removeItem("git-auto-commit-models");
        localStorage.removeItem("git-auto-commit-default-model");
        await this.saveData();
        console.log("Git Auto Commit - \u6570\u636E\u8FC1\u79FB\u5B8C\u6210\uFF0C\u5DF2\u6E05\u7406\u65E7\u5B58\u50A8");
      }
    } catch (error) {
      console.warn("Git Auto Commit - \u6570\u636E\u8FC1\u79FB\u8FC7\u7A0B\u4E2D\u51FA\u73B0\u9519\u8BEF:", error);
    }
  }
  /**
   * 编码API密钥 - 使用AES-like加密和随机salt
   */
  encodeApiKey(apiKey) {
    if (!apiKey)
      return "";
    try {
      const salt = this.generateRandomSalt();
      const encrypted = this.encryptWithSalt(apiKey, salt);
      const combined = salt + ":" + encrypted;
      return btoa(unescape(encodeURIComponent(combined)));
    } catch (error) {
      console.error("Git Auto Commit - API\u5BC6\u94A5\u7F16\u7801\u5931\u8D25:", error);
      return btoa(unescape(encodeURIComponent(apiKey)));
    }
  }
  /**
   * 解码API密钥
   */
  decodeApiKey(encodedApiKey) {
    if (!encodedApiKey)
      return "";
    try {
      const decoded = decodeURIComponent(escape(atob(encodedApiKey)));
      if (decoded.includes(":")) {
        const [salt, encrypted] = decoded.split(":", 2);
        return this.decryptWithSalt(encrypted, salt);
      } else {
        return decoded;
      }
    } catch (error) {
      console.error("Git Auto Commit - API\u5BC6\u94A5\u89E3\u7801\u5931\u8D25:", error);
      return encodedApiKey;
    }
  }
  /**
   * 生成随机salt
   */
  generateRandomSalt() {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let result = "";
    for (let i = 0; i < 16; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }
  /**
   * 使用salt加密数据
   */
  encryptWithSalt(data, salt) {
    let encrypted = "";
    const key = this.generateKey(salt);
    for (let i = 0; i < data.length; i++) {
      const charCode = data.charCodeAt(i);
      const keyCode = key.charCodeAt(i % key.length);
      const encryptedChar = charCode ^ keyCode;
      encrypted += String.fromCharCode(encryptedChar);
    }
    return btoa(unescape(encodeURIComponent(encrypted)));
  }
  /**
   * 使用salt解密数据
   */
  decryptWithSalt(encryptedData, salt) {
    try {
      const decoded = decodeURIComponent(escape(atob(encryptedData)));
      const key = this.generateKey(salt);
      let decrypted = "";
      for (let i = 0; i < decoded.length; i++) {
        const charCode = decoded.charCodeAt(i);
        const keyCode = key.charCodeAt(i % key.length);
        const decryptedChar = charCode ^ keyCode;
        decrypted += String.fromCharCode(decryptedChar);
      }
      return decrypted;
    } catch (error) {
      console.error("Git Auto Commit - \u89E3\u5BC6\u5931\u8D25:", error);
      return "";
    }
  }
  /**
   * 从salt生成加密密钥
   */
  generateKey(salt) {
    const base = "ObsidianGitAutoCommit2024";
    let key = "";
    for (let i = 0; i < Math.max(salt.length, base.length) * 2; i++) {
      const saltChar = salt.charCodeAt(i % salt.length);
      const baseChar = base.charCodeAt(i % base.length);
      key += String.fromCharCode((saltChar + baseChar + i) % 256);
    }
    return key;
  }
  // ========== 插件设置相关方法 ==========
  /**
   * 获取插件设置
   */
  getSettings() {
    return { ...this.data.settings };
  }
  /**
   * 更新插件设置
   */
  async updateSettings(newSettings) {
    this.data.settings = { ...this.data.settings, ...newSettings };
    await this.saveData();
  }
  // ========== 模型配置相关方法 ==========
  /**
   * 获取所有模型配置
   */
  getAllModels() {
    return [...this.data.models.configs];
  }
  /**
   * 获取已验证的模型
   */
  getVerifiedModels() {
    return this.data.models.configs.filter((model) => model.isVerified);
  }
  /**
   * 根据ID获取模型
   */
  getModelById(id) {
    return this.data.models.configs.find((model) => model.id === id) || null;
  }
  /**
   * 添加新模型
   */
  async addModel(config) {
    const now = Date.now();
    const { apiKey, ...configWithoutApiKey } = config;
    const newModel = {
      id: this.generateId(),
      ...configWithoutApiKey,
      encodedApiKey: this.encodeApiKey(apiKey),
      isVerified: false,
      createdAt: now,
      lastModified: now
    };
    this.data.models.configs.push(newModel);
    await this.saveData();
    return newModel.id;
  }
  /**
   * 更新模型配置
   */
  async updateModel(id, updates) {
    const index = this.data.models.configs.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    const updateData = { ...updates };
    if (updates.apiKey) {
      updateData.encodedApiKey = this.encodeApiKey(updates.apiKey);
      delete updateData.apiKey;
    }
    this.data.models.configs[index] = {
      ...this.data.models.configs[index],
      ...updateData,
      lastModified: Date.now()
    };
    await this.saveData();
    return true;
  }
  /**
   * 删除模型
   */
  async deleteModel(id) {
    const index = this.data.models.configs.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    this.data.models.configs.splice(index, 1);
    if (this.data.models.defaultModelId === id) {
      this.data.models.defaultModelId = null;
    }
    await this.saveData();
    return true;
  }
  /**
   * 设置默认模型
   */
  async setDefaultModel(id) {
    const model = this.getModelById(id);
    if (!model || !model.isVerified)
      return false;
    this.data.models.defaultModelId = id;
    await this.saveData();
    return true;
  }
  /**
   * 获取默认模型
   */
  getDefaultModel() {
    if (!this.data.models.defaultModelId)
      return null;
    return this.getModelById(this.data.models.defaultModelId);
  }
  /**
   * 获取默认模型ID
   */
  getDefaultModelId() {
    return this.data.models.defaultModelId;
  }
  /**
   * 清空所有模型配置
   */
  async clearAllModels() {
    this.data.models.configs = [];
    this.data.models.defaultModelId = null;
    await this.saveData();
  }
  getPreference(key, defaultValue) {
    return this.data.preferences[key] !== void 0 ? this.data.preferences[key] : defaultValue;
  }
  /**
   * 设置个性化设置
   */
  async setPreference(key, value) {
    this.data.preferences[key] = value;
    await this.saveData();
  }
  /**
   * 删除个性化设置
   */
  async removePreference(key) {
    delete this.data.preferences[key];
    await this.saveData();
  }
  // ========== 工具方法 ==========
  /**
   * 生成唯一ID
   */
  generateId() {
    return "model_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9);
  }
  /**
   * 导出配置
   */
  exportConfig() {
    return JSON.stringify({
      ...this.data,
      exportedAt: Date.now()
    }, null, 2);
  }
  /**
   * 导入配置
   */
  async importConfig(configJson) {
    try {
      const config = JSON.parse(configJson);
      if (!config.models || !Array.isArray(config.models.configs)) {
        return { success: false, error: "\u65E0\u6548\u7684\u914D\u7F6E\u683C\u5F0F", imported: 0 };
      }
      let imported = 0;
      for (const modelConfig of config.models.configs) {
        if (this.isValidModelConfig(modelConfig)) {
          await this.addModel({
            displayName: modelConfig.displayName,
            modelName: modelConfig.modelName,
            provider: modelConfig.provider,
            baseURL: modelConfig.baseURL,
            apiKey: this.decodeApiKey(modelConfig.encodedApiKey),
            // 解码API密钥
            maxContextTokens: modelConfig.maxContextTokens || 32e3,
            maxOutputTokens: modelConfig.maxOutputTokens || 4e3
          });
          imported++;
        }
      }
      if (config.models.defaultModelId && imported > 0) {
        this.data.models.defaultModelId = config.models.defaultModelId;
        await this.saveData();
      }
      return { success: true, imported };
    } catch (error) {
      return { success: false, error: error.message, imported: 0 };
    }
  }
  /**
   * 验证模型配置格式
   */
  isValidModelConfig(config) {
    return config && typeof config.displayName === "string" && typeof config.modelName === "string" && typeof config.provider === "string" && typeof config.baseURL === "string" && typeof config.encodedApiKey === "string" && (typeof config.maxContextTokens === "number" || config.maxContextTokens === void 0) && (typeof config.maxOutputTokens === "number" || config.maxOutputTokens === void 0);
  }
  /**
   * 重置所有数据到初始状态
   */
  async resetToDefaults() {
    this.data = { ...DEFAULT_PLUGIN_DATA };
    this.data.lastModified = Date.now();
    await this.saveData();
    console.log("Git Auto Commit - \u6240\u6709\u6570\u636E\u5DF2\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C");
  }
  /**
   * 删除数据文件（用于测试或彻底重置）
   */
  async deleteDataFile() {
    try {
      const fileExists = await this.app.vault.adapter.exists(this.dataFile);
      if (fileExists) {
        await this.app.vault.adapter.remove(this.dataFile);
        console.log("Git Auto Commit - \u6570\u636E\u6587\u4EF6\u5DF2\u5220\u9664");
      }
      this.data = { ...DEFAULT_PLUGIN_DATA };
    } catch (error) {
      console.error("Git Auto Commit - \u5220\u9664\u6570\u636E\u6587\u4EF6\u5931\u8D25:", error);
      throw error;
    }
  }
  /**
   * 获取数据文件路径（用于调试）
   */
  getDataFilePath() {
    return this.dataFile;
  }
  /**
   * 清理数据中的明文API密钥（安全增强）
   */
  async cleanupPlaintextApiKeys() {
    let cleaned = 0;
    const total = this.data.models.configs.length;
    for (let i = 0; i < this.data.models.configs.length; i++) {
      const model = this.data.models.configs[i];
      if (model.apiKey) {
        console.log(`Git Auto Commit - \u6E05\u7406\u6A21\u578B ${model.displayName} \u4E2D\u7684\u660E\u6587API\u5BC6\u94A5`);
        if (!model.encodedApiKey && model.apiKey) {
          model.encodedApiKey = this.encodeApiKey(model.apiKey);
        }
        delete model.apiKey;
        cleaned++;
      }
    }
    if (cleaned > 0) {
      await this.saveData();
      console.log(`Git Auto Commit - \u5DF2\u6E05\u7406 ${cleaned} \u4E2A\u6A21\u578B\u4E2D\u7684\u660E\u6587API\u5BC6\u94A5`);
    }
    return { cleaned, total };
  }
  /**
   * 检查数据文件是否存在
   */
  async dataFileExists() {
    return await this.app.vault.adapter.exists(this.dataFile);
  }
};

// new-model-config-manager.ts
var NewModelConfigManager = class {
  constructor(dataManager) {
    this.dataManager = dataManager;
  }
  // ========== 模型管理方法 ==========
  /**
   * 添加新模型
   */
  async addModel(config) {
    return await this.dataManager.addModel(config);
  }
  /**
   * 更新模型配置
   */
  async updateModel(id, updates) {
    return await this.dataManager.updateModel(id, updates);
  }
  /**
   * 删除模型
   */
  async deleteModel(id) {
    return await this.dataManager.deleteModel(id);
  }
  /**
   * 获取所有模型（解码API密钥）
   */
  getAllModels() {
    const models = this.dataManager.getAllModels();
    return models.map((model) => this.convertToModelConfig(model));
  }
  /**
   * 获取已验证的模型
   */
  getVerifiedModels() {
    const models = this.dataManager.getVerifiedModels();
    return models.map((model) => this.convertToModelConfig(model));
  }
  /**
   * 根据ID获取模型
   */
  getModelById(id) {
    const modelData = this.dataManager.getModelById(id);
    if (!modelData)
      return null;
    return this.convertToModelConfig(modelData);
  }
  /**
   * 设置默认模型
   */
  async setDefaultModel(id) {
    return await this.dataManager.setDefaultModel(id);
  }
  /**
   * 获取默认模型
   */
  getDefaultModel() {
    const modelData = this.dataManager.getDefaultModel();
    if (!modelData)
      return null;
    return this.convertToModelConfig(modelData);
  }
  /**
   * 获取默认模型ID
   */
  getDefaultModelId() {
    return this.dataManager.getDefaultModelId();
  }
  /**
   * 清空所有模型配置
   */
  async clearAllModels() {
    await this.dataManager.clearAllModels();
  }
  // ========== 模型验证和测试方法 ==========
  /**
   * 验证模型配置
   */
  async verifyModel(id) {
    const model = this.getModelById(id);
    if (!model) {
      return { success: false, error: "\u6A21\u578B\u4E0D\u5B58\u5728" };
    }
    try {
      const response = await this.testModelConnection(model);
      if (response.success) {
        await this.updateModel(id, { isVerified: true });
        return { success: true };
      } else {
        await this.updateModel(id, { isVerified: false });
        return { success: false, error: response.error };
      }
    } catch (error) {
      await this.updateModel(id, { isVerified: false });
      return { success: false, error: error.message };
    }
  }
  /**
   * 直接测试模型配置（不添加到管理器）
   */
  async testModelConfig(config) {
    const tempModel = {
      id: "temp",
      ...config,
      isVerified: false,
      createdAt: Date.now(),
      lastModified: Date.now()
    };
    return this.testModelConnection(tempModel);
  }
  /**
   * 测试模型连接
   */
  async testModelConnection(model) {
    var _a;
    try {
      const testMessage = "\u6D4B\u8BD5\u8FDE\u63A5";
      const requestBody = {
        model: model.modelName,
        messages: [
          {
            role: "user",
            content: testMessage
          }
        ],
        max_tokens: 10,
        temperature: 0.1
      };
      const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${model.apiKey}`
      };
      if (model.provider === "qwen") {
        headers["X-DashScope-SSE"] = "disable";
      } else if (model.provider === "openrouter") {
        headers["HTTP-Referer"] = "https://obsidian.md";
        headers["X-Title"] = "Obsidian Git Auto Commit";
      }
      const response = await fetch(`${model.baseURL}/chat/completions`, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody)
      });
      if (response.ok) {
        return { success: true };
      } else {
        const errorData = await response.json().catch(() => ({}));
        return {
          success: false,
          error: `HTTP ${response.status}: ${((_a = errorData.error) == null ? void 0 : _a.message) || response.statusText}`
        };
      }
    } catch (error) {
      return {
        success: false,
        error: `\u8FDE\u63A5\u5931\u8D25: ${error.message}`
      };
    }
  }
  // ========== 配置导入导出方法 ==========
  /**
   * 导出配置
   */
  exportConfig() {
    return this.dataManager.exportConfig();
  }
  /**
   * 导入配置
   */
  async importConfig(configJson) {
    return await this.dataManager.importConfig(configJson);
  }
  // ========== 向后兼容性方法 ==========
  /**
   * 从存储中加载模型配置（保持与旧API兼容）
   */
  loadFromStorage() {
    console.log("Git Auto Commit - \u4F7F\u7528\u65B0\u7684\u6570\u636E\u7BA1\u7406\u5668\uFF0C\u8DF3\u8FC7\u65E7\u7684\u52A0\u8F7D\u65B9\u5F0F");
  }
  /**
   * 保存到存储（保持与旧API兼容）
   */
  saveToStorage() {
    console.log("Git Auto Commit - \u4F7F\u7528\u65B0\u7684\u6570\u636E\u7BA1\u7406\u5668\uFF0C\u81EA\u52A8\u4FDD\u5B58");
  }
  /**
   * 迁移旧配置，为没有token参数的模型添加默认值
   */
  migrateOldConfigs() {
    console.log("Git Auto Commit - \u6570\u636E\u8FC1\u79FB\u7531\u6570\u636E\u7BA1\u7406\u5668\u5904\u7406");
  }
  // ========== 工具方法 ==========
  /**
   * 将ModelConfigData转换为ModelConfig（解码API密钥）
   */
  convertToModelConfig(modelData) {
    return {
      ...modelData,
      apiKey: this.dataManager.decodeApiKey(modelData.encodedApiKey)
    };
  }
  /**
   * 验证模型配置格式
   */
  isValidModelConfig(config) {
    return config && typeof config.displayName === "string" && typeof config.modelName === "string" && typeof config.provider === "string" && typeof config.baseURL === "string" && typeof config.apiKey === "string" && (typeof config.maxContextTokens === "number" || config.maxContextTokens === void 0) && (typeof config.maxOutputTokens === "number" || config.maxOutputTokens === void 0);
  }
};

// ai-settings-components.ts
var import_obsidian = require("obsidian");

// model-config.ts
var PREDEFINED_PROVIDERS = {
  deepseek: {
    name: "DeepSeek",
    defaultBaseURL: "https://api.deepseek.com/v1",
    commonModels: ["deepseek-chat", "deepseek-coder"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Adeepseek-chat"
  },
  zhipu: {
    name: "\u667A\u8C31AI",
    defaultBaseURL: "https://open.bigmodel.cn/api/paas/v4",
    commonModels: ["glm-4-plus", "glm-4", "glm-4-air", "glm-4-flash"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Aglm-4-plus"
  },
  qwen: {
    name: "\u901A\u4E49\u5343\u95EE",
    defaultBaseURL: "https://dashscope.aliyuncs.com/compatible-mode/v1",
    commonModels: ["qwen-plus", "qwen-turbo", "qwen-max", "qwen-max-longcontext"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Aqwen-plus"
  },
  openrouter: {
    name: "OpenRouter",
    defaultBaseURL: "https://openrouter.ai/api/v1",
    commonModels: ["anthropic/claude-3.5-sonnet", "openai/gpt-4o", "meta-llama/llama-3.1-405b-instruct"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Aanthropic/claude-3.5-sonnet"
  },
  custom: {
    name: "\u81EA\u5B9A\u4E49\u6A21\u578B",
    defaultBaseURL: "https://api.openai.com/v1",
    commonModels: ["gpt-4o", "gpt-4o-mini", "gpt-3.5-turbo"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Agpt-4o"
  }
};
var ModelConfigManager = class {
  constructor() {
    this.models = [];
    this.defaultModelId = null;
    this.loadFromStorage();
    this.migrateOldConfigs();
  }
  // 从存储中加载模型配置
  loadFromStorage() {
    try {
      const savedModels = localStorage.getItem("git-auto-commit-models");
      const savedDefaultModel = localStorage.getItem("git-auto-commit-default-model");
      if (savedModels) {
        this.models = JSON.parse(savedModels);
      }
      if (savedDefaultModel) {
        this.defaultModelId = savedDefaultModel;
      }
    } catch (error) {
      console.error("\u52A0\u8F7D\u6A21\u578B\u914D\u7F6E\u5931\u8D25:", error);
      this.models = [];
      this.defaultModelId = null;
    }
  }
  // 保存到存储
  saveToStorage() {
    try {
      localStorage.setItem("git-auto-commit-models", JSON.stringify(this.models));
      if (this.defaultModelId) {
        localStorage.setItem("git-auto-commit-default-model", this.defaultModelId);
      } else {
        localStorage.removeItem("git-auto-commit-default-model");
      }
    } catch (error) {
      console.error("\u4FDD\u5B58\u6A21\u578B\u914D\u7F6E\u5931\u8D25:", error);
    }
  }
  // 迁移旧配置，为没有token参数的模型添加默认值
  migrateOldConfigs() {
    let needsSave = false;
    for (const model of this.models) {
      if (typeof model.maxContextTokens === "undefined") {
        model.maxContextTokens = 32e3;
        needsSave = true;
      }
      if (typeof model.maxOutputTokens === "undefined") {
        model.maxOutputTokens = 4e3;
        needsSave = true;
      }
    }
    if (needsSave) {
      console.log("Git Auto Commit - \u8FC1\u79FB\u4E86", this.models.length, "\u4E2A\u6A21\u578B\u914D\u7F6E");
      this.saveToStorage();
    }
  }
  // 生成唯一ID
  generateId() {
    return "model_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9);
  }
  // 添加新模型
  addModel(config) {
    const now = Date.now();
    const newModel = {
      id: this.generateId(),
      ...config,
      isVerified: false,
      createdAt: now,
      lastModified: now
    };
    this.models.push(newModel);
    this.saveToStorage();
    return newModel.id;
  }
  // 更新模型配置
  updateModel(id, updates) {
    const index = this.models.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    this.models[index] = {
      ...this.models[index],
      ...updates,
      lastModified: Date.now()
    };
    this.saveToStorage();
    return true;
  }
  // 删除模型
  deleteModel(id) {
    const index = this.models.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    this.models.splice(index, 1);
    if (this.defaultModelId === id) {
      this.defaultModelId = null;
    }
    this.saveToStorage();
    return true;
  }
  // 获取所有模型
  getAllModels() {
    return [...this.models];
  }
  // 获取已验证的模型
  getVerifiedModels() {
    return this.models.filter((model) => model.isVerified);
  }
  // 根据ID获取模型
  getModelById(id) {
    return this.models.find((model) => model.id === id) || null;
  }
  // 设置默认模型
  setDefaultModel(id) {
    const model = this.getModelById(id);
    if (!model || !model.isVerified)
      return false;
    this.defaultModelId = id;
    this.saveToStorage();
    return true;
  }
  // 获取默认模型
  getDefaultModel() {
    if (!this.defaultModelId)
      return null;
    return this.getModelById(this.defaultModelId);
  }
  // 获取默认模型ID
  getDefaultModelId() {
    return this.defaultModelId;
  }
  // 验证模型配置
  async verifyModel(id) {
    const model = this.getModelById(id);
    if (!model) {
      return { success: false, error: "\u6A21\u578B\u4E0D\u5B58\u5728" };
    }
    try {
      const response = await this.testModelConnection(model);
      if (response.success) {
        this.updateModel(id, { isVerified: true });
        return { success: true };
      } else {
        this.updateModel(id, { isVerified: false });
        return { success: false, error: response.error };
      }
    } catch (error) {
      this.updateModel(id, { isVerified: false });
      return { success: false, error: error.message };
    }
  }
  // 直接测试模型配置（不添加到管理器）
  async testModelConfig(config) {
    const tempModel = {
      id: "temp",
      ...config,
      isVerified: false,
      createdAt: Date.now(),
      lastModified: Date.now()
    };
    return this.testModelConnection(tempModel);
  }
  // 测试模型连接
  async testModelConnection(model) {
    var _a;
    try {
      const testMessage = "\u6D4B\u8BD5\u8FDE\u63A5";
      const requestBody = {
        model: model.modelName,
        messages: [
          {
            role: "user",
            content: testMessage
          }
        ],
        max_tokens: 10,
        temperature: 0.1
      };
      const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${model.apiKey}`
      };
      if (model.provider === "qwen") {
        headers["X-DashScope-SSE"] = "disable";
      } else if (model.provider === "openrouter") {
        headers["HTTP-Referer"] = "https://obsidian.md";
        headers["X-Title"] = "Obsidian Git Auto Commit";
      }
      const response = await fetch(`${model.baseURL}/chat/completions`, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody)
      });
      if (response.ok) {
        return { success: true };
      } else {
        const errorData = await response.json().catch(() => ({}));
        return {
          success: false,
          error: `HTTP ${response.status}: ${((_a = errorData.error) == null ? void 0 : _a.message) || response.statusText}`
        };
      }
    } catch (error) {
      return {
        success: false,
        error: `\u8FDE\u63A5\u5931\u8D25: ${error.message}`
      };
    }
  }
  // 清空所有模型配置
  clearAllModels() {
    this.models = [];
    this.defaultModelId = null;
    this.saveToStorage();
  }
  // 导出配置
  exportConfig() {
    return JSON.stringify({
      models: this.models,
      defaultModelId: this.defaultModelId,
      exportedAt: Date.now()
    }, null, 2);
  }
  // 导入配置
  importConfig(configJson) {
    try {
      const config = JSON.parse(configJson);
      if (!config.models || !Array.isArray(config.models)) {
        return { success: false, error: "\u65E0\u6548\u7684\u914D\u7F6E\u683C\u5F0F", imported: 0 };
      }
      let imported = 0;
      for (const modelConfig of config.models) {
        if (this.isValidModelConfig(modelConfig)) {
          this.addModel({
            displayName: modelConfig.displayName,
            modelName: modelConfig.modelName,
            provider: modelConfig.provider,
            baseURL: modelConfig.baseURL,
            apiKey: modelConfig.apiKey,
            maxContextTokens: modelConfig.maxContextTokens || 8e3,
            maxOutputTokens: modelConfig.maxOutputTokens || 4e3
          });
          imported++;
        }
      }
      return { success: true, imported };
    } catch (error) {
      return { success: false, error: error.message, imported: 0 };
    }
  }
  // 验证模型配置格式
  isValidModelConfig(config) {
    return config && typeof config.displayName === "string" && typeof config.modelName === "string" && typeof config.provider === "string" && typeof config.baseURL === "string" && typeof config.apiKey === "string" && (typeof config.maxContextTokens === "number" || config.maxContextTokens === void 0) && (typeof config.maxOutputTokens === "number" || config.maxOutputTokens === void 0);
  }
};
var modelConfigManager = new ModelConfigManager();

// ai-settings-components.ts
var ModelManagementModal = class extends import_obsidian.Modal {
  constructor(app, modelManager, onUpdate) {
    super(app);
    this.modelManager = modelManager;
    this.onUpdate = onUpdate;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("model-management-modal");
    const titleEl = contentEl.createEl("h2", { text: "AI\u6A21\u578B\u7BA1\u7406", cls: "modal-title" });
    titleEl.style.display = "flex";
    titleEl.style.justifyContent = "space-between";
    titleEl.style.alignItems = "center";
    titleEl.style.marginBottom = "20px";
    const addButton = titleEl.createEl("button", { text: "\u6DFB\u52A0AI\u6A21\u578B", cls: "mod-cta" });
    addButton.style.fontSize = "14px";
    addButton.style.padding = "8px 16px";
    addButton.addEventListener("click", () => {
      const addModal = new ModelFormModal(this.app, this.modelManager, null, () => {
        this.refreshModelList();
        this.onUpdate();
      }, this);
      addModal.open();
    });
    this.createModelList(contentEl);
    const buttonContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.textAlign = "right";
    const closeButton = buttonContainer.createEl("button", { text: "\u5173\u95ED" });
    closeButton.addEventListener("click", () => this.close());
  }
  createModelList(containerEl) {
    const listContainer = containerEl.createEl("div", { cls: "model-list-container" });
    listContainer.style.maxHeight = "400px";
    listContainer.style.overflowY = "auto";
    listContainer.style.border = "1px solid var(--background-modifier-border)";
    listContainer.style.borderRadius = "8px";
    listContainer.style.padding = "12px";
    this.refreshModelList();
  }
  refreshModelList() {
    const listContainer = this.contentEl.querySelector(".model-list-container");
    if (!listContainer)
      return;
    listContainer.empty();
    const models = this.modelManager.getAllModels();
    if (models.length === 0) {
      const emptyMessage = listContainer.createEl("div", {
        text: '\u6682\u65E0\u914D\u7F6E\u7684\u6A21\u578B\uFF0C\u70B9\u51FB\u4E0A\u65B9"\u6DFB\u52A0AI\u6A21\u578B"\u6309\u94AE\u5F00\u59CB\u914D\u7F6E',
        cls: "empty-message"
      });
      emptyMessage.style.textAlign = "center";
      emptyMessage.style.color = "var(--text-muted)";
      emptyMessage.style.padding = "40px 20px";
      return;
    }
    models.forEach((model) => {
      this.createModelItem(listContainer, model);
    });
  }
  createModelItem(container, model) {
    var _a;
    const itemEl = container.createEl("div", { cls: "model-item" });
    itemEl.style.display = "flex";
    itemEl.style.justifyContent = "space-between";
    itemEl.style.alignItems = "center";
    itemEl.style.padding = "12px";
    itemEl.style.marginBottom = "8px";
    itemEl.style.border = "1px solid var(--background-modifier-border)";
    itemEl.style.borderRadius = "6px";
    itemEl.style.backgroundColor = "var(--background-secondary)";
    const infoEl = itemEl.createEl("div", { cls: "model-info" });
    const nameEl = infoEl.createEl("div", { cls: "model-name" });
    nameEl.style.fontWeight = "bold";
    nameEl.style.marginBottom = "4px";
    const statusIcon = model.isVerified ? "\u2705" : "\u274C";
    nameEl.textContent = `${statusIcon} ${model.displayName}`;
    const detailsEl = infoEl.createEl("div", { cls: "model-details" });
    detailsEl.style.fontSize = "12px";
    detailsEl.style.color = "var(--text-muted)";
    const contextTokens = model.maxContextTokens ? `${(model.maxContextTokens / 1e3).toFixed(0)}K` : "N/A";
    const outputTokens = model.maxOutputTokens ? `${(model.maxOutputTokens / 1e3).toFixed(0)}K` : "N/A";
    detailsEl.textContent = `${model.modelName} | ${((_a = PREDEFINED_PROVIDERS[model.provider]) == null ? void 0 : _a.name) || model.provider} | \u4E0A\u4E0B\u6587:${contextTokens} \u8F93\u51FA:${outputTokens}`;
    const buttonsEl = itemEl.createEl("div", { cls: "model-buttons" });
    buttonsEl.style.display = "flex";
    buttonsEl.style.gap = "8px";
    const editButton = buttonsEl.createEl("button", { text: "\u8BBE\u7F6E", cls: "mod-small" });
    editButton.addEventListener("click", () => {
      const editModal = new ModelFormModal(this.app, this.modelManager, model, () => {
        this.refreshModelList();
        this.onUpdate();
      }, this);
      editModal.open();
    });
    const deleteButton = buttonsEl.createEl("button", { text: "\u5220\u9664", cls: "mod-small mod-warning" });
    deleteButton.addEventListener("click", async () => {
      await this.modelManager.deleteModel(model.id);
      this.refreshModelList();
      this.onUpdate();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ModelFormModal = class extends import_obsidian.Modal {
  constructor(app, modelManager, model, onSave, parentModal) {
    super(app);
    this.formData = {};
    this.parentModal = null;
    this.baseURLInput = null;
    this.modelNameInput = null;
    this.isNewModelVerified = false;
    this.modelManager = modelManager;
    this.model = model;
    this.onSave = onSave;
    this.parentModal = parentModal || null;
    if (model) {
      this.formData = { ...model };
      this.formData.apiKey = "";
    } else {
      this.formData = {
        displayName: "",
        modelName: "",
        provider: "deepseek",
        baseURL: PREDEFINED_PROVIDERS.deepseek.defaultBaseURL,
        apiKey: "",
        maxContextTokens: 32e3,
        // 默认32K上下文
        maxOutputTokens: 4e3
        // 默认4K输出
      };
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("model-form-modal");
    this.baseURLInput = null;
    this.modelNameInput = null;
    this.isNewModelVerified = false;
    const title = this.model ? "\u7F16\u8F91\u6A21\u578B\u914D\u7F6E" : "\u6DFB\u52A0\u6A21\u578B\u914D\u7F6E";
    contentEl.createEl("h2", { text: title, cls: "modal-title" });
    const formEl = contentEl.createEl("div", { cls: "model-form" });
    formEl.style.padding = "20px 0";
    this.createFormFields(formEl);
    this.createButtons(contentEl);
  }
  createFormFields(container) {
    const displayNameSetting = new import_obsidian.Setting(container).setName("\u663E\u793A\u540D\u79F0").setDesc("\u4E3A\u6B64\u6A21\u578B\u8BBE\u7F6E\u4E00\u4E2A\u81EA\u5B9A\u4E49\u540D\u79F0").addText((text) => {
      text.setPlaceholder("\u4F8B\u5982\uFF1A\u6211\u7684DeepSeek\u6A21\u578B").setValue(this.formData.displayName || "").onChange((value) => {
        this.formData.displayName = value;
      });
    });
    const modelNameSetting = new import_obsidian.Setting(container).setName("\u6A21\u578B\u578B\u53F7").setDesc("\u8F93\u5165\u5177\u4F53\u7684\u6A21\u578B\u578B\u53F7\u540D\u79F0").addText((text) => {
      text.setPlaceholder(this.getModelPlaceholder()).setValue(this.formData.modelName || "").onChange((value) => {
        this.formData.modelName = value;
      });
      this.modelNameInput = text.inputEl;
    });
    const providerSetting = new import_obsidian.Setting(container).setName("AI\u63D0\u4F9B\u5546").setDesc("\u9009\u62E9AI\u670D\u52A1\u63D0\u4F9B\u5546").addDropdown((dropdown) => {
      Object.entries(PREDEFINED_PROVIDERS).forEach(([key, provider]) => {
        dropdown.addOption(key, provider.name);
      });
      dropdown.setValue(this.formData.provider || "deepseek").onChange((value) => {
        var _a;
        this.formData.provider = value;
        this.formData.baseURL = ((_a = PREDEFINED_PROVIDERS[value]) == null ? void 0 : _a.defaultBaseURL) || "";
        this.updateProviderRelatedFields();
      });
    });
    const baseURLSetting = new import_obsidian.Setting(container).setName("\u57FA\u7840URL").setDesc("API\u670D\u52A1\u7684\u57FA\u7840URL\u5730\u5740").addText((text) => {
      text.setPlaceholder("https://api.example.com/v1").setValue(this.formData.baseURL || "").onChange((value) => {
        this.formData.baseURL = value;
      });
      this.baseURLInput = text.inputEl;
    });
    const apiKeySetting = new import_obsidian.Setting(container).setName("API\u5BC6\u94A5").setDesc(this.model ? "\u{1F512} \u5DF2\u52A0\u5BC6\u5B58\u50A8\u3002\u5982\u9700\u66F4\u6539\uFF0C\u8BF7\u8F93\u5165\u65B0\u5BC6\u94A5" : "\u8F93\u5165\u60A8\u7684API\u5BC6\u94A5").addText((text) => {
      text.setPlaceholder(this.model ? "(\u5DF2\u52A0\u5BC6\uFF0C\u8F93\u5165\u65B0\u5BC6\u94A5\u4EE5\u66F4\u6539)" : "sk-...").setValue(this.formData.apiKey || "").onChange((value) => {
        this.formData.apiKey = value;
      });
      text.inputEl.type = "password";
    });
    const maxContextSetting = new import_obsidian.Setting(container).setName("\u6700\u5927\u4E0A\u4E0B\u6587\u957F\u5EA6").setDesc("\u6A21\u578B\u652F\u6301\u7684\u6700\u5927\u4E0A\u4E0B\u6587\u4EE4\u724C\u6570\uFF08\u4F8B\u5982\uFF1A32000\u8868\u793A32K\uFF09").addText((text) => {
      var _a;
      text.setPlaceholder("32000").setValue(((_a = this.formData.maxContextTokens) == null ? void 0 : _a.toString()) || "32000").onChange((value) => {
        const numValue = parseInt(value);
        if (!isNaN(numValue) && numValue > 0) {
          this.formData.maxContextTokens = numValue;
        }
      });
      text.inputEl.type = "number";
      text.inputEl.min = "1000";
      text.inputEl.step = "1000";
    });
    const maxOutputSetting = new import_obsidian.Setting(container).setName("\u6700\u5927\u8F93\u51FA\u4EE4\u724C\u6570").setDesc("\u6A21\u578B\u5355\u6B21\u8F93\u51FA\u7684\u6700\u5927\u4EE4\u724C\u6570\uFF08\u4F8B\u5982\uFF1A4000\u8868\u793A4K\uFF09").addText((text) => {
      var _a;
      text.setPlaceholder("4000").setValue(((_a = this.formData.maxOutputTokens) == null ? void 0 : _a.toString()) || "4000").onChange((value) => {
        const numValue = parseInt(value);
        if (!isNaN(numValue) && numValue > 0) {
          this.formData.maxOutputTokens = numValue;
        }
      });
      text.inputEl.type = "number";
      text.inputEl.min = "100";
      text.inputEl.step = "100";
    });
  }
  createButtons(container) {
    const buttonContainer = container.createEl("div", { cls: "modal-button-container" });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "space-between";
    buttonContainer.style.gap = "10px";
    const leftButtons = buttonContainer.createEl("div");
    const verifyButton = leftButtons.createEl("button", { text: "\u9A8C\u8BC1", cls: "mod-cta verify-model-btn" });
    verifyButton.addEventListener("click", () => this.verifyModel());
    const rightButtons = buttonContainer.createEl("div");
    rightButtons.style.display = "flex";
    rightButtons.style.gap = "10px";
    const saveButton = rightButtons.createEl("button", { text: "\u4FDD\u5B58", cls: "mod-cta" });
    saveButton.addEventListener("click", () => this.saveModel());
    const cancelButton = rightButtons.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => this.close());
  }
  getModelPlaceholder() {
    var _a;
    const provider = this.formData.provider || "deepseek";
    return ((_a = PREDEFINED_PROVIDERS[provider]) == null ? void 0 : _a.modelPlaceholder) || "\u8F93\u5165\u6A21\u578B\u578B\u53F7";
  }
  updateProviderRelatedFields() {
    if (this.baseURLInput) {
      this.baseURLInput.value = this.formData.baseURL || "";
    }
    if (this.modelNameInput) {
      this.modelNameInput.placeholder = this.getModelPlaceholder();
    }
  }
  async verifyModel() {
    if (!this.validateForm())
      return;
    const verifyButton = this.contentEl.querySelector(".verify-model-btn");
    if (verifyButton) {
      verifyButton.textContent = "\u9A8C\u8BC1\u4E2D...";
      verifyButton.disabled = true;
    }
    try {
      let result;
      if (this.model) {
        await this.modelManager.updateModel(this.model.id, {
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3,
          isVerified: false
        });
        result = await this.modelManager.verifyModel(this.model.id);
      } else {
        result = await this.modelManager.testModelConfig({
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3
        });
      }
      if (result.success) {
        new import_obsidian.Notice("\u2705 \u6A21\u578B\u9A8C\u8BC1\u6210\u529F\uFF01");
        if (this.model) {
          this.model.isVerified = true;
          this.model.displayName = this.formData.displayName;
          this.model.modelName = this.formData.modelName;
          this.model.provider = this.formData.provider;
          this.model.baseURL = this.formData.baseURL;
          this.model.apiKey = this.formData.apiKey;
          this.model.maxContextTokens = this.formData.maxContextTokens || 32e3;
          this.model.maxOutputTokens = this.formData.maxOutputTokens || 4e3;
        } else {
          this.isNewModelVerified = true;
        }
        if (this.parentModal) {
          this.parentModal.refreshModelList();
        }
      } else {
        new import_obsidian.Notice(`\u274C \u6A21\u578B\u9A8C\u8BC1\u5931\u8D25\uFF1A${result.error}`);
        if (this.model) {
          this.model.isVerified = false;
        } else {
          this.isNewModelVerified = false;
        }
      }
    } catch (error) {
      new import_obsidian.Notice(`\u274C \u9A8C\u8BC1\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF\uFF1A${error.message}`);
      if (this.model) {
        this.model.isVerified = false;
      } else {
        this.isNewModelVerified = false;
      }
    } finally {
      const verifyButton2 = this.contentEl.querySelector(".verify-model-btn");
      if (verifyButton2) {
        verifyButton2.textContent = "\u9A8C\u8BC1";
        verifyButton2.disabled = false;
      }
    }
  }
  async saveModel() {
    if (!this.validateForm())
      return;
    try {
      if (this.model) {
        const originalModel = this.modelManager.getModelById(this.model.id);
        const hasKeyChanges = originalModel && (originalModel.modelName !== this.formData.modelName || originalModel.provider !== this.formData.provider || originalModel.baseURL !== this.formData.baseURL || originalModel.apiKey !== this.formData.apiKey);
        let finalVerifiedStatus;
        if (hasKeyChanges && this.model.isVerified === (originalModel == null ? void 0 : originalModel.isVerified)) {
          finalVerifiedStatus = false;
        } else {
          finalVerifiedStatus = this.model.isVerified;
        }
        await this.modelManager.updateModel(this.model.id, {
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3,
          isVerified: finalVerifiedStatus
        });
      } else {
        const modelId = await this.modelManager.addModel({
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3
        });
        if (this.isNewModelVerified) {
          await this.modelManager.updateModel(modelId, { isVerified: true });
        }
      }
      if (this.parentModal) {
        this.parentModal.refreshModelList();
      }
      this.onSave();
      this.close();
    } catch (error) {
      new import_obsidian.Notice(`\u4FDD\u5B58\u5931\u8D25\uFF1A${error.message}`);
    }
  }
  validateForm() {
    var _a;
    const required = ["displayName", "modelName", "provider", "baseURL", "apiKey"];
    for (const field of required) {
      if (!((_a = this.formData[field]) == null ? void 0 : _a.trim())) {
        const fieldNames = {
          displayName: "\u663E\u793A\u540D\u79F0",
          modelName: "\u6A21\u578B\u578B\u53F7",
          provider: "AI\u63D0\u4F9B\u5546",
          baseURL: "\u57FA\u7840URL",
          apiKey: "API\u5BC6\u94A5"
        };
        new import_obsidian.Notice(`\u8BF7\u586B\u5199${fieldNames[field]}`);
        return false;
      }
    }
    if (!this.formData.maxContextTokens || this.formData.maxContextTokens < 1e3) {
      new import_obsidian.Notice("\u6700\u5927\u4E0A\u4E0B\u6587\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E1000");
      return false;
    }
    if (!this.formData.maxOutputTokens || this.formData.maxOutputTokens < 100) {
      new import_obsidian.Notice("\u6700\u5927\u8F93\u51FA\u4EE4\u724C\u6570\u4E0D\u80FD\u5C11\u4E8E100");
      return false;
    }
    return true;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.baseURLInput = null;
    this.modelNameInput = null;
  }
};
var DefaultModelSelector = class {
  constructor(container, modelManager, onModelChange) {
    this.container = container;
    this.modelManager = modelManager;
    this.onModelChange = onModelChange;
    this.render();
  }
  render() {
    this.container.empty();
    this.selectEl = this.container.createEl("select", { cls: "dropdown" });
    this.selectEl.style.width = "100%";
    this.selectEl.style.padding = "8px";
    this.selectEl.style.borderRadius = "4px";
    this.selectEl.style.border = "1px solid var(--background-modifier-border)";
    this.selectEl.style.backgroundColor = "var(--background-primary)";
    this.updateOptions();
    this.selectEl.addEventListener("change", async () => {
      const selectedValue = this.selectEl.value;
      const modelId = selectedValue === "" ? null : selectedValue;
      if (modelId) {
        await this.modelManager.setDefaultModel(modelId);
      }
      this.onModelChange(modelId);
    });
  }
  updateOptions() {
    if (!this.selectEl)
      return;
    this.selectEl.innerHTML = "";
    const defaultOption = this.selectEl.createEl("option", { value: "", text: "\u8BF7\u9009\u62E9\u9ED8\u8BA4\u6A21\u578B" });
    const verifiedModels = this.modelManager.getVerifiedModels();
    if (verifiedModels.length === 0) {
      const noModelOption = this.selectEl.createEl("option", {
        value: "",
        text: "\u6682\u65E0\u53EF\u7528\u6A21\u578B\uFF08\u8BF7\u5148\u6DFB\u52A0\u5E76\u9A8C\u8BC1\u6A21\u578B\uFF09"
      });
      noModelOption.disabled = true;
      this.selectEl.disabled = true;
    } else {
      this.selectEl.disabled = false;
      verifiedModels.forEach((model) => {
        const option = this.selectEl.createEl("option", {
          value: model.id,
          text: model.displayName
        });
      });
    }
    const defaultModelId = this.modelManager.getDefaultModelId();
    if (defaultModelId) {
      this.selectEl.value = defaultModelId;
    }
  }
  // 外部调用以更新选项
  refresh() {
    this.updateOptions();
  }
};

// data-migration-modal.ts
var import_obsidian2 = require("obsidian");
var DataMigrationModal = class extends import_obsidian2.Modal {
  constructor(app, dataManager, hasOldData) {
    super(app);
    this.dataManager = dataManager;
    this.hasOldData = hasOldData;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("data-migration-modal");
    if (this.hasOldData) {
      this.showMigrationCompleteView(contentEl);
    } else {
      this.showNewDataSystemView(contentEl);
    }
  }
  showMigrationCompleteView(container) {
    const titleEl = container.createEl("h2", {
      text: "\u{1F389} \u6570\u636E\u8FC1\u79FB\u5B8C\u6210\uFF01",
      cls: "modal-title"
    });
    titleEl.style.color = "var(--color-green)";
    titleEl.style.textAlign = "center";
    titleEl.style.marginBottom = "20px";
    const contentDiv = container.createEl("div", { cls: "migration-content" });
    contentDiv.style.padding = "20px";
    contentDiv.style.lineHeight = "1.6";
    contentDiv.createEl("p", {
      text: "\u60A8\u7684\u65E7\u914D\u7F6E\u6570\u636E\u5DF2\u6210\u529F\u8FC1\u79FB\u5230\u65B0\u7684\u6570\u636E\u5B58\u50A8\u7CFB\u7EDF\uFF01"
    });
    const changesTitle = contentDiv.createEl("h3", { text: "\u{1F4CB} \u4E3B\u8981\u6539\u53D8" });
    changesTitle.style.marginTop = "20px";
    changesTitle.style.marginBottom = "10px";
    const changesList = contentDiv.createEl("ul");
    changesList.style.paddingLeft = "20px";
    const changes = [
      "\u{1F512} API\u5BC6\u94A5\u73B0\u5728\u5DF2\u52A0\u5BC6\u5B58\u50A8\uFF0C\u66F4\u52A0\u5B89\u5168",
      "\u{1F4C1} \u6240\u6709\u914D\u7F6E\u6570\u636E\u4FDD\u5B58\u5728\u72EC\u7ACB\u7684 plugin-data.json \u6587\u4EF6\u4E2D",
      "\u{1F9F9} \u5DF2\u6E05\u7406 localStorage \u4E2D\u7684\u65E7\u6570\u636E",
      "\u{1F680} \u63D2\u4EF6\u5206\u4EAB\u66F4\u65B9\u4FBF\uFF0C\u53EA\u9700\u590D\u5236\u6838\u5FC3\u6587\u4EF6"
    ];
    changes.forEach((change) => {
      const li = changesList.createEl("li");
      li.textContent = change;
      li.style.marginBottom = "8px";
    });
    const locationTitle = contentDiv.createEl("h3", { text: "\u{1F4CD} \u6570\u636E\u6587\u4EF6\u4F4D\u7F6E" });
    locationTitle.style.marginTop = "20px";
    locationTitle.style.marginBottom = "10px";
    const locationCode = contentDiv.createEl("code", {
      text: this.dataManager.getDataFilePath()
    });
    locationCode.style.backgroundColor = "var(--background-secondary)";
    locationCode.style.padding = "8px 12px";
    locationCode.style.borderRadius = "4px";
    locationCode.style.display = "block";
    locationCode.style.marginBottom = "15px";
    const reminderDiv = contentDiv.createEl("div", { cls: "reminder-box" });
    reminderDiv.style.backgroundColor = "var(--background-modifier-border)";
    reminderDiv.style.border = "1px solid var(--color-accent)";
    reminderDiv.style.borderRadius = "8px";
    reminderDiv.style.padding = "15px";
    reminderDiv.style.marginTop = "20px";
    const reminderTitle = reminderDiv.createEl("h4", { text: "\u{1F4A1} \u5206\u4EAB\u63D2\u4EF6\u65F6" });
    reminderTitle.style.color = "var(--color-accent)";
    reminderTitle.style.marginBottom = "10px";
    reminderDiv.createEl("p", {
      text: "\u73B0\u5728\u60A8\u53EF\u4EE5\u5B89\u5168\u5730\u5206\u4EAB\u63D2\u4EF6\uFF0C\u53EA\u9700\u590D\u5236\u4EE5\u4E0B\u4E09\u4E2A\u6587\u4EF6\uFF1A"
    });
    const filesList = reminderDiv.createEl("ul");
    ["main.js", "styles.css", "manifest.json"].forEach((file) => {
      const li = filesList.createEl("li");
      li.textContent = file;
    });
    reminderDiv.createEl("p", {
      text: "\u4E0D\u8981\u590D\u5236 plugin-data.json \u6587\u4EF6\uFF0C\u8FD9\u6837\u5176\u4ED6\u4EBA\u4F1A\u83B7\u5F97\u4E00\u4E2A\u5E72\u51C0\u7684\u521D\u59CB\u72B6\u6001\u63D2\u4EF6\u3002",
      cls: "text-muted"
    });
    this.addButtons(container, "\u6211\u77E5\u9053\u4E86");
  }
  showNewDataSystemView(container) {
    const titleEl = container.createEl("h2", {
      text: "\u{1F195} \u65B0\u7684\u6570\u636E\u5B58\u50A8\u7CFB\u7EDF",
      cls: "modal-title"
    });
    titleEl.style.color = "var(--color-accent)";
    titleEl.style.textAlign = "center";
    titleEl.style.marginBottom = "20px";
    const contentDiv = container.createEl("div", { cls: "new-system-content" });
    contentDiv.style.padding = "20px";
    contentDiv.style.lineHeight = "1.6";
    contentDiv.createEl("p", {
      text: "\u6B22\u8FCE\u4F7F\u7528 Git \u81EA\u52A8\u63D0\u4EA4\u63D2\u4EF6\uFF01\u6211\u4EEC\u4F7F\u7528\u4E86\u5168\u65B0\u7684\u6570\u636E\u5B58\u50A8\u7CFB\u7EDF\uFF0C\u8BA9\u60A8\u7684\u914D\u7F6E\u66F4\u5B89\u5168\u3001\u66F4\u6613\u7BA1\u7406\u3002"
    });
    const featuresTitle = contentDiv.createEl("h3", { text: "\u2728 \u4E3B\u8981\u7279\u6027" });
    featuresTitle.style.marginTop = "20px";
    featuresTitle.style.marginBottom = "10px";
    const featuresList = contentDiv.createEl("ul");
    featuresList.style.paddingLeft = "20px";
    const features = [
      "\u{1F510} API\u5BC6\u94A5\u52A0\u5BC6\u5B58\u50A8\uFF0C\u4FDD\u62A4\u60A8\u7684\u9690\u79C1",
      "\u{1F4C1} \u72EC\u7ACB\u6570\u636E\u6587\u4EF6\uFF0C\u914D\u7F6E\u4E0E\u4EE3\u7801\u5206\u79BB",
      "\u{1F504} \u81EA\u52A8\u6570\u636E\u5907\u4EFD\u548C\u6062\u590D",
      "\u{1F4E4} \u7B80\u5316\u7684\u63D2\u4EF6\u5206\u4EAB\u6D41\u7A0B",
      "\u{1F39B}\uFE0F \u7075\u6D3B\u7684\u4E2A\u6027\u5316\u8BBE\u7F6E\u9009\u9879"
    ];
    features.forEach((feature) => {
      const li = featuresList.createEl("li");
      li.textContent = feature;
      li.style.marginBottom = "8px";
    });
    const startTitle = contentDiv.createEl("h3", { text: "\u{1F680} \u5F00\u59CB\u4F7F\u7528" });
    startTitle.style.marginTop = "20px";
    startTitle.style.marginBottom = "10px";
    const startList = contentDiv.createEl("ol");
    startList.style.paddingLeft = "20px";
    const steps = [
      "\u5728\u8BBE\u7F6E\u4E2D\u6DFB\u52A0\u60A8\u7684\u7B2C\u4E00\u4E2AAI\u6A21\u578B",
      "\u914D\u7F6E\u6A21\u578B\u7684API\u5BC6\u94A5\u548C\u53C2\u6570",
      "\u9A8C\u8BC1\u6A21\u578B\u8FDE\u63A5\u662F\u5426\u6B63\u5E38",
      "\u8BBE\u7F6E\u4E3A\u9ED8\u8BA4\u6A21\u578B\u5F00\u59CB\u4F7F\u7528"
    ];
    steps.forEach((step) => {
      const li = startList.createEl("li");
      li.textContent = step;
      li.style.marginBottom = "8px";
    });
    const tipDiv = contentDiv.createEl("div", { cls: "tip-box" });
    tipDiv.style.backgroundColor = "var(--background-secondary)";
    tipDiv.style.border = "1px solid var(--color-green)";
    tipDiv.style.borderRadius = "8px";
    tipDiv.style.padding = "15px";
    tipDiv.style.marginTop = "20px";
    const tipTitle = tipDiv.createEl("h4", { text: "\u{1F4A1} \u5C0F\u63D0\u793A" });
    tipTitle.style.color = "var(--color-green)";
    tipTitle.style.marginBottom = "10px";
    tipDiv.createEl("p", {
      text: '\u60A8\u53EF\u4EE5\u968F\u65F6\u4F7F\u7528"\u8C03\u8BD5\u6570\u636E\u72B6\u6001"\u547D\u4EE4\u6765\u67E5\u770B\u5F53\u524D\u7684\u914D\u7F6E\u72B6\u6001\uFF0C\u6216\u4F7F\u7528"\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E"\u547D\u4EE4\u6062\u590D\u5230\u521D\u59CB\u72B6\u6001\u3002'
    });
    this.addButtons(container, "\u5F00\u59CB\u914D\u7F6E");
  }
  addButtons(container, primaryButtonText) {
    const buttonContainer = container.createEl("div", { cls: "modal-button-container" });
    buttonContainer.style.marginTop = "30px";
    buttonContainer.style.textAlign = "center";
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.justifyContent = "center";
    const primaryButton = buttonContainer.createEl("button", {
      text: primaryButtonText,
      cls: "mod-cta"
    });
    primaryButton.style.padding = "10px 20px";
    primaryButton.addEventListener("click", () => {
      this.close();
    });
    const detailsButton = buttonContainer.createEl("button", {
      text: "\u67E5\u770B\u8BE6\u7EC6\u8BF4\u660E"
    });
    detailsButton.style.padding = "10px 20px";
    detailsButton.addEventListener("click", () => {
      this.showDetailedInfo();
    });
  }
  showDetailedInfo() {
    const info = `
# Git \u81EA\u52A8\u63D0\u4EA4\u63D2\u4EF6 - \u6570\u636E\u5B58\u50A8\u8BF4\u660E

## \u6570\u636E\u6587\u4EF6\u4F4D\u7F6E
${this.dataManager.getDataFilePath()}

## \u4E3B\u8981\u6539\u8FDB
1. **\u5B89\u5168\u6027**: API\u5BC6\u94A5\u4F7F\u7528Base64\u7F16\u7801\u5B58\u50A8
2. **\u72EC\u7ACB\u6027**: \u914D\u7F6E\u6570\u636E\u4E0E\u63D2\u4EF6\u4EE3\u7801\u5B8C\u5168\u5206\u79BB  
3. **\u4FBF\u643A\u6027**: \u66F4\u5BB9\u6613\u5206\u4EAB\u548C\u5907\u4EFD\u63D2\u4EF6
4. **\u53EF\u7EF4\u62A4\u6027**: \u6E05\u6670\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u4FBF\u4E8E\u7BA1\u7406

## \u91CD\u7F6E\u8BF4\u660E
- \u5220\u9664\u6570\u636E\u6587\u4EF6\u5373\u53EF\u91CD\u7F6E\u4E3A\u521D\u59CB\u72B6\u6001
- \u53EF\u4F7F\u7528"\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E"\u547D\u4EE4
- \u63D2\u4EF6\u4F1A\u81EA\u52A8\u521B\u5EFA\u65B0\u7684\u9ED8\u8BA4\u914D\u7F6E

## \u8C03\u8BD5\u5DE5\u5177
- "\u8C03\u8BD5AI\u914D\u7F6E": \u67E5\u770B\u6A21\u578B\u914D\u7F6E\u72B6\u6001
- "\u8C03\u8BD5\u6570\u636E\u72B6\u6001": \u67E5\u770B\u5B8C\u6574\u6570\u636E\u72B6\u6001
- "\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E": \u6062\u590D\u521D\u59CB\u72B6\u6001

\u66F4\u591A\u8BE6\u7EC6\u4FE1\u606F\u8BF7\u67E5\u770B\u63D2\u4EF6\u76EE\u5F55\u4E2D\u7684 DATA_STORAGE.md \u6587\u4EF6\u3002
        `;
    navigator.clipboard.writeText(info).then(() => {
      new import_obsidian2.Notice("\u8BE6\u7EC6\u8BF4\u660E\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F");
    }).catch(() => {
      console.log("Git Auto Commit - \u8BE6\u7EC6\u8BF4\u660E:", info);
      new import_obsidian2.Notice("\u8BE6\u7EC6\u8BF4\u660E\u5DF2\u8F93\u51FA\u5230\u63A7\u5236\u53F0\uFF0C\u8BF7\u6309F12\u67E5\u770B");
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DataMigrationChecker = class {
  static async checkAndShowMigrationIfNeeded(app, dataManager) {
    try {
      const hasOldModels = localStorage.getItem("git-auto-commit-models") !== null;
      const hasOldDefaultModel = localStorage.getItem("git-auto-commit-default-model") !== null;
      const hasOldData = hasOldModels || hasOldDefaultModel;
      const dataFileExists = await dataManager.dataFileExists();
      const isFirstRun = !dataFileExists && !hasOldData;
      if (hasOldData || isFirstRun) {
        const modal = new DataMigrationModal(app, dataManager, hasOldData);
        modal.open();
      }
    } catch (error) {
      console.warn("Git Auto Commit - \u8FC1\u79FB\u68C0\u67E5\u5931\u8D25:", error);
    }
  }
};

// git-commit-view.ts
var import_obsidian3 = require("obsidian");
var GIT_COMMIT_VIEW_TYPE = "git-auto-commit-view";
var GitCommitView = class extends import_obsidian3.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.commitMessage = "";
    this.changes = [];
    this.status = null;
    // 新的状态对象
    this.commitMessageTextarea = null;
    this.commitButton = null;
    this.stageButton = null;
    this.pushButton = null;
    this.refreshButton = null;
    this.changesContainer = null;
    this.isPostCommitState = false;
    this.isLoading = false;
    this.plugin = plugin;
  }
  getViewType() {
    return GIT_COMMIT_VIEW_TYPE;
  }
  getDisplayText() {
    return "Git\u63D0\u4EA4";
  }
  getIcon() {
    return "git-commit";
  }
  async onOpen() {
    this.plugin.debugLog("=== GitCommitView onOpen \u5F00\u59CB ===");
    await this.buildView();
    this.plugin.debugLog("=== buildView \u5B8C\u6210\uFF0C\u5F00\u59CB refreshChanges ===");
    await this.refreshChanges();
    this.plugin.debugLog("=== GitCommitView onOpen \u5B8C\u6210 ===");
    this.registerDomEvent(window, "resize", () => {
      setTimeout(() => this.adjustTextareaHeight(), 100);
    });
  }
  onClose() {
    return super.onClose();
  }
  async buildView() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("git-commit-view");
    const contentEl = container.createDiv("git-view");
    this.createHeader(contentEl);
    this.createCommitMessageSection(contentEl);
    this.createChangesSection(contentEl);
  }
  createHeader(container) {
    const header = container.createDiv("nav-header");
    const buttonsContainer = header.createDiv("nav-buttons-container");
    new import_obsidian3.ButtonComponent(buttonsContainer).setIcon("bot").setTooltip("AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F").onClick(async () => {
      await this.generateAIMessage();
    }).buttonEl.addClass("clickable-icon", "nav-action-button");
    this.commitButton = new import_obsidian3.ButtonComponent(buttonsContainer).setIcon("arrow-up-circle").setTooltip("\u63D0\u4EA4").onClick(async () => {
      await this.performCommit();
    });
    this.commitButton.buttonEl.addClass("clickable-icon", "nav-action-button", "git-commit-icon-button");
    this.stageButton = new import_obsidian3.ButtonComponent(buttonsContainer).setIcon("plus-circle").setTooltip("\u6682\u5B58\u6240\u6709\u6587\u4EF6").onClick(async () => {
      await this.performStageAll();
    });
    this.stageButton.buttonEl.addClass("clickable-icon", "nav-action-button");
    this.refreshButton = new import_obsidian3.ButtonComponent(buttonsContainer).setIcon("refresh-cw").setTooltip("\u5237\u65B0").onClick(async () => {
      await this.refreshChanges();
    });
    this.refreshButton.buttonEl.addClass("clickable-icon", "nav-action-button");
    this.pushButton = new import_obsidian3.ButtonComponent(buttonsContainer).setIcon("upload").setTooltip("\u63A8\u9001").onClick(async () => {
      await this.performPush();
    });
    this.pushButton.buttonEl.addClass("clickable-icon", "nav-action-button");
    this.pushButton.buttonEl.style.display = "none";
  }
  createCommitMessageSection(container) {
    const messageSection = container.createDiv("git-commit-msg");
    const inputContainer = messageSection.createDiv("commit-msg-input-container");
    this.commitMessageTextarea = new import_obsidian3.TextAreaComponent(inputContainer);
    this.commitMessageTextarea.inputEl.addClass("commit-msg-input");
    this.commitMessageTextarea.setPlaceholder("Commit Message");
    this.commitMessageTextarea.onChange(async (value) => {
      this.commitMessage = value;
      await this.updateButtonStates();
      this.adjustTextareaHeight();
    });
    this.commitMessageTextarea.inputEl.style.minHeight = "54px";
    this.commitMessageTextarea.inputEl.style.resize = "none";
    this.commitMessageTextarea.inputEl.style.overflow = "hidden";
    this.commitMessageTextarea.inputEl.addEventListener("input", () => {
      this.adjustTextareaHeight();
    });
    const clearButton = inputContainer.createDiv("commit-msg-clear-button");
    clearButton.setAttribute("aria-label", "\u6E05\u9664\u63D0\u4EA4\u4FE1\u606F");
    clearButton.addEventListener("click", async () => {
      var _a;
      this.commitMessage = "";
      (_a = this.commitMessageTextarea) == null ? void 0 : _a.setValue("");
      await this.updateButtonStates();
      this.adjustTextareaHeight();
    });
    this.adjustTextareaHeight();
  }
  adjustTextareaHeight() {
    if (!this.commitMessageTextarea)
      return;
    const textarea = this.commitMessageTextarea.inputEl;
    const messageSection = textarea.closest(".git-commit-msg");
    if (!messageSection)
      return;
    textarea.style.height = "auto";
    const gitViewEl = textarea.closest(".git-view");
    if (!gitViewEl)
      return;
    const gitViewHeight = gitViewEl.clientHeight;
    const availableHeight = gitViewHeight - 37 - 182;
    const maxTextareaHeight = Math.max(54, availableHeight - 20);
    const contentHeight = Math.max(54, textarea.scrollHeight);
    if (contentHeight <= maxTextareaHeight) {
      textarea.style.height = contentHeight + "px";
      textarea.style.overflowY = "hidden";
      messageSection.style.height = contentHeight + 13.5 + "px";
    } else {
      textarea.style.height = maxTextareaHeight + "px";
      textarea.style.overflowY = "auto";
      messageSection.style.height = maxTextareaHeight + 13.5 + "px";
    }
  }
  createChangesSection(container) {
    this.changesContainer = container.createDiv("nav-files-container");
  }
  async refreshChanges() {
    if (this.isLoading)
      return;
    this.plugin.debugLog("=== refreshChanges \u5F00\u59CB ===");
    this.isLoading = true;
    this.updateLoadingState();
    try {
      if (!await this.plugin.validateRepository()) {
        this.plugin.debugLog("Git\u4ED3\u5E93\u9A8C\u8BC1\u5931\u8D25");
        this.showEmptyState("\u5F53\u524D\u76EE\u5F55\u4E0D\u662FGit\u4ED3\u5E93");
        return;
      }
      this.plugin.debugLog("Git\u4ED3\u5E93\u9A8C\u8BC1\u6210\u529F\uFF0C\u5F00\u59CB\u83B7\u53D6\u72B6\u6001...");
      this.status = await this.plugin.getGitStatus();
      this.plugin.debugLog("\u83B7\u53D6\u5230\u7684Git\u72B6\u6001:", this.status);
      await this.updateChangesDisplay();
    } catch (error) {
      console.error("\u5237\u65B0\u53D8\u66F4\u5931\u8D25:", error);
      this.showEmptyState(`\u83B7\u53D6\u53D8\u66F4\u5931\u8D25: ${error.message}`);
    } finally {
      this.isLoading = false;
      this.updateLoadingState();
      this.plugin.debugLog("=== refreshChanges \u7ED3\u675F ===");
    }
  }
  async updateChangesDisplay() {
    if (!this.changesContainer || !this.status) {
      this.plugin.debugLog("=== updateChangesDisplay \u8DF3\u8FC7 ===");
      this.plugin.debugLog("changesContainer:", this.changesContainer);
      this.plugin.debugLog("status:", this.status);
      return;
    }
    this.plugin.debugLog("=== updateChangesDisplay \u5F00\u59CB ===");
    this.plugin.debugLog("Git\u72B6\u6001\u5BF9\u8C61:", this.status);
    this.plugin.debugLog("\u6682\u5B58\u6587\u4EF6\u6570\u91CF:", this.status.staged.length);
    this.plugin.debugLog("\u672A\u6682\u5B58\u6587\u4EF6\u6570\u91CF:", this.status.changed.length);
    this.changesContainer.empty();
    this.changes = [];
    this.status.staged.forEach((file) => {
      this.changes.push({
        filePath: file.path,
        status: file.index,
        // 使用文件的索引状态
        statusText: file.index || "M",
        // 状态文本
        isStaged: true,
        diff: ""
        // diff 信息在需要时获取
      });
    });
    this.status.changed.forEach((file) => {
      this.changes.push({
        filePath: file.path,
        status: file.workingDir,
        // 使用文件的工作目录状态
        statusText: file.workingDir || "M",
        // 状态文本
        isStaged: false,
        diff: ""
        // diff 信息在需要时获取
      });
    });
    this.plugin.debugLog("=== updateChangesDisplay \u586B\u5145changes\u6570\u7EC4 ===");
    this.plugin.debugLog("\u6700\u7EC8changes\u6570\u7EC4\u957F\u5EA6:", this.changes.length);
    this.plugin.debugLog("\u6700\u7EC8changes\u6570\u7EC4:", this.changes);
    await this.updateButtonStates();
    if (this.status.all.length === 0) {
      await this.showEmptyState("\u6CA1\u6709\u68C0\u6D4B\u5230\u6587\u4EF6\u53D8\u66F4");
      return;
    }
    const changesTreeContainer = this.changesContainer.createDiv("tree-item nav-folder mod-root");
    if (this.status.staged.length > 0) {
      this.createFileStatusGroup(changesTreeContainer, "\u6682\u5B58\u6587\u4EF6", this.status.staged, true);
    }
    if (this.status.changed.length > 0) {
      this.createFileStatusGroup(changesTreeContainer, "\u672A\u6682\u5B58\u6587\u4EF6", this.status.changed, false);
    }
  }
  createFileStatusGroup(container, title, files, isStaged) {
    const groupContainer = container.createDiv(`${isStaged ? "staged" : "changes"} tree-item nav-folder git-change-group`);
    const titleContainer = groupContainer.createDiv("tree-item-self nav-folder-title is-clickable");
    const collapseIconEl = titleContainer.createDiv("collapse-icon");
    (0, import_obsidian3.setIcon)(collapseIconEl, "chevron-down");
    const titleText = titleContainer.createDiv("tree-item-inner nav-folder-title-content");
    titleText.textContent = title;
    const countBadge = titleContainer.createSpan("tree-item-flair");
    countBadge.textContent = files.length.toString();
    const filesList = groupContainer.createDiv("tree-item-children nav-folder-children");
    files.forEach((file) => this.createFileStatusItem(filesList, file, isStaged));
    titleContainer.addEventListener("click", () => {
      const willCollapse = !groupContainer.classList.contains("is-collapsed");
      if (willCollapse) {
        groupContainer.classList.add("is-collapsed");
        filesList.style.display = "none";
        (0, import_obsidian3.setIcon)(collapseIconEl, "chevron-right");
      } else {
        groupContainer.classList.remove("is-collapsed");
        filesList.style.display = "";
        (0, import_obsidian3.setIcon)(collapseIconEl, "chevron-down");
      }
    });
  }
  createFileStatusItem(container, file, isStaged) {
    const fileItem = container.createDiv("tree-item nav-file");
    const fileContent = fileItem.createDiv("tree-item-self nav-file-title is-clickable");
    const fileName = fileContent.createDiv("tree-item-inner nav-file-title-content");
    const displayName = this.getDisplayPath(file.vaultPath);
    fileName.textContent = displayName;
    const decodedPath = this.getDecodedPath(file.vaultPath);
    fileName.setAttribute("title", decodedPath);
    const statusIcon = fileContent.createDiv("tree-item-icon nav-file-tag git-status-right");
    const statusText = this.getStatusText(isStaged ? file.index : file.workingDir);
    statusIcon.textContent = statusText;
    statusIcon.setAttribute("data-status", isStaged ? file.index : file.workingDir);
    fileContent.addEventListener("click", () => {
    });
  }
  getStatusText(status) {
    switch (status) {
      case "M":
        return "M";
      case "A":
        return "A";
      case "D":
        return "D";
      case "R":
        return "R";
      case "C":
        return "C";
      case "U":
        return "U";
      case "?":
        return "?";
      default:
        return status;
    }
  }
  createFileItem(container, change) {
    const fileItem = container.createDiv("tree-item nav-file");
    const fileInfo = fileItem.createDiv("tree-item-self is-clickable nav-file-title");
    const fileName = fileInfo.createDiv("tree-item-inner nav-file-title-content");
    fileName.textContent = this.getDisplayPath(change.filePath);
    const statusBadge = fileInfo.createDiv("git-file-status");
    statusBadge.textContent = this.getStatusText(change.status);
    statusBadge.addClass(`status-${change.status.toLowerCase()}`);
    fileInfo.addEventListener("click", () => {
      if (change.diff) {
        this.toggleDiffDisplay(fileItem, change);
      }
    });
  }
  toggleDiffDisplay(fileItem, change) {
    let diffContainer = fileItem.querySelector(".git-diff-container");
    if (diffContainer) {
      const isVisible = diffContainer.style.display !== "none";
      diffContainer.style.display = isVisible ? "none" : "block";
    } else if (change.diff) {
      diffContainer = fileItem.createDiv("git-diff-container");
      const diffContent = diffContainer.createEl("pre");
      diffContent.innerHTML = `<code>${this.escapeHtml(change.diff)}</code>`;
    }
  }
  async generateAIMessage() {
    var _a;
    try {
      new import_obsidian3.Notice("\u6B63\u5728\u751F\u6210AI\u63D0\u4EA4\u4FE1\u606F...");
      this.plugin.debugLog("UI: \u5F00\u59CB\u8C03\u7528AI\u751F\u6210\u65B9\u6CD5");
      const aiMessage = await this.plugin.generateAICommitMessageOnly();
      this.plugin.debugLog("UI: AI\u65B9\u6CD5\u8FD4\u56DE\u7ED3\u679C:", aiMessage);
      if (aiMessage) {
        this.commitMessage = aiMessage;
        (_a = this.commitMessageTextarea) == null ? void 0 : _a.setValue(aiMessage);
        this.adjustTextareaHeight();
        await this.updateButtonStates();
        new import_obsidian3.Notice("\u2705 AI\u63D0\u4EA4\u4FE1\u606F\u751F\u6210\u5B8C\u6210");
        this.plugin.debugLog("UI: AI\u63D0\u4EA4\u4FE1\u606F\u8BBE\u7F6E\u6210\u529F");
      } else {
        this.plugin.debugWarn("UI: AI\u65B9\u6CD5\u8FD4\u56DE\u7A7A\u7ED3\u679C");
        new import_obsidian3.Notice("\u26A0\uFE0F AI\u751F\u6210\u7684\u63D0\u4EA4\u4FE1\u606F\u4E3A\u7A7A");
      }
    } catch (error) {
      this.plugin.debugError("UI: AI\u751F\u6210\u5931\u8D25:", error);
      this.plugin.debugError("UI: \u9519\u8BEF\u8BE6\u60C5:", error.message, error.stack);
      new import_obsidian3.Notice(`\u274C AI\u751F\u6210\u5931\u8D25: ${error.message}`);
    }
  }
  async performCommit() {
    var _a, _b, _c, _d, _e, _f, _g;
    this.plugin.debugLog("=== performCommit \u5F00\u59CB ===");
    this.plugin.debugLog("\u5F53\u524D\u63D0\u4EA4\u4FE1\u606F:", this.commitMessage);
    this.plugin.debugLog("\u63D0\u4EA4\u4FE1\u606F\u957F\u5EA6:", this.commitMessage.trim().length);
    if (!this.commitMessage.trim()) {
      this.plugin.debugWarn("\u63D0\u4EA4\u88AB\u62D2\u7EDD\uFF1A\u6CA1\u6709\u63D0\u4EA4\u4FE1\u606F");
      new import_obsidian3.Notice("\u274C \u8BF7\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F");
      return;
    }
    const stagedFiles = this.changes.filter((c) => c.isStaged).map((c) => c.filePath);
    this.plugin.debugLog("\u5DF2\u6682\u5B58\u6587\u4EF6\u5217\u8868:", stagedFiles);
    this.plugin.debugLog("\u5DF2\u6682\u5B58\u6587\u4EF6\u6570\u91CF:", stagedFiles.length);
    if (stagedFiles.length === 0) {
      this.plugin.debugWarn("\u63D0\u4EA4\u88AB\u62D2\u7EDD\uFF1A\u6CA1\u6709\u5DF2\u6682\u5B58\u6587\u4EF6");
      new import_obsidian3.Notice("\u274C \u6CA1\u6709\u5DF2\u6682\u5B58\u7684\u6587\u4EF6\u9700\u8981\u63D0\u4EA4");
      return;
    }
    this.plugin.debugLog("\u5F00\u59CB\u6267\u884C\u63D0\u4EA4\u64CD\u4F5C...");
    try {
      (_a = this.commitButton) == null ? void 0 : _a.setDisabled(true);
      (_b = this.commitButton) == null ? void 0 : _b.buttonEl.classList.add("loading");
      await this.plugin.performActualCommit(stagedFiles, this.commitMessage.trim());
      new import_obsidian3.Notice("\u2705 \u63D0\u4EA4\u6210\u529F\uFF01");
      this.commitMessage = "";
      (_c = this.commitMessageTextarea) == null ? void 0 : _c.setValue("");
      this.adjustTextareaHeight();
      await this.refreshChanges();
      (_d = this.commitButton) == null ? void 0 : _d.buttonEl.classList.remove("loading");
      (_e = this.commitButton) == null ? void 0 : _e.setDisabled(false);
    } catch (error) {
      console.error("\u63D0\u4EA4\u5931\u8D25:", error);
      new import_obsidian3.Notice(`\u274C \u63D0\u4EA4\u5931\u8D25: ${error.message}`);
      (_f = this.commitButton) == null ? void 0 : _f.buttonEl.classList.remove("loading");
      (_g = this.commitButton) == null ? void 0 : _g.setDisabled(false);
    }
  }
  async performStageAll() {
    var _a, _b, _c, _d;
    this.plugin.debugLog("=== performStageAll \u5F00\u59CB ===");
    const unstagedFiles = this.changes.filter((c) => !c.isStaged);
    this.plugin.debugLog("\u6240\u6709\u53D8\u66F4\u6587\u4EF6:", this.changes);
    this.plugin.debugLog("\u672A\u6682\u5B58\u6587\u4EF6\u6570\u91CF:", unstagedFiles.length);
    this.plugin.debugLog("\u672A\u6682\u5B58\u6587\u4EF6\u5217\u8868:", unstagedFiles);
    if (unstagedFiles.length === 0) {
      this.plugin.debugWarn("\u6682\u5B58\u88AB\u62D2\u7EDD\uFF1A\u6CA1\u6709\u672A\u6682\u5B58\u6587\u4EF6");
      new import_obsidian3.Notice("\u274C \u6CA1\u6709\u672A\u6682\u5B58\u7684\u6587\u4EF6\u9700\u8981\u6682\u5B58");
      return;
    }
    this.plugin.debugLog("\u5F00\u59CB\u6267\u884C\u6682\u5B58\u64CD\u4F5C...");
    try {
      (_a = this.stageButton) == null ? void 0 : _a.setDisabled(true);
      (_b = this.stageButton) == null ? void 0 : _b.buttonEl.classList.add("loading");
      const filePaths = unstagedFiles.map((c) => c.filePath);
      await this.plugin.stageFiles(filePaths);
      new import_obsidian3.Notice(`\u2705 \u5DF2\u6682\u5B58 ${unstagedFiles.length} \u4E2A\u6587\u4EF6`);
      await this.refreshChanges();
    } catch (error) {
      console.error("\u6682\u5B58\u5931\u8D25:", error);
      new import_obsidian3.Notice(`\u274C \u6682\u5B58\u5931\u8D25: ${error.message}`);
    } finally {
      (_c = this.stageButton) == null ? void 0 : _c.buttonEl.classList.remove("loading");
      (_d = this.stageButton) == null ? void 0 : _d.setDisabled(false);
    }
  }
  async performPush() {
    var _a, _b, _c, _d, _e;
    try {
      (_a = this.pushButton) == null ? void 0 : _a.setDisabled(true);
      (_b = this.pushButton) == null ? void 0 : _b.buttonEl.classList.add("loading");
      const vaultPath = this.app.vault.adapter.basePath;
      const { execSync } = require("child_process");
      try {
        const unpushedCommits = execSync("git log --oneline @{u}..HEAD", {
          cwd: vaultPath,
          encoding: "utf8"
        }).trim();
        if (!unpushedCommits) {
          new import_obsidian3.Notice("\u274C \u6CA1\u6709\u9700\u8981\u63A8\u9001\u7684\u672C\u5730\u63D0\u4EA4");
          return;
        }
      } catch (checkError) {
        console.log("\u65E0\u6CD5\u68C0\u67E5\u672A\u63A8\u9001\u63D0\u4EA4\uFF0C\u76F4\u63A5\u5C1D\u8BD5\u63A8\u9001");
      }
      await this.plugin.pushToRemoteRepository();
      new import_obsidian3.Notice("\u2705 \u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93\u6210\u529F");
      this.commitMessage = "";
      (_c = this.commitMessageTextarea) == null ? void 0 : _c.setValue("");
      this.adjustTextareaHeight();
      await this.refreshChanges();
    } catch (error) {
      console.error("\u63A8\u9001\u5931\u8D25:", error);
      new import_obsidian3.Notice(`\u274C \u63A8\u9001\u5931\u8D25: ${error.message}`);
    } finally {
      (_d = this.pushButton) == null ? void 0 : _d.buttonEl.classList.remove("loading");
      (_e = this.pushButton) == null ? void 0 : _e.setDisabled(false);
    }
  }
  showPostCommitState() {
    var _a, _b;
    this.isPostCommitState = true;
    const commitSection = this.containerEl.querySelector(".git-commit-msg");
    const changesSection = this.containerEl.querySelector(".nav-files-container");
    if (commitSection)
      commitSection.style.display = "none";
    if (changesSection)
      changesSection.style.display = "none";
    this.showSuccessMessage();
    (_a = this.commitButton) == null ? void 0 : _a.buttonEl.style.setProperty("display", "none");
    (_b = this.pushButton) == null ? void 0 : _b.buttonEl.style.setProperty("display", "flex");
  }
  showSuccessMessage() {
    if (!this.changesContainer)
      return;
    this.changesContainer.empty();
    this.changesContainer.removeClass("nav-files-container");
    this.changesContainer.addClass("git-success-container");
    const successMessage = this.changesContainer.createDiv("git-success-message");
    successMessage.createEl("h3", { text: "\u2705 \u63D0\u4EA4\u6210\u529F", cls: "success-title" });
    successMessage.createEl("p", { text: "\u53D8\u66F4\u5DF2\u6210\u529F\u63D0\u4EA4\u5230\u672C\u5730\u4ED3\u5E93", cls: "success-text" });
    const commitInfo = successMessage.createDiv("commit-info");
    commitInfo.createEl("strong", { text: "\u63D0\u4EA4\u4FE1\u606F:" });
    const messageDisplay = commitInfo.createDiv("commit-message-display");
    messageDisplay.textContent = this.commitMessage;
  }
  async resetToInitialState() {
    this.isPostCommitState = false;
    this.commitMessage = "";
    await this.buildView();
    await this.refreshChanges();
  }
  getSelectedFiles() {
    return this.changes.map((change) => change.filePath);
  }
  async updateButtonStates() {
    const unstagedFiles = this.changes.filter((c) => !c.isStaged);
    const stagedFiles = this.changes.filter((c) => c.isStaged);
    const hasMessage = this.commitMessage.trim().length > 0;
    this.plugin.debugLog("=== \u6309\u94AE\u72B6\u6001\u8C03\u8BD5 ===");
    this.plugin.debugLog("\u603B\u6587\u4EF6\u53D8\u66F4\u6570\u91CF:", this.changes.length);
    this.plugin.debugLog("\u53D8\u66F4\u5217\u8868:", this.changes);
    this.plugin.debugLog("\u672A\u6682\u5B58\u6587\u4EF6\u6570\u91CF:", unstagedFiles.length);
    this.plugin.debugLog("\u5DF2\u6682\u5B58\u6587\u4EF6\u6570\u91CF:", stagedFiles.length);
    this.plugin.debugLog("\u63D0\u4EA4\u4FE1\u606F:", this.commitMessage);
    this.plugin.debugLog("\u6709\u63D0\u4EA4\u4FE1\u606F:", hasMessage);
    this.plugin.debugLog("\u63D0\u4EA4\u6309\u94AE\u5BF9\u8C61:", this.commitButton);
    const shouldEnableCommit = stagedFiles.length > 0 && hasMessage;
    this.plugin.debugLog("\u63D0\u4EA4\u6309\u94AE\u5E94\u8BE5\u542F\u7528:", shouldEnableCommit);
    this.plugin.debugLog("\u903B\u8F91\u68C0\u67E5 - \u5DF2\u6682\u5B58\u6587\u4EF6\u6570 > 0:", stagedFiles.length > 0);
    this.plugin.debugLog("\u903B\u8F91\u68C0\u67E5 - \u6709\u63D0\u4EA4\u4FE1\u606F:", hasMessage);
    if (this.commitButton) {
      this.commitButton.setDisabled(!shouldEnableCommit);
      if (stagedFiles.length === 0) {
        this.commitButton.setTooltip("\u63D0\u4EA4\uFF08\u6CA1\u6709\u5DF2\u6682\u5B58\u6587\u4EF6\uFF09");
        this.plugin.debugLog("\u63D0\u4EA4\u6309\u94AE\u63D0\u793A: \u6CA1\u6709\u5DF2\u6682\u5B58\u6587\u4EF6");
      } else if (!hasMessage) {
        this.commitButton.setTooltip("\u63D0\u4EA4\uFF08\u8BF7\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F\uFF09");
        this.plugin.debugLog("\u63D0\u4EA4\u6309\u94AE\u63D0\u793A: \u8BF7\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F");
      } else {
        this.commitButton.setTooltip("\u63D0\u4EA4");
        this.plugin.debugLog("\u63D0\u4EA4\u6309\u94AE\u63D0\u793A: \u6B63\u5E38\u63D0\u4EA4");
      }
      this.plugin.debugLog("\u63D0\u4EA4\u6309\u94AE\u7981\u7528\u72B6\u6001:", this.commitButton.buttonEl.disabled);
    } else {
      this.plugin.debugError("\u63D0\u4EA4\u6309\u94AE\u5BF9\u8C61\u4E3A\u7A7A!");
    }
    const shouldEnableStage = unstagedFiles.length > 0;
    this.plugin.debugLog("\u6682\u5B58\u6309\u94AE\u5E94\u8BE5\u542F\u7528:", shouldEnableStage);
    if (this.stageButton) {
      this.stageButton.setDisabled(!shouldEnableStage);
      this.plugin.debugLog("\u6682\u5B58\u6309\u94AE\u7981\u7528\u72B6\u6001:", this.stageButton.buttonEl.disabled);
    } else {
      this.plugin.debugError("\u6682\u5B58\u6309\u94AE\u5BF9\u8C61\u4E3A\u7A7A!");
    }
    await this.updatePushButtonState();
    this.plugin.debugLog("=== \u6309\u94AE\u72B6\u6001\u8C03\u8BD5\u7ED3\u675F ===");
  }
  async updatePushButtonState() {
    if (!this.pushButton)
      return;
    try {
      const vaultPath = this.app.vault.adapter.basePath;
      const { execSync } = require("child_process");
      const unpushedCommits = execSync("git rev-list --count @{u}..HEAD", {
        cwd: vaultPath,
        encoding: "utf8"
      }).trim();
      const commitCount = parseInt(unpushedCommits) || 0;
      if (commitCount > 0) {
        this.pushButton.setTooltip(`\u63A8\u9001 (${commitCount}\u6B21\u63D0\u4EA4)`);
        this.pushButton.setDisabled(false);
        const buttonEl = this.pushButton.buttonEl;
        const existingBadge = buttonEl.querySelector(".commit-count-badge");
        if (existingBadge) {
          existingBadge.textContent = commitCount.toString();
        } else {
          const badge = buttonEl.createDiv("commit-count-badge");
          badge.textContent = commitCount.toString();
        }
      } else {
        this.pushButton.setTooltip("\u63A8\u9001");
        this.pushButton.setDisabled(true);
        const buttonEl = this.pushButton.buttonEl;
        const existingBadge = buttonEl.querySelector(".commit-count-badge");
        if (existingBadge) {
          existingBadge.remove();
        }
      }
    } catch (error) {
      console.log("\u65E0\u6CD5\u83B7\u53D6\u672A\u63A8\u9001\u63D0\u4EA4\u6570\u91CF\uFF0C\u53EF\u80FD\u6CA1\u6709\u4E0A\u6E38\u5206\u652F");
      this.pushButton.setTooltip("\u63A8\u9001");
      this.pushButton.setDisabled(false);
      const buttonEl = this.pushButton.buttonEl;
      const existingBadge = buttonEl.querySelector(".commit-count-badge");
      if (existingBadge) {
        existingBadge.remove();
      }
    }
  }
  updateLoadingState() {
    if (this.refreshButton) {
      this.refreshButton.buttonEl.classList.toggle("loading", this.isLoading);
    }
  }
  async showEmptyState(message) {
    if (!this.changesContainer)
      return;
    this.changes = [];
    await this.updateButtonStates();
    this.changesContainer.empty();
    const emptyState = this.changesContainer.createDiv("git-empty-state");
    emptyState.textContent = message;
  }
  getDisplayPath(filePath) {
    let cleanPath = filePath.replace(/^"/, "").replace(/"$/, "");
    try {
      if (cleanPath.includes("\\")) {
        const buffer = Buffer.alloc(cleanPath.length);
        let bufferIndex = 0;
        for (let i = 0; i < cleanPath.length; i++) {
          if (cleanPath[i] === "\\" && i + 3 < cleanPath.length && /^\d{3}$/.test(cleanPath.substr(i + 1, 3))) {
            const octal = cleanPath.substr(i + 1, 3);
            const byteValue = parseInt(octal, 8);
            buffer[bufferIndex++] = byteValue;
            i += 3;
          } else {
            buffer[bufferIndex++] = cleanPath.charCodeAt(i);
          }
        }
        const actualBuffer = buffer.slice(0, bufferIndex);
        cleanPath = actualBuffer.toString("utf8");
      }
    } catch (e) {
      console.error("UTF-8\u89E3\u7801\u5931\u8D25:", e);
      cleanPath = cleanPath.replace(/\\(\d{3})/g, "");
    }
    const parts = cleanPath.split(/[/\\]/);
    let result = parts[parts.length - 1];
    result = result.replace(/^\*/, "").replace(/\*$/, "");
    result = result.trim();
    return result;
  }
  getDecodedPath(filePath) {
    let cleanPath = filePath.replace(/^"/, "").replace(/"$/, "");
    try {
      if (cleanPath.includes("\\")) {
        const buffer = Buffer.alloc(cleanPath.length);
        let bufferIndex = 0;
        for (let i = 0; i < cleanPath.length; i++) {
          if (cleanPath[i] === "\\" && i + 3 < cleanPath.length && /^\d{3}$/.test(cleanPath.substr(i + 1, 3))) {
            const octal = cleanPath.substr(i + 1, 3);
            const byteValue = parseInt(octal, 8);
            buffer[bufferIndex++] = byteValue;
            i += 3;
          } else {
            buffer[bufferIndex++] = cleanPath.charCodeAt(i);
          }
        }
        const actualBuffer = buffer.slice(0, bufferIndex);
        cleanPath = actualBuffer.toString("utf8");
      }
    } catch (e) {
      console.error("UTF-8\u89E3\u7801\u5931\u8D25:", e);
      cleanPath = cleanPath.replace(/\\(\d{3})/g, "");
    }
    cleanPath = cleanPath.replace(/^\*/, "").replace(/\*$/, "");
    cleanPath = cleanPath.trim();
    return cleanPath;
  }
  escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }
};

// main.ts
var execAsync = (0, import_util.promisify)(import_child_process.exec);
var TimedAutoCommitManager = class {
  constructor(plugin) {
    this.intervalTimer = null;
    this.editingDelayTimer = null;
    this.lastCommitTime = 0;
    this.lastEditTime = 0;
    this.isEditing = false;
    this.startTime = 0;
    this.plugin = plugin;
    this.startTime = Date.now();
    this.lastCommitTime = Date.now();
    this.plugin.debugLog("\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u7BA1\u7406\u5668\u5DF2\u521D\u59CB\u5316");
  }
  /**
   * 启动定时自动提交
   */
  start() {
    if (!this.plugin.settings.timedAutoCommit) {
      this.plugin.debugLog("\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u672A\u542F\u7528\uFF0C\u8DF3\u8FC7\u542F\u52A8");
      return;
    }
    this.stop();
    const intervalMs = this.plugin.settings.autoCommitInterval * 60 * 1e3;
    this.plugin.debugLog(`\u542F\u52A8\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\uFF0C\u95F4\u9694: ${this.plugin.settings.autoCommitInterval}\u5206\u949F`);
    this.intervalTimer = setInterval(() => {
      this.checkAndExecuteAutoCommit();
    }, intervalMs);
    setTimeout(() => {
      this.checkAndExecuteAutoCommit();
    }, 1e3);
  }
  /**
   * 停止定时自动提交
   */
  stop() {
    if (this.intervalTimer) {
      clearInterval(this.intervalTimer);
      this.intervalTimer = null;
      this.plugin.debugLog("\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u5DF2\u505C\u6B62");
    }
    if (this.editingDelayTimer) {
      clearTimeout(this.editingDelayTimer);
      this.editingDelayTimer = null;
      this.plugin.debugLog("\u7F16\u8F91\u5EF6\u8FDF\u5B9A\u65F6\u5668\u5DF2\u6E05\u9664");
    }
  }
  /**
   * 重启定时器（用于设置更改后）
   */
  restart() {
    this.plugin.debugLog("\u91CD\u542F\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4");
    this.start();
  }
  /**
   * 立刻触发一次自动提交检查（强制）
   * 忽略编辑延迟与时间间隔，常用于手动命令或设置页按钮
   */
  async triggerImmediateCheck() {
    this.plugin.debugLog("\u624B\u52A8\u89E6\u53D1\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u68C0\u67E5\uFF08force=true\uFF09");
    await this.checkAndExecuteAutoCommit(true);
  }
  /**
   * 通知文件编辑活动
   */
  notifyEditingActivity() {
    this.lastEditTime = Date.now();
    this.isEditing = true;
    if (this.editingDelayTimer) {
      clearTimeout(this.editingDelayTimer);
    }
    if (this.plugin.settings.enableEditingDelay) {
      const delayMs = this.plugin.settings.editingDelayMinutes * 60 * 1e3;
      this.editingDelayTimer = setTimeout(() => {
        this.isEditing = false;
        this.plugin.debugLog("\u7F16\u8F91\u6D3B\u52A8\u505C\u6B62\uFF0C\u6807\u8BB0\u4E3A\u975E\u7F16\u8F91\u72B6\u6001");
      }, delayMs);
    }
    this.plugin.debugLog("\u68C0\u6D4B\u5230\u6587\u4EF6\u7F16\u8F91\u6D3B\u52A8");
  }
  /**
   * 检查并执行自动提交
   * @param force 是否强制检查，true 时忽略编辑延迟与时间间隔
   */
  async checkAndExecuteAutoCommit(force = false) {
    var _a;
    try {
      this.plugin.debugLog(`=== \u68C0\u67E5\u81EA\u52A8\u63D0\u4EA4\u6761\u4EF6 === force=${force}`);
      if (!this.plugin.settings.timedAutoCommit) {
        this.plugin.debugLog("\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u5DF2\u7981\u7528\uFF0C\u8DF3\u8FC7");
        return;
      }
      if (!force && this.plugin.settings.enableEditingDelay && this.isEditing) {
        this.plugin.debugLog("\u5F53\u524D\u6B63\u5728\u7F16\u8F91\u6587\u4EF6\u4E14\u542F\u7528\u4E86\u7F16\u8F91\u5EF6\u8FDF\uFF0C\u8DF3\u8FC7\u81EA\u52A8\u63D0\u4EA4");
        return;
      } else if (force && this.plugin.settings.enableEditingDelay && this.isEditing) {
        this.plugin.debugLog("force=true\uFF0C\u5FFD\u7565\u7F16\u8F91\u5EF6\u8FDF\u4E0E\u6B63\u5728\u7F16\u8F91\u72B6\u6001\uFF0C\u7EE7\u7EED\u6267\u884C\u68C0\u67E5");
      }
      const now = Date.now();
      const timeSinceLastCommit = now - this.lastCommitTime;
      const timeSinceStart = now - this.startTime;
      const intervalMs = this.plugin.settings.autoCommitInterval * 60 * 1e3;
      const shouldCommitByInterval = Math.min(timeSinceLastCommit, timeSinceStart) >= intervalMs;
      this.plugin.debugLog(`\u65F6\u95F4\u68C0\u67E5: \u8DDD\u79BB\u4E0A\u6B21\u63D0\u4EA4${Math.round(timeSinceLastCommit / 1e3 / 60)}\u5206\u949F, \u8DDD\u79BB\u542F\u52A8${Math.round(timeSinceStart / 1e3 / 60)}\u5206\u949F, \u9700\u8981\u95F4\u9694${this.plugin.settings.autoCommitInterval}\u5206\u949F`);
      if (!force && !shouldCommitByInterval) {
        this.plugin.debugLog("\u672A\u8FBE\u5230\u63D0\u4EA4\u95F4\u9694\u65F6\u95F4\uFF0C\u8DF3\u8FC7");
        return;
      } else if (force && !shouldCommitByInterval) {
        this.plugin.debugLog("force=true\uFF0C\u672A\u8FBE\u5230\u95F4\u9694\u4F46\u5C06\u5FFD\u7565\u65F6\u95F4\u9650\u5236\uFF0C\u7EE7\u7EED\u6267\u884C\u68C0\u67E5");
      }
      const changes = await this.plugin.getGitChanges();
      if (changes.length === 0) {
        this.plugin.debugLog("\u6CA1\u6709\u6587\u4EF6\u53D8\u66F4\uFF0C\u8DF3\u8FC7\u81EA\u52A8\u63D0\u4EA4");
        return;
      }
      this.plugin.debugLog(`\u68C0\u6D4B\u5230 ${changes.length} \u4E2A\u6587\u4EF6\u53D8\u66F4\uFF0C\u5F00\u59CB\u6267\u884C\u81EA\u52A8\u63D0\u4EA4`);
      await this.executeAutoCommit(changes);
    } catch (error) {
      this.plugin.debugError("\u81EA\u52A8\u63D0\u4EA4\u68C0\u67E5\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF:", error);
      if (this.plugin.settings.showNotifications) {
        new import_obsidian4.Notice(`\u26A0\uFE0F \u81EA\u52A8\u63D0\u4EA4\u68C0\u67E5\u5931\u8D25: ${(_a = error == null ? void 0 : error.message) != null ? _a : error}`);
      }
    }
  }
  /**
   * 执行自动提交的核心逻辑
   */
  async executeAutoCommit(changes) {
    try {
      this.plugin.debugLog("=== \u5F00\u59CB\u6267\u884C\u81EA\u52A8\u63D0\u4EA4 ===");
      const unstagedFiles = changes.filter((change) => !change.isStaged).map((change) => change.filePath);
      if (unstagedFiles.length > 0) {
        this.plugin.debugLog(`\u6682\u5B58 ${unstagedFiles.length} \u4E2A\u672A\u6682\u5B58\u6587\u4EF6`);
        await this.plugin.stageFiles(unstagedFiles);
      }
      const allFiles = changes.map((change) => change.filePath);
      this.plugin.debugLog("\u4F7F\u7528AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F");
      const commitMessage = await this.plugin.generateCommitMessageWithAI(allFiles);
      this.plugin.debugLog(`\u6267\u884C\u63D0\u4EA4\uFF0C\u6587\u4EF6\u6570: ${allFiles.length}`);
      await this.plugin.performActualCommit(allFiles, commitMessage);
      if (this.plugin.settings.pushToRemote) {
        this.plugin.debugLog("\u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93");
        await this.plugin.pushToRemoteRepository();
      }
      this.lastCommitTime = Date.now();
      this.plugin.debugLog("=== \u81EA\u52A8\u63D0\u4EA4\u5B8C\u6210 ===");
      if (this.plugin.settings.showNotifications) {
        new import_obsidian4.Notice(`\u2705 \u81EA\u52A8\u63D0\u4EA4\u5B8C\u6210: ${allFiles.length} \u4E2A\u6587\u4EF6`);
      }
    } catch (error) {
      this.plugin.debugError("\u81EA\u52A8\u63D0\u4EA4\u6267\u884C\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF:", error);
      if (this.plugin.settings.showNotifications) {
        new import_obsidian4.Notice(`\u274C \u81EA\u52A8\u63D0\u4EA4\u5931\u8D25: ${error.message}`);
      }
      throw error;
    }
  }
  /**
   * 获取当前状态信息
   */
  getStatus() {
    if (!this.plugin.settings.timedAutoCommit) {
      return "\u274C \u672A\u542F\u7528";
    }
    const now = Date.now();
    const timeSinceLastCommit = Math.round((now - this.lastCommitTime) / 1e3 / 60);
    const timeSinceStart = Math.round((now - this.startTime) / 1e3 / 60);
    const intervalMinutes = this.plugin.settings.autoCommitInterval;
    const nextCommitIn = intervalMinutes - Math.min(timeSinceLastCommit, timeSinceStart);
    let status = `\u2705 \u8FD0\u884C\u4E2D | \u95F4\u9694: ${intervalMinutes}\u5206\u949F`;
    if (nextCommitIn > 0) {
      status += ` | \u4E0B\u6B21\u68C0\u67E5: ${nextCommitIn}\u5206\u949F\u540E`;
    } else {
      status += ` | \u4E0B\u6B21\u68C0\u67E5: \u5373\u5C06\u6267\u884C`;
    }
    if (this.plugin.settings.enableEditingDelay) {
      status += ` | \u7F16\u8F91\u5EF6\u8FDF: ${this.isEditing ? "\u7F16\u8F91\u4E2D" : "\u7A7A\u95F2"}`;
    }
    return status;
  }
  /**
   * 更新最后提交时间（外部调用）
   */
  updateLastCommitTime() {
    this.lastCommitTime = Date.now();
    this.plugin.debugLog("\u66F4\u65B0\u6700\u540E\u63D0\u4EA4\u65F6\u95F4");
  }
};
var GitAutoCommitPlugin = class extends import_obsidian4.Plugin {
  // 定时自动提交管理器
  // 统一的调试日志方法
  debugLog(...args) {
    var _a;
    if ((_a = this.settings) == null ? void 0 : _a.debugMode) {
      console.log("Git Auto Commit -", ...args);
    }
  }
  debugError(...args) {
    var _a;
    if ((_a = this.settings) == null ? void 0 : _a.debugMode) {
      console.error("Git Auto Commit -", ...args);
    }
  }
  debugWarn(...args) {
    var _a;
    if ((_a = this.settings) == null ? void 0 : _a.debugMode) {
      console.warn("Git Auto Commit -", ...args);
    }
  }
  async onload() {
    this.dataManager = new DataManager(this.app, this.manifest.dir || "");
    await this.dataManager.initialize();
    this.modelManager = new NewModelConfigManager(this.dataManager);
    await this.loadSettings();
    await DataMigrationChecker.checkAndShowMigrationIfNeeded(this.app, this.dataManager);
    this.registerView(
      GIT_COMMIT_VIEW_TYPE,
      (leaf) => new GitCommitView(leaf, this)
    );
    this.addRibbonIcon("upload", "Git\u81EA\u52A8\u63D0\u4EA4", async (evt) => {
      await this.activateGitCommitView();
    });
    this.addCommand({
      id: "git-auto-commit",
      name: "\u6267\u884CGit\u63D0\u4EA4",
      callback: async () => {
        await this.activateGitCommitView();
      }
    });
    this.addCommand({
      id: "git-commit-current-file",
      name: "\u63D0\u4EA4\u5F53\u524D\u6587\u4EF6",
      callback: () => {
        this.performGitCommit("current");
      }
    });
    this.addCommand({
      id: "git-commit-all-files",
      name: "\u63D0\u4EA4\u6240\u6709\u6587\u4EF6",
      callback: () => {
        this.performGitCommit("all");
      }
    });
    this.addCommand({
      id: "debug-ai-config",
      name: "\u8C03\u8BD5AI\u914D\u7F6E",
      callback: () => {
        this.debugAIConfig();
      }
    });
    this.addCommand({
      id: "debug-data-status",
      name: "\u8C03\u8BD5\u6570\u636E\u72B6\u6001",
      callback: () => {
        this.debugDataStatus();
      }
    });
    this.addCommand({
      id: "reset-plugin-data",
      name: "\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E",
      callback: async () => {
        await this.resetPluginData();
      }
    });
    this.addCommand({
      id: "test-batch-processing",
      name: "\u6D4B\u8BD5\u5206\u6279\u5904\u7406\u529F\u80FD",
      callback: () => {
        this.testBatchProcessing();
      }
    });
    this.addCommand({
      id: "timed-auto-commit-show-status",
      name: "\u663E\u793A\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u72B6\u6001",
      callback: () => {
        const status = this.getTimedCommitStatus();
        this.debugLog("\u663E\u793A\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u72B6\u6001\uFF1A", status);
        new import_obsidian4.Notice(`\u{1F552} ${status}`);
      }
    });
    this.addCommand({
      id: "timed-auto-commit-start",
      name: "\u542F\u52A8\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4",
      callback: () => {
        this.startTimedAutoCommit();
        new import_obsidian4.Notice("\u25B6\uFE0F \u5DF2\u542F\u52A8\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4");
      }
    });
    this.addCommand({
      id: "timed-auto-commit-stop",
      name: "\u505C\u6B62\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4",
      callback: () => {
        this.stopTimedAutoCommit();
        new import_obsidian4.Notice("\u23F9\uFE0F \u5DF2\u505C\u6B62\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4");
      }
    });
    this.addCommand({
      id: "timed-auto-commit-restart",
      name: "\u91CD\u542F\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4",
      callback: () => {
        this.restartTimedAutoCommit();
        new import_obsidian4.Notice("\u{1F501} \u5DF2\u91CD\u542F\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4");
      }
    });
    this.addCommand({
      id: "timed-auto-commit-check-now",
      name: "\u7ACB\u5373\u68C0\u67E5\u4E00\u6B21\uFF08\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\uFF09",
      callback: async () => {
        await this.triggerTimedAutoCommitCheck();
        new import_obsidian4.Notice("\u26A1 \u5DF2\u89E6\u53D1\u4E00\u6B21\u68C0\u67E5\uFF0C\u8BF7\u67E5\u770B\u63A7\u5236\u53F0\u6216\u72B6\u6001");
      }
    });
    this.addSettingTab(new GitAutoCommitSettingTab(this.app, this));
    this.timedAutoCommitManager = new TimedAutoCommitManager(this);
    this.timedAutoCommitManager.start();
    this.registerFileEditingListeners();
    this.debugLog("\u63D2\u4EF6\u5DF2\u52A0\u8F7D");
  }
  async activateGitCommitView() {
    var _a;
    const leaves = this.app.workspace.getLeavesOfType(GIT_COMMIT_VIEW_TYPE);
    let leaf;
    if (leaves.length === 0) {
      leaf = (_a = this.app.workspace.getLeftLeaf(false)) != null ? _a : this.app.workspace.getLeaf();
      await leaf.setViewState({
        type: GIT_COMMIT_VIEW_TYPE,
        active: true
      });
    } else {
      leaf = leaves[0];
    }
    this.app.workspace.revealLeaf(leaf);
  }
  onunload() {
    if (this.timedAutoCommitManager) {
      this.timedAutoCommitManager.stop();
    }
    this.debugLog("\u63D2\u4EF6\u5DF2\u5378\u8F7D");
  }
  /**
   * 注册文件编辑监听器
   * 监听文件修改、创建、删除等操作，通知定时器管理器
   */
  registerFileEditingListeners() {
    this.debugLog("\u6CE8\u518C\u6587\u4EF6\u7F16\u8F91\u76D1\u542C\u5668");
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (this.timedAutoCommitManager && this.settings.timedAutoCommit) {
          this.debugLog(`\u6587\u4EF6\u4FEE\u6539: ${file.path}`);
          this.timedAutoCommitManager.notifyEditingActivity();
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (this.timedAutoCommitManager && this.settings.timedAutoCommit) {
          this.debugLog(`\u6587\u4EF6\u521B\u5EFA: ${file.path}`);
          this.timedAutoCommitManager.notifyEditingActivity();
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("delete", (file) => {
        if (this.timedAutoCommitManager && this.settings.timedAutoCommit) {
          this.debugLog(`\u6587\u4EF6\u5220\u9664: ${file.path}`);
          this.timedAutoCommitManager.notifyEditingActivity();
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (this.timedAutoCommitManager && this.settings.timedAutoCommit) {
          this.debugLog(`\u6587\u4EF6\u91CD\u547D\u540D: ${oldPath} -> ${file.path}`);
          this.timedAutoCommitManager.notifyEditingActivity();
        }
      })
    );
  }
  async loadSettings() {
    this.settings = this.dataManager.getSettings();
  }
  async saveSettings() {
    await this.dataManager.updateSettings(this.settings);
    if (this.timedAutoCommitManager) {
      this.timedAutoCommitManager.restart();
    }
    this.debugLog("\u8BBE\u7F6E\u5DF2\u4FDD\u5B58\uFF0C\u5B9A\u65F6\u5668\u5DF2\u91CD\u542F");
  }
  async performGitCommit(scope) {
    try {
      if (!await this.validateRepository()) {
        return;
      }
      let commitScope = scope || this.settings.defaultCommitScope;
      let filesToCommit = [];
      if (commitScope === "current") {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
          new import_obsidian4.Notice("\u274C \u6CA1\u6709\u6253\u5F00\u7684\u6587\u4EF6");
          return;
        }
        filesToCommit = [activeFile.path];
        commitScope = "single";
      } else if (commitScope === "single" && !this.settings.autoCommit) {
        const modifiedFiles = await this.getModifiedFiles();
        if (modifiedFiles.length === 0) {
          new import_obsidian4.Notice("\u6CA1\u6709\u4FEE\u6539\u7684\u6587\u4EF6\u9700\u8981\u63D0\u4EA4");
          return;
        }
        const selectedFile = await this.showFileSelectionModal(modifiedFiles);
        if (!selectedFile)
          return;
        filesToCommit = [selectedFile];
      }
      let messageType = this.settings.defaultMessageType;
      let commitMessage = "";
      if (messageType === "ai") {
        const defaultModel = this.modelManager.getDefaultModel();
        if (!defaultModel) {
          new import_obsidian4.Notice("\u274C \u672A\u914D\u7F6E\u9ED8\u8BA4AI\u6A21\u578B\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E");
          return;
        }
        if (!defaultModel.isVerified) {
          new import_obsidian4.Notice("\u274C \u9ED8\u8BA4AI\u6A21\u578B\u672A\u9A8C\u8BC1\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u9A8C\u8BC1\u6A21\u578B\u914D\u7F6E");
          return;
        }
        if (this.settings.showNotifications) {
          new import_obsidian4.Notice("\u6B63\u5728\u4F7F\u7528AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F...");
        }
        commitMessage = await this.generateCommitMessageWithAI(filesToCommit);
        if (!this.settings.autoCommit) {
          const userMessage = await this.showCommitMessageModal(commitMessage);
          if (!userMessage)
            return;
          commitMessage = userMessage;
        }
      } else {
        if (this.settings.autoCommit) {
          commitMessage = `\u66F4\u65B0\u7B14\u8BB0 - ${new Date().toLocaleString("zh-CN")}`;
        } else {
          const userMessage = await this.showCommitMessageModal();
          if (!userMessage)
            return;
          commitMessage = userMessage;
        }
      }
      await this.executeGitOperationsWithBatching(filesToCommit, commitMessage);
      if (this.settings.showNotifications) {
        new import_obsidian4.Notice("\u2705 Git\u63D0\u4EA4\u5B8C\u6210\uFF01");
      }
    } catch (error) {
      this.debugError("Git\u63D0\u4EA4\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u274C Git\u63D0\u4EA4\u5931\u8D25: ${error.message}`);
    }
  }
  // 新的Git状态检测方法 - 基于obsidian-git-master的实现
  async getGitStatus() {
    var _a, _b;
    const vaultPath = this.app.vault.adapter.basePath || ((_b = (_a = this.app.vault.adapter.path) == null ? void 0 : _a.remote) == null ? void 0 : _b.path) || this.app.vault.adapter.path || "";
    try {
      const { stdout } = await execAsync("git status --porcelain --ignored=no", {
        cwd: vaultPath,
        maxBuffer: 10 * 1024 * 1024
      });
      const lines = stdout.split("\n").filter((line) => line.trim());
      const allFiles = [];
      for (const line of lines) {
        if (line.length < 3)
          continue;
        const indexStatus = line[0];
        const workingStatus = line[1];
        let filePath = line.substring(3);
        if (filePath.startsWith('"') && filePath.endsWith('"')) {
          filePath = filePath.slice(1, -1);
          try {
            const bytes = [];
            let i = 0;
            while (i < filePath.length) {
              if (filePath[i] === "\\" && i + 3 < filePath.length) {
                const octal = filePath.substring(i + 1, i + 4);
                if (/^\d{3}$/.test(octal)) {
                  bytes.push(parseInt(octal, 8));
                  i += 4;
                } else {
                  bytes.push(filePath.charCodeAt(i));
                  i++;
                }
              } else {
                bytes.push(filePath.charCodeAt(i));
                i++;
              }
            }
            const uint8Array = new Uint8Array(bytes);
            filePath = new TextDecoder("utf-8").decode(uint8Array);
          } catch (e) {
            this.debugWarn(`Unicode\u89E3\u6790\u5931\u8D25\uFF0C\u4F7F\u7528\u539F\u59CB\u8DEF\u5F84: ${filePath}`);
          }
        }
        if (filePath.endsWith("/") && (indexStatus === "?" || workingStatus === "?")) {
          try {
            const { stdout: folderFiles } = await execAsync(`git ls-files --others --exclude-standard "${filePath}"`, {
              cwd: vaultPath,
              maxBuffer: 10 * 1024 * 1024
            });
            const files = folderFiles.split("\n").filter((f) => f.trim());
            for (const file of files) {
              if (!file.trim())
                continue;
              const isExcluded2 = this.settings.excludePatterns.some(
                (pattern) => file.includes(pattern)
              );
              if (isExcluded2) {
                continue;
              }
              const fileResult2 = {
                path: file,
                vaultPath: file,
                index: " ",
                workingDir: "?"
                // 未跟踪文件
              };
              allFiles.push(fileResult2);
            }
          } catch (error) {
            this.debugWarn(`\u83B7\u53D6\u6587\u4EF6\u5939\u5185\u5BB9\u5931\u8D25: ${error}`);
            const isExcluded2 = this.settings.excludePatterns.some(
              (pattern) => filePath.includes(pattern)
            );
            if (!isExcluded2) {
              const fileResult2 = {
                path: filePath,
                vaultPath: filePath,
                index: indexStatus === "?" ? " " : indexStatus,
                workingDir: workingStatus === "?" ? "?" : workingStatus
              };
              allFiles.push(fileResult2);
            }
          }
          continue;
        }
        const isExcluded = this.settings.excludePatterns.some(
          (pattern) => filePath.includes(pattern)
        );
        if (isExcluded) {
          continue;
        }
        const fileResult = {
          path: filePath,
          vaultPath: filePath,
          // 在Obsidian中，路径相对于vault
          index: indexStatus === "?" ? " " : indexStatus,
          workingDir: workingStatus === "?" ? "?" : workingStatus
        };
        allFiles.push(fileResult);
      }
      const changed = allFiles.filter((f) => f.workingDir !== " ");
      const staged = allFiles.filter((f) => f.index !== " " && f.index !== "U");
      const status = {
        all: allFiles,
        changed,
        staged,
        conflicted: []
        // 暂时不处理冲突文件
      };
      return status;
    } catch (error) {
      this.debugError("\u83B7\u53D6Git\u72B6\u6001\u5931\u8D25:", error);
      return {
        all: [],
        changed: [],
        staged: [],
        conflicted: []
      };
    }
  }
  async getGitChanges() {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      this.debugLog("getGitChanges \u5DE5\u4F5C\u76EE\u5F55:", vaultPath);
      const { stdout } = await execAsync("git status --porcelain", {
        cwd: vaultPath,
        maxBuffer: 10 * 1024 * 1024
        // 10MB 缓冲区
      });
      this.debugLog("git status \u8F93\u51FA:", stdout);
      if (!stdout.trim()) {
        console.log("Git Auto Commit - \u6CA1\u6709\u68C0\u6D4B\u5230\u6587\u4EF6\u53D8\u66F4");
        return [];
      }
      const changes = [];
      const lines = stdout.split("\n").filter((line) => line.trim());
      this.debugLog("\u539F\u59CB\u53D8\u66F4\u884C\u6570:", lines.length);
      for (const line of lines) {
        if (line.length < 4)
          continue;
        const indexStatus = line[0];
        const workingStatus = line[1];
        let filePath = line.substring(3);
        if (filePath.startsWith('"') && filePath.endsWith('"')) {
          filePath = filePath.slice(1, -1);
          try {
            const bytes = [];
            let i = 0;
            while (i < filePath.length) {
              if (filePath[i] === "\\" && i + 3 < filePath.length) {
                const octal = filePath.substring(i + 1, i + 4);
                if (/^\d{3}$/.test(octal)) {
                  bytes.push(parseInt(octal, 8));
                  i += 4;
                } else {
                  bytes.push(filePath.charCodeAt(i));
                  i++;
                }
              } else {
                bytes.push(filePath.charCodeAt(i));
                i++;
              }
            }
            const uint8Array = new Uint8Array(bytes);
            filePath = new TextDecoder("utf-8").decode(uint8Array);
          } catch (e) {
            this.debugWarn(`Unicode\u89E3\u6790\u5931\u8D25\uFF0C\u4F7F\u7528\u539F\u59CB\u8DEF\u5F84: ${filePath}`);
          }
        }
        this.debugLog(`\u5904\u7406\u6587\u4EF6: ${filePath}, \u7D22\u5F15\u72B6\u6001: "${indexStatus}", \u5DE5\u4F5C\u72B6\u6001: "${workingStatus}"`);
        const isExcluded = this.settings.excludePatterns.some(
          (pattern) => filePath.includes(pattern)
        );
        this.debugLog(`\u6587\u4EF6 ${filePath} \u6392\u9664\u68C0\u67E5: ${isExcluded}, \u6392\u9664\u6A21\u5F0F: ${this.settings.excludePatterns.join(", ")}`);
        if (isExcluded) {
          this.debugLog(`\u8DF3\u8FC7\u6587\u4EF6 ${filePath}: \u5339\u914D\u6392\u9664\u6A21\u5F0F`);
          continue;
        }
        const fileChanges = [];
        this.debugLog(`\u5206\u6790\u6587\u4EF6\u72B6\u6001 ${filePath}: \u7D22\u5F15="${indexStatus}", \u5DE5\u4F5C\u533A="${workingStatus}"`);
        if (indexStatus !== " " && indexStatus !== "?") {
          fileChanges.push({
            status: indexStatus,
            isStaged: true
          });
          this.debugLog(`\u6DFB\u52A0\u6682\u5B58\u72B6\u6001: ${indexStatus}`);
        }
        if (workingStatus !== " " && workingStatus !== "?") {
          fileChanges.push({
            status: workingStatus === "?" ? "??" : workingStatus,
            isStaged: false
          });
          this.debugLog(`\u6DFB\u52A0\u672A\u6682\u5B58\u72B6\u6001: ${workingStatus}`);
        }
        if (fileChanges.length === 0) {
          this.debugLog(`\u8DF3\u8FC7\u6587\u4EF6 ${filePath}: \u6CA1\u6709\u6709\u6548\u7684\u72B6\u6001\u53D8\u66F4`);
          continue;
        }
        this.debugLog(`\u6587\u4EF6 ${filePath} \u5C06\u521B\u5EFA ${fileChanges.length} \u4E2A\u6761\u76EE`);
        for (const change of fileChanges) {
          this.debugLog(`\u6587\u4EF6 ${filePath} \u6700\u7EC8\u72B6\u6001: ${change.status}, \u662F\u5426\u6682\u5B58: ${change.isStaged}`);
          const statusText = this.getStatusText(change.status);
          let diff = "";
          try {
            if (change.status === "M" || change.status === "MM") {
              const diffCommand = change.isStaged ? `git diff --cached -- "${filePath}"` : `git diff HEAD -- "${filePath}"`;
              const { stdout: diffOutput } = await execAsync(
                diffCommand,
                {
                  cwd: vaultPath,
                  maxBuffer: 2 * 1024 * 1024
                  // 2MB 缓冲区用于diff
                }
              );
              diff = diffOutput.trim();
            }
          } catch (error) {
            this.debugWarn(`\u83B7\u53D6\u6587\u4EF6 ${filePath} \u7684diff\u5931\u8D25:`, error);
          }
          changes.push({
            filePath,
            status: change.status,
            statusText,
            diff,
            isStaged: change.isStaged
          });
          this.debugLog(`\u5DF2\u6DFB\u52A0\u6587\u4EF6\u5230\u53D8\u66F4\u5217\u8868: ${filePath}`);
        }
      }
      this.debugLog(`\u6700\u7EC8\u53D8\u66F4\u5217\u8868\u957F\u5EA6: ${changes.length}`);
      return changes;
    } catch (error) {
      this.debugError("\u83B7\u53D6Git\u53D8\u66F4\u5931\u8D25:", error);
      throw error;
    }
  }
  getStatusText(status) {
    switch (status) {
      case "M":
        return "\u4FEE\u6539";
      case "A":
        return "\u65B0\u589E";
      case "D":
        return "\u5220\u9664";
      case "R":
        return "\u91CD\u547D\u540D";
      case "??":
        return "\u672A\u8DDF\u8E2A";
      case "MM":
        return "\u6DF7\u5408\u53D8\u66F4";
      default:
        return status;
    }
  }
  /**
   * 执行实际的 Git 提交
   * - 负责在必要时暂存变更（避免重复暂存）
   * - 处理多行提交信息文件化提交
   * - 成功后通知并更新定时自动提交的最后提交时间
   * 注意：为了兼容包含中文/特殊字符路径的文件，尽量避免不必要的 git add 重复执行。
   */
  async performActualCommit(filesToCommit, commitMessage) {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      const { stdout: stagedListRaw } = await execAsync("git diff --cached --name-only", {
        cwd: vaultPath,
        maxBuffer: 10 * 1024 * 1024
      });
      const stagedSet = new Set(
        stagedListRaw.split("\n").map((s) => s.trim().replace(/\\/g, "/")).filter(Boolean)
      );
      this.debugLog("\u5DF2\u6682\u5B58\u6587\u4EF6\u6570\u91CF:", stagedSet.size);
      if (filesToCommit.length === 0) {
        this.debugLog("\u672A\u6307\u5B9A\u6587\u4EF6\uFF0C\u4F7F\u7528 git add . \u6682\u5B58\u6240\u6709\u53D8\u66F4");
        await execAsync("git add .", {
          cwd: vaultPath,
          maxBuffer: 50 * 1024 * 1024
          // 50MB 缓冲区
        });
      } else {
        const normalized = filesToCommit.map((file) => {
          let cleanPath = file;
          if (cleanPath.startsWith('"') && cleanPath.endsWith('"')) {
            cleanPath = cleanPath.slice(1, -1);
          }
          cleanPath = cleanPath.replace(/\\[0-9]{3}/g, "");
          cleanPath = cleanPath.replace(/\\/g, "/");
          return cleanPath;
        });
        const toAdd = normalized.filter((p) => !stagedSet.has(p));
        this.debugLog("\u6307\u5B9A\u6587\u4EF6\u603B\u6570:", normalized.length, "\u9700\u8981\u65B0\u589E\u6682\u5B58\u7684\u6587\u4EF6\u6570:", toAdd.length);
        if (toAdd.length === 0) {
          this.debugLog("\u6240\u6709\u6307\u5B9A\u6587\u4EF6\u5747\u5DF2\u5728\u6682\u5B58\u533A\uFF0C\u8DF3\u8FC7 git add \u6B65\u9AA4");
        } else {
          for (const cleanPath of toAdd) {
            try {
              const escapedPath = cleanPath.replace(/"/g, '\\"');
              await execAsync(`git add "${escapedPath}"`, {
                cwd: vaultPath,
                maxBuffer: 10 * 1024 * 1024,
                // 10MB 缓冲区
                encoding: "utf8"
              });
            } catch (fileError) {
              this.debugError("\u6DFB\u52A0\u5355\u4E2A\u6587\u4EF6\u5931\u8D25:", cleanPath, fileError);
              await execAsync("git add .", {
                cwd: vaultPath,
                maxBuffer: 50 * 1024 * 1024
              });
              break;
            }
          }
        }
      }
      if (commitMessage.includes("\n")) {
        const fs = require("fs");
        const path = require("path");
        const tempFile = path.join(vaultPath, ".git", "COMMIT_EDITMSG_TEMP");
        try {
          fs.writeFileSync(tempFile, commitMessage, "utf8");
          await execAsync(`git commit -F "${tempFile}"`, {
            cwd: vaultPath,
            maxBuffer: 5 * 1024 * 1024
            // 5MB 缓冲区
          });
          try {
            fs.unlinkSync(tempFile);
          } catch (cleanupError) {
            this.debugWarn("\u6E05\u7406\u4E34\u65F6\u6587\u4EF6\u5931\u8D25:", cleanupError);
          }
        } catch (fileError) {
          this.debugError("\u4F7F\u7528\u4E34\u65F6\u6587\u4EF6\u63D0\u4EA4\u5931\u8D25\uFF0C\u56DE\u9000\u5230\u5355\u884C\u6A21\u5F0F:", fileError);
          const singleLine = commitMessage.split("\n")[0];
          await execAsync(`git commit -m "${singleLine.replace(/"/g, '\\"')}"`, {
            cwd: vaultPath,
            maxBuffer: 5 * 1024 * 1024
            // 5MB 缓冲区
          });
        }
      } else {
        await execAsync(`git commit -m "${commitMessage.replace(/"/g, '\\"')}"`, {
          cwd: vaultPath,
          maxBuffer: 5 * 1024 * 1024
          // 5MB 缓冲区
        });
      }
      if (this.settings.showNotifications) {
        new import_obsidian4.Notice("\u2705 \u63D0\u4EA4\u6210\u529F\uFF01");
      }
      if (this.timedAutoCommitManager) {
        this.timedAutoCommitManager.updateLastCommitTime();
        this.debugLog("\u5DF2\u66F4\u65B0\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u7684\u6700\u540E\u63D0\u4EA4\u65F6\u95F4");
      }
    } catch (error) {
      this.debugError("Git\u63D0\u4EA4\u5931\u8D25:", error);
      throw error;
    }
  }
  async stageFiles(filePaths) {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      this.debugLog("\u5F00\u59CB\u6682\u5B58\u6587\u4EF6\uFF0C\u5DE5\u4F5C\u76EE\u5F55:", vaultPath);
      this.debugLog("\u8981\u6682\u5B58\u7684\u6587\u4EF6\u5217\u8868:", filePaths);
      const hasUnicodeEscapes = filePaths.some(
        (file) => file.includes("\\3") || file.includes("\\2") || file.includes("\\1")
      );
      if (hasUnicodeEscapes) {
        this.debugLog("\u68C0\u6D4B\u5230Unicode\u8F6C\u4E49\u8DEF\u5F84\uFF0C\u4F7F\u7528git add .\u8FDB\u884C\u6682\u5B58");
        await execAsync("git add .", {
          cwd: vaultPath,
          maxBuffer: 50 * 1024 * 1024,
          encoding: "utf8"
        });
        this.debugLog("\u4F7F\u7528git add .\u6210\u529F\u6682\u5B58\u6240\u6709\u6587\u4EF6");
        return;
      }
      let successCount = 0;
      for (const file of filePaths) {
        try {
          let cleanPath = file;
          if (cleanPath.startsWith('"') && cleanPath.endsWith('"')) {
            cleanPath = cleanPath.slice(1, -1);
          }
          cleanPath = cleanPath.replace(/\\\\/g, "/");
          this.debugLog("\u5904\u7406\u6587\u4EF6\u8DEF\u5F84:", file, "\u2192", cleanPath);
          const escapedPath = cleanPath.replace(/"/g, '\\"');
          await execAsync(`git add "${escapedPath}"`, {
            cwd: vaultPath,
            maxBuffer: 10 * 1024 * 1024,
            encoding: "utf8"
          });
          this.debugLog("\u6210\u529F\u6682\u5B58\u6587\u4EF6:", cleanPath);
          successCount++;
        } catch (fileError) {
          this.debugError("\u6682\u5B58\u5355\u4E2A\u6587\u4EF6\u5931\u8D25:", file, fileError);
          this.debugLog("\u56DE\u9000\u5230git add .\u8FDB\u884C\u5168\u90E8\u6682\u5B58");
          await execAsync("git add .", {
            cwd: vaultPath,
            maxBuffer: 50 * 1024 * 1024
          });
          this.debugLog("\u4F7F\u7528git add .\u4F5C\u4E3A\u5907\u7528\u65B9\u6848\u6210\u529F");
          return;
        }
      }
      this.debugLog(`\u6682\u5B58\u64CD\u4F5C\u5B8C\u6210\uFF0C\u6210\u529F\u5904\u7406\u4E86 ${successCount}/${filePaths.length} \u4E2A\u6587\u4EF6`);
    } catch (error) {
      console.error("Git\u6682\u5B58\u5931\u8D25:", error);
      throw error;
    }
  }
  async pushToRemoteRepository() {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      await execAsync(`git push origin ${this.settings.remoteBranch}`, {
        cwd: vaultPath,
        maxBuffer: 10 * 1024 * 1024
        // 10MB 缓冲区
      });
      if (this.settings.showNotifications) {
        new import_obsidian4.Notice("\u2705 \u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93\u6210\u529F\uFF01");
      }
    } catch (error) {
      console.error("\u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93\u5931\u8D25:", error);
      throw error;
    }
  }
  async validateRepository() {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      await execAsync("git rev-parse --git-dir", {
        cwd: vaultPath,
        maxBuffer: 1024 * 1024
        // 1MB 缓冲区（足够小命令使用）
      });
      return true;
    } catch (error) {
      new import_obsidian4.Notice("\u274C \u5F53\u524D\u76EE\u5F55\u4E0D\u662FGit\u4ED3\u5E93\uFF0C\u8BF7\u5148\u521D\u59CB\u5316Git\u4ED3\u5E93");
      return false;
    }
  }
  async getModifiedFiles() {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      const { stdout } = await execAsync("git status --porcelain", {
        cwd: vaultPath,
        maxBuffer: 10 * 1024 * 1024
        // 10MB 缓冲区
      });
      if (!stdout.trim()) {
        return [];
      }
      return stdout.split("\n").filter((line) => line.trim()).map((line) => line.substring(3)).filter((file) => {
        const isExcluded = this.settings.excludePatterns.some(
          (pattern) => file.includes(pattern)
        );
        return !isExcluded;
      });
    } catch (error) {
      console.error("\u83B7\u53D6\u4FEE\u6539\u6587\u4EF6\u5217\u8868\u5931\u8D25:", error);
      return [];
    }
  }
  /**
   * 基于最近的变更生成 AI 提交信息
   * - 不进行暂存操作，仅从“已暂存 diff”或“工作区 diff”构建上下文
   * - 优先使用已暂存内容，若无则回退到工作区内容
   * - 发生异常时回退为基于文件变更的基础提交信息或默认文案
   */
  async generateCommitMessageWithAI(filesToCommit) {
    try {
      this.debugLog("generateCommitMessageWithAI \u5F00\u59CB\u6267\u884C");
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      this.debugLog("\u5DE5\u4F5C\u76EE\u5F55:", vaultPath);
      let gitDiff = "";
      let gitDiffContent = "";
      try {
        const { stdout: cachedStatus } = await execAsync("git diff --cached --name-status", {
          cwd: vaultPath,
          maxBuffer: 50 * 1024 * 1024
        });
        const { stdout: cachedContent } = await execAsync("git diff --cached", {
          cwd: vaultPath,
          maxBuffer: 50 * 1024 * 1024
        });
        this.debugLog("Cached diff \u72B6\u6001\u884C\u6570:", cachedStatus ? cachedStatus.split("\n").filter((l) => l.trim()).length : 0, "\u5185\u5BB9\u957F\u5EA6:", cachedContent.length);
        if (cachedStatus.trim()) {
          gitDiff = cachedStatus;
          gitDiffContent = cachedContent;
        } else {
          this.debugLog("\u672A\u68C0\u6D4B\u5230\u5DF2\u6682\u5B58\u53D8\u66F4\uFF0C\u4F7F\u7528\u5DE5\u4F5C\u533A diff");
          const { stdout: workStatus } = await execAsync("git diff --name-status", {
            cwd: vaultPath,
            maxBuffer: 50 * 1024 * 1024
          });
          const { stdout: workContent } = await execAsync("git diff", {
            cwd: vaultPath,
            maxBuffer: 50 * 1024 * 1024
          });
          gitDiff = workStatus;
          gitDiffContent = workContent;
        }
      } catch (diffError) {
        this.debugError("\u83B7\u53D6diff\u4FE1\u606F\u5931\u8D25:", diffError);
        gitDiff = "";
        gitDiffContent = "";
      }
      this.debugLog("Git diff \u72B6\u6001:", gitDiff);
      this.debugLog("Git diff \u5185\u5BB9\u957F\u5EA6:", gitDiffContent.length);
      if (gitDiffContent.length > 10 * 1024 * 1024) {
        this.debugWarn("\u68C0\u6D4B\u5230\u5927\u91CF\u6587\u4EF6\u53D8\u66F4\uFF0Cdiff \u5185\u5BB9\u8D85\u8FC7 10MB\uFF0C\u53EF\u80FD\u5F71\u54CD AI \u5904\u7406\u6027\u80FD");
        new import_obsidian4.Notice("\u26A0\uFE0F \u68C0\u6D4B\u5230\u5927\u91CF\u6587\u4EF6\u53D8\u66F4\uFF0CAI \u5206\u6790\u53EF\u80FD\u9700\u8981\u8F83\u957F\u65F6\u95F4", 3e3);
      } else if (gitDiffContent.length > 5 * 1024 * 1024) {
        this.debugWarn("\u68C0\u6D4B\u5230\u8F83\u591A\u6587\u4EF6\u53D8\u66F4\uFF0Cdiff \u5185\u5BB9\u8D85\u8FC7 5MB");
        new import_obsidian4.Notice("\u{1F4DD} \u68C0\u6D4B\u5230\u8F83\u591A\u6587\u4EF6\u53D8\u66F4\uFF0C\u6B63\u5728\u5206\u6790...", 2e3);
      }
      if (!gitDiff.trim()) {
        this.debugLog("\u6CA1\u6709\u68C0\u6D4B\u5230\u6587\u4EF6\u53D8\u66F4\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u63D0\u4EA4\u4FE1\u606F");
        return "\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9";
      }
      const fileChanges = this.parseFileChanges(gitDiff);
      const fileCount = fileChanges.length;
      this.debugLog("\u89E3\u6790\u5230\u7684\u6587\u4EF6\u53D8\u66F4:", fileChanges);
      const contextInfo = this.buildContextInfo(fileChanges, gitDiffContent);
      this.debugLog("\u4E0A\u4E0B\u6587\u4FE1\u606F:", contextInfo);
      const systemPrompt = this.buildDynamicPrompt(fileCount);
      this.debugLog("\u7CFB\u7EDF\u63D0\u793A\u8BCD\u957F\u5EA6:", systemPrompt.length);
      console.log("Git Auto Commit - \u5F00\u59CB\u8C03\u7528AI API...");
      const response = await this.callAIProvider(systemPrompt, contextInfo, fileCount);
      this.debugLog("API\u54CD\u5E94\u72B6\u6001:", response.status, response.statusText);
      if (!response.ok) {
        const defaultModel = this.modelManager.getDefaultModel();
        const providerName = defaultModel ? defaultModel.displayName : "AI\u6A21\u578B";
        const errorText = await response.text();
        this.debugError("API\u8BF7\u6C42\u5931\u8D25:", response.status, errorText);
        throw new Error(`${providerName} API\u8BF7\u6C42\u5931\u8D25: ${response.status} - ${errorText}`);
      }
      const data = await response.json();
      this.debugLog("API\u54CD\u5E94\u6570\u636E:", data);
      this.debugLog("choices\u6570\u7EC4:", data.choices);
      if (data.choices && data.choices[0]) {
        this.debugLog("\u7B2C\u4E00\u4E2Achoice:", data.choices[0]);
        this.debugLog("message\u5BF9\u8C61:", data.choices[0].message);
      }
      if (!data.choices || !data.choices[0]) {
        this.debugError("API\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF:", data);
        throw new Error("API\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF\uFF1A\u7F3A\u5C11choices\u6570\u7EC4");
      }
      let aiMessage = "";
      const choice = data.choices[0];
      this.debugLog("choice\u7684\u6240\u6709\u5C5E\u6027:", Object.keys(choice));
      if (choice.message) {
        this.debugLog("message\u7684\u6240\u6709\u5C5E\u6027:", Object.keys(choice.message));
        this.debugLog("message\u5185\u5BB9:", choice.message);
      }
      const isReasoningModelByName = this.isReasoningModelByName();
      if (isReasoningModelByName) {
        console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\uFF08\u57FA\u4E8E\u6A21\u578B\u540D\u79F0\uFF09\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848");
        aiMessage = this.extractFinalAnswerFromReasoning(choice);
      } else {
        const isReasoningModelByResponse = this.isReasoningModelByResponse(choice);
        if (isReasoningModelByResponse) {
          console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\uFF08\u57FA\u4E8E\u54CD\u5E94\u7ED3\u6784\uFF09\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848");
          aiMessage = this.extractFinalAnswerFromReasoning(choice);
        } else {
          if (choice.message && choice.message.content) {
            const content = choice.message.content;
            if (this.containsReasoningContent(content)) {
              console.log("Git Auto Commit - \u5185\u5BB9\u5305\u542B\u63A8\u7406\u8FC7\u7A0B\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848");
              aiMessage = this.extractFinalAnswerFromContent(content);
            } else {
              aiMessage = content;
              console.log("Git Auto Commit - \u4ECEmessage.content\u63D0\u53D6\u5185\u5BB9");
            }
          } else if (choice.delta && choice.delta.content) {
            aiMessage = choice.delta.content;
            console.log("Git Auto Commit - \u4ECEdelta.content\u63D0\u53D6\u5185\u5BB9");
          } else if (choice.text) {
            aiMessage = choice.text;
            console.log("Git Auto Commit - \u4ECEtext\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
          } else if (choice.content) {
            aiMessage = choice.content;
            console.log("Git Auto Commit - \u4ECEcontent\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
          } else if (choice.message && Object.keys(choice.message).length > 0) {
            console.log("Git Auto Commit - \u5C1D\u8BD5\u4ECEmessage\u7684\u5176\u4ED6\u5C5E\u6027\u63D0\u53D6\u5185\u5BB9");
            for (const [key, value] of Object.entries(choice.message)) {
              if (typeof value === "string" && value.trim() && key !== "reasoning") {
                if (this.containsReasoningContent(value)) {
                  this.debugLog(`message.${key}\u5305\u542B\u63A8\u7406\u8FC7\u7A0B\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848`);
                  aiMessage = this.extractFinalAnswerFromContent(value);
                } else {
                  aiMessage = value;
                  this.debugLog(`\u4ECEmessage.${key}\u63D0\u53D6\u5185\u5BB9`);
                }
                if (aiMessage)
                  break;
              }
            }
          } else {
            console.warn("Git Auto Commit - \u65E0\u6CD5\u4ECEAPI\u54CD\u5E94\u4E2D\u63D0\u53D6\u6D88\u606F\u5185\u5BB9");
            this.debugLog("\u5B8C\u6574\u7684choice\u5BF9\u8C61:", JSON.stringify(choice, null, 2));
            aiMessage = "";
          }
        }
      }
      aiMessage = aiMessage.trim();
      this.debugLog("AI\u539F\u59CB\u6D88\u606F:", aiMessage);
      this.debugLog("AI\u539F\u59CB\u6D88\u606F\u957F\u5EA6:", aiMessage.length);
      if (!aiMessage) {
        console.warn("Git Auto Commit - AI\u8FD4\u56DE\u7A7A\u5185\u5BB9\uFF0C\u751F\u6210\u57FA\u4E8E\u6587\u4EF6\u53D8\u66F4\u7684\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F");
        if (isReasoningModelByName || this.isReasoningModelByResponse(choice)) {
          console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\uFF0C\u4F7F\u7528\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F");
          new import_obsidian4.Notice("\u26A0\uFE0F \u63A8\u7406\u6A21\u578B\u4E0D\u9002\u5408\u751F\u6210\u7B80\u77ED\u7684\u63D0\u4EA4\u4FE1\u606F\uFF0C\u5DF2\u81EA\u52A8\u751F\u6210\u57FA\u4E8E\u6587\u4EF6\u53D8\u66F4\u7684\u63CF\u8FF0");
        }
        const basicMessage = this.generateBasicCommitMessage(fileChanges);
        this.debugLog("\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F:", basicMessage);
        return basicMessage;
      }
      const finalMessage = this.formatCommitMessage(aiMessage);
      this.debugLog("\u683C\u5F0F\u5316\u540E\u7684\u63D0\u4EA4\u4FE1\u606F:", finalMessage);
      return finalMessage;
    } catch (error) {
      this.debugError("AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u274C AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u5931\u8D25: ${error.message}`);
      try {
        const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
        const { stdout: gitDiff } = await execAsync("git diff --cached --name-status", {
          cwd: vaultPath,
          maxBuffer: 50 * 1024 * 1024
          // 50MB 缓冲区
        });
        if (gitDiff.trim()) {
          const fileChanges = this.parseFileChanges(gitDiff);
          const basicMessage = this.generateBasicCommitMessage(fileChanges);
          this.debugLog("\u4F7F\u7528\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F\u4F5C\u4E3A\u5907\u7528:", basicMessage);
          return basicMessage;
        }
      } catch (fallbackError) {
        this.debugError("\u751F\u6210\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F\u4E5F\u5931\u8D25:", fallbackError);
      }
      return `\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9 - ${new Date().toLocaleString("zh-CN")}`;
    }
  }
  /**
   * 生成AI提交信息但不暂存文件
   */
  async generateAICommitMessageOnly() {
    try {
      console.log("Git Auto Commit - generateAICommitMessageOnly \u5F00\u59CB\u6267\u884C");
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      this.debugLog("\u5DE5\u4F5C\u76EE\u5F55:", vaultPath);
      try {
        await execAsync("git rev-parse --git-dir", { cwd: vaultPath });
      } catch (gitError) {
        this.debugError("\u4E0D\u662F\u6709\u6548\u7684Git\u4ED3\u5E93:", gitError);
        throw new Error("\u5F53\u524D\u76EE\u5F55\u4E0D\u662FGit\u4ED3\u5E93");
      }
      let gitDiff = "";
      let gitDiffContent = "";
      let diffType = "";
      try {
        const unstagedDiffResult = await execAsync("git diff --name-status", {
          cwd: vaultPath,
          maxBuffer: 50 * 1024 * 1024
        });
        if (unstagedDiffResult.stdout.trim()) {
          gitDiff = unstagedDiffResult.stdout;
          const diffContentResult = await execAsync("git diff", {
            cwd: vaultPath,
            maxBuffer: 50 * 1024 * 1024
          });
          gitDiffContent = diffContentResult.stdout;
          diffType = "\u672A\u6682\u5B58";
        } else {
          const stagedDiffResult = await execAsync("git diff --cached --name-status", {
            cwd: vaultPath,
            maxBuffer: 50 * 1024 * 1024
          });
          if (stagedDiffResult.stdout.trim()) {
            gitDiff = stagedDiffResult.stdout;
            const stagedContentResult = await execAsync("git diff --cached", {
              cwd: vaultPath,
              maxBuffer: 50 * 1024 * 1024
            });
            gitDiffContent = stagedContentResult.stdout;
            diffType = "\u5DF2\u6682\u5B58";
          }
        }
      } catch (diffError) {
        this.debugError("\u83B7\u53D6diff\u4FE1\u606F\u5931\u8D25:", diffError);
        throw new Error(`\u83B7\u53D6Git\u5DEE\u5F02\u4FE1\u606F\u5931\u8D25: ${diffError.message}`);
      }
      console.log(`Git Auto Commit - Git diff \u72B6\u6001 (${diffType}):`, gitDiff);
      console.log(`Git Auto Commit - Git diff \u5185\u5BB9\u957F\u5EA6 (${diffType}):`, gitDiffContent.length);
      if (!gitDiff.trim()) {
        console.log("Git Auto Commit - \u6CA1\u6709\u68C0\u6D4B\u5230\u6587\u4EF6\u53D8\u66F4\uFF08\u672A\u6682\u5B58\u6216\u5DF2\u6682\u5B58\uFF09\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u63D0\u4EA4\u4FE1\u606F");
        return "\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9";
      }
      const fileChanges = this.parseFileChanges(gitDiff);
      const fileCount = fileChanges.length;
      this.debugLog("\u89E3\u6790\u5230\u7684\u6587\u4EF6\u53D8\u66F4:", fileChanges);
      const contextInfo = this.buildContextInfo(fileChanges, gitDiffContent);
      this.debugLog("\u4E0A\u4E0B\u6587\u4FE1\u606F:", contextInfo);
      const systemPrompt = this.buildDynamicPrompt(fileCount);
      this.debugLog("\u7CFB\u7EDF\u63D0\u793A\u8BCD\u957F\u5EA6:", systemPrompt.length);
      console.log("Git Auto Commit - \u5F00\u59CB\u8C03\u7528AI API...");
      const response = await this.callAIProvider(systemPrompt, contextInfo, fileCount);
      this.debugLog("API\u54CD\u5E94\u72B6\u6001:", response.status, response.statusText);
      if (!response.ok) {
        const defaultModel = this.modelManager.getDefaultModel();
        const providerName = defaultModel ? defaultModel.displayName : "AI\u6A21\u578B";
        const errorText = await response.text();
        this.debugError("API\u8BF7\u6C42\u5931\u8D25:", response.status, errorText);
        throw new Error(`${providerName} API\u8BF7\u6C42\u5931\u8D25: ${response.status} - ${errorText}`);
      }
      const data = await response.json();
      this.debugLog("API\u54CD\u5E94\u6570\u636E:", data);
      if (!data.choices || !data.choices[0]) {
        this.debugError("API\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF:", data);
        throw new Error("API\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF\uFF1A\u7F3A\u5C11choices\u6570\u7EC4");
      }
      let aiMessage = "";
      const choice = data.choices[0];
      if (choice.message && choice.message.content) {
        aiMessage = choice.message.content;
      } else if (choice.text) {
        aiMessage = choice.text;
      } else if (choice.content) {
        aiMessage = choice.content;
      }
      aiMessage = aiMessage.trim();
      this.debugLog("AI\u539F\u59CB\u6D88\u606F:", aiMessage);
      if (!aiMessage) {
        console.warn("Git Auto Commit - AI\u8FD4\u56DE\u7A7A\u5185\u5BB9\uFF0C\u751F\u6210\u57FA\u4E8E\u6587\u4EF6\u53D8\u66F4\u7684\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F");
        const basicMessage = this.generateBasicCommitMessage(fileChanges);
        this.debugLog("\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F:", basicMessage);
        return basicMessage;
      }
      const finalMessage = this.formatCommitMessage(aiMessage);
      this.debugLog("\u683C\u5F0F\u5316\u540E\u7684\u63D0\u4EA4\u4FE1\u606F:", finalMessage);
      return finalMessage;
    } catch (error) {
      this.debugError("AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u274C AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u5931\u8D25: ${error.message}`);
      return `\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9 - ${new Date().toLocaleString("zh-CN")}`;
    }
  }
  /**
   * 基于模型名称检测是否是推理模型
   */
  isReasoningModelByName() {
    const defaultModel = this.modelManager.getDefaultModel();
    if (defaultModel && defaultModel.modelName) {
      const modelName = defaultModel.modelName.toLowerCase();
      const openaiReasoningModels = ["o1", "o1-preview", "o1-mini", "o3", "o3-mini"];
      for (const model of openaiReasoningModels) {
        if (modelName.includes(model)) {
          this.debugLog(`\u68C0\u6D4B\u5230OpenAI\u63A8\u7406\u6A21\u578B: ${model}`);
          return true;
        }
      }
      if (modelName.includes("glm") && (modelName.includes("think") || modelName.includes("reasoning") || modelName.includes("cot"))) {
        this.debugLog(`\u68C0\u6D4B\u5230\u667A\u8C31AI\u63A8\u7406\u6A21\u578B: ${modelName}`);
        return true;
      }
      if (modelName.includes("deepseek") && (modelName.includes("r1") || modelName.includes("reasoner"))) {
        this.debugLog(`\u68C0\u6D4B\u5230DeepSeek\u63A8\u7406\u6A21\u578B: ${modelName}`);
        return true;
      }
      const reasoningKeywords = ["reasoner", "reasoning", "think", "cot", "chain-of-thought"];
      for (const keyword of reasoningKeywords) {
        if (modelName.includes(keyword)) {
          this.debugLog(`\u6A21\u578B\u540D\u79F0\u5305\u542B\u63A8\u7406\u5173\u952E\u8BCD"${keyword}"\uFF0C\u5224\u5B9A\u4E3A\u63A8\u7406\u6A21\u578B`);
          return true;
        }
      }
    }
    return false;
  }
  /**
   * 基于响应结构检测是否是推理模型
   */
  isReasoningModelByResponse(choice) {
    if (choice.message && choice.message.reasoning) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230OpenAI\u63A8\u7406\u6A21\u578B\u5B57\u6BB5: reasoning");
      return true;
    }
    if (choice.message && choice.message.reasoning_content) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u667A\u8C31AI\u63A8\u7406\u6A21\u578B\u5B57\u6BB5: reasoning_content");
      return true;
    }
    if (choice.message && choice.message.thinking) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\u5B57\u6BB5: thinking");
      return true;
    }
    if (choice.finish_reason && choice.finish_reason.includes("reasoning")) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\u5B8C\u6210\u539F\u56E0\u6807\u8BB0");
      return true;
    }
    return false;
  }
  /**
   * 检测内容是否包含推理过程特征
   */
  containsReasoningContent(content) {
    if (!content || typeof content !== "string") {
      return false;
    }
    const lowerContent = content.toLowerCase();
    const reasoningPhrases = [
      "\u8BA9\u6211\u5206\u6790",
      "\u8BA9\u6211\u6765\u5206\u6790",
      "\u8BA9\u6211\u601D\u8003",
      "\u9996\u5148\u5206\u6790",
      "\u6211\u6765\u5206\u6790",
      "\u8BA9\u6211\u770B\u770B",
      "\u8BA9\u6211\u68C0\u67E5",
      "\u5206\u6790\u4E00\u4E0B",
      "\u6211\u9700\u8981\u5206\u6790",
      "\u4ECE\u63D0\u4F9B\u7684",
      "\u6839\u636E\u63D0\u4F9B\u7684",
      "\u6211\u5206\u6790",
      "\u8BA9\u6211\u4EEC\u5206\u6790",
      "\u9996\u5148\uFF0C\u8BA9\u6211",
      "\u8BA9\u6211\u7406\u89E3"
    ];
    for (const phrase of reasoningPhrases) {
      if (lowerContent.includes(phrase)) {
        this.debugLog(`\u5185\u5BB9\u5305\u542B\u63A8\u7406\u77ED\u8BED"${phrase}"\uFF0C\u5224\u5B9A\u4E3A\u63A8\u7406\u5185\u5BB9`);
        return true;
      }
    }
    if (lowerContent.includes("### ") || lowerContent.includes("## ")) {
      console.log("Git Auto Commit - \u5185\u5BB9\u5305\u542B\u5206\u6BB5\u7ED3\u6784\uFF0C\u53EF\u80FD\u662F\u63A8\u7406\u8FC7\u7A0B");
      return true;
    }
    return false;
  }
  /**
   * 从推理模型的响应中提取最终答案
   */
  extractFinalAnswerFromReasoning(choice) {
    this.debugLog("\u63A8\u7406\u6A21\u578B\u54CD\u5E94\u7ED3\u6784:", JSON.stringify(choice, null, 2));
    let content = "";
    let isReasoningContent = false;
    if (choice.message) {
      if (choice.message.reasoning) {
        console.log("Git Auto Commit - \u68C0\u6D4B\u5230OpenAI\u63A8\u7406\u6A21\u578B\u683C\u5F0F(reasoning\u5B57\u6BB5)");
        content = choice.message.reasoning;
        isReasoningContent = true;
      } else if (choice.message.reasoning_content) {
        console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u667A\u8C31AI\u63A8\u7406\u6A21\u578B\u683C\u5F0F(reasoning_content\u5B57\u6BB5)");
        content = choice.message.reasoning_content;
        isReasoningContent = true;
      } else if (choice.message.content) {
        console.log("Git Auto Commit - \u4F7F\u7528\u6807\u51C6content\u5B57\u6BB5");
        content = choice.message.content;
        isReasoningContent = this.containsReasoningContent(content);
      }
    } else if (choice.text) {
      content = choice.text;
      isReasoningContent = this.containsReasoningContent(content);
      console.log("Git Auto Commit - \u4ECEtext\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
    } else if (choice.content) {
      content = choice.content;
      isReasoningContent = this.containsReasoningContent(content);
      console.log("Git Auto Commit - \u4ECEcontent\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
    }
    if (!content) {
      console.log("Git Auto Commit - \u63A8\u7406\u6A21\u578B\u54CD\u5E94\u4E2D\u672A\u627E\u5230\u53EF\u63D0\u53D6\u7684\u5185\u5BB9");
      return "";
    }
    this.debugLog(
      "\u63D0\u53D6\u5230\u7684\u5185\u5BB9\u957F\u5EA6:",
      content.length,
      "\u662F\u63A8\u7406\u5185\u5BB9:",
      isReasoningContent
    );
    if (isReasoningContent) {
      return this.extractFinalAnswerFromContent(content);
    } else {
      return this.formatCommitMessage(content);
    }
  }
  /**
   * 从包含推理过程的内容中提取最终答案
   */
  extractFinalAnswerFromContent(content) {
    if (!content || typeof content !== "string") {
      return "";
    }
    this.debugLog("\u5F00\u59CB\u4ECE\u63A8\u7406\u5185\u5BB9\u4E2D\u63D0\u53D6\u6700\u7EC8\u7B54\u6848\uFF0C\u5185\u5BB9\u957F\u5EA6:", content.length);
    const finalAnswerPatterns = [
      // 查找"最终答案"、"最终建议"等明确标记
      /(?:最终答案|最终建议|最终提交信息|建议的提交信息|推荐的提交信息)[:：]\s*([\s\S]*?)(?=\n\n|$)/gi,
      // 查找代码块中的答案
      /```(?:git|commit)?\s*((?:(?!```)[\s\S])*?)\s*```/gi,
      // 查找通用代码块
      /```\s*((?:(?!```)[\s\S])*?)\s*```/gi,
      // 查找结论性语句
      /(?:因此|所以|综上|总结|结论)[:：，,]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|$)/gi
    ];
    for (const pattern of finalAnswerPatterns) {
      try {
        const matches = content.matchAll(pattern);
        for (const match of matches) {
          if (match[1]) {
            const extracted = match[1].trim();
            if (this.isValidCommitMessage(extracted)) {
              console.log("Git Auto Commit - \u4ECE\u660E\u786E\u7B54\u6848\u6807\u8BB0\u4E2D\u63D0\u53D6\u5230\u6709\u6548\u63D0\u4EA4\u4FE1\u606F");
              return this.formatCommitMessage(extracted);
            }
          }
        }
      } catch (error) {
        this.debugWarn("\u6B63\u5219\u5339\u914D\u9519\u8BEF:", error);
        continue;
      }
    }
    const commitTypePattern = /((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n(?:\s*-\s*[^\n]*|\s*\*\s*[^\n]*|\s{2,}[^\n]*)*)*)/gi;
    try {
      const commitMatches = [...content.matchAll(commitTypePattern)];
      if (commitMatches.length > 0) {
        const lastMatch = commitMatches[commitMatches.length - 1];
        if (lastMatch && lastMatch[1]) {
          const extracted = lastMatch[1].trim();
          if (this.isValidCommitMessage(extracted) && extracted.length > 20) {
            console.log("Git Auto Commit - \u4ECE\u63D0\u4EA4\u7C7B\u578B\u6A21\u5F0F\u4E2D\u63D0\u53D6\u5230\u6709\u6548\u63D0\u4EA4\u4FE1\u606F");
            return this.formatCommitMessage(extracted);
          }
        }
      }
    } catch (error) {
      this.debugWarn("\u63D0\u4EA4\u7C7B\u578B\u5339\u914D\u9519\u8BEF:", error);
    }
    const suggestionPatterns = [
      /建议[:：]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|建议|因此|所以|$)/gi,
      /推荐[:：]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|建议|因此|所以|$)/gi,
      /可以写为[:：]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|建议|因此|所以|$)/gi
    ];
    for (const pattern of suggestionPatterns) {
      try {
        const matches = content.matchAll(pattern);
        for (const match of matches) {
          if (match[1]) {
            const extracted = match[1].trim();
            if (this.isValidCommitMessage(extracted)) {
              console.log("Git Auto Commit - \u4ECE\u5EFA\u8BAE\u6027\u8BED\u53E5\u4E2D\u63D0\u53D6\u5230\u6709\u6548\u63D0\u4EA4\u4FE1\u606F");
              return this.formatCommitMessage(extracted);
            }
          }
        }
      } catch (error) {
        this.debugWarn("\u5EFA\u8BAE\u6027\u8BED\u53E5\u5339\u914D\u9519\u8BEF:", error);
        continue;
      }
    }
    console.log("Git Auto Commit - \u672A\u627E\u5230\u660E\u786E\u7684\u6700\u7EC8\u7B54\u6848\uFF0C\u5C1D\u8BD5\u4ECE\u63A8\u7406\u5185\u5BB9\u751F\u6210\u63D0\u4EA4\u4FE1\u606F");
    return this.generateCommitFromReasoning(content);
  }
  /**
   * 检测内容是否被截断
   */
  isContentTruncated(content) {
    if (!content)
      return false;
    const trimmedContent = content.trim();
    const lastChar = trimmedContent.slice(-1);
    const truncationIndicators = ["-", "\u8FD9", "\u3001", "\u662F", "\u7684", "\u4E86", "\u548C", "\u6216", "\u7B49"];
    return truncationIndicators.includes(lastChar) || trimmedContent.endsWith("...") || trimmedContent.length < 50;
  }
  /**
   * 生成备用的基本提交信息
   */
  generateFallbackCommitMessage(content) {
    const lowerContent = content.toLowerCase();
    if (lowerContent.includes("\u5220\u9664") || lowerContent.includes("\u79FB\u9664")) {
      return "chore: \u6E05\u7406\u548C\u5220\u9664\u6587\u4EF6";
    } else if (lowerContent.includes("\u65B0\u589E") || lowerContent.includes("\u6DFB\u52A0") || lowerContent.includes("\u521B\u5EFA")) {
      return "feat: \u6DFB\u52A0\u65B0\u6587\u4EF6\u548C\u529F\u80FD";
    } else if (lowerContent.includes("\u4FEE\u6539") || lowerContent.includes("\u66F4\u65B0") || lowerContent.includes("\u6539\u52A8")) {
      return "docs: \u66F4\u65B0\u6587\u6863\u548C\u914D\u7F6E\u6587\u4EF6";
    } else if (lowerContent.includes("\u91CD\u6784") || lowerContent.includes("\u4F18\u5316")) {
      return "refactor: \u91CD\u6784\u4EE3\u7801\u7ED3\u6784";
    } else if (lowerContent.includes("\u4FEE\u590D") || lowerContent.includes("\u4FEE\u6B63")) {
      return "fix: \u4FEE\u590D\u95EE\u9898";
    } else if (lowerContent.includes("\u683C\u5F0F") || lowerContent.includes("\u6837\u5F0F")) {
      return "style: \u8C03\u6574\u683C\u5F0F\u548C\u6837\u5F0F";
    }
    return "chore: \u66F4\u65B0\u9879\u76EE\u6587\u4EF6";
  }
  /**
   * 基于推理内容生成合适的提交信息
   */
  generateCommitFromReasoning(content) {
    console.log("Git Auto Commit - \u5F00\u59CB\u57FA\u4E8E\u63A8\u7406\u5185\u5BB9\u751F\u6210\u63D0\u4EA4\u4FE1\u606F");
    const lowerContent = content.toLowerCase();
    let commitType = "chore";
    let description = "\u66F4\u65B0\u9879\u76EE\u6587\u4EF6";
    let details = [];
    const fileMatches = content.match(/(?:新增|添加|创建|删除|移除|修改|更新)(?:了)?(?:\s*[:：]?\s*)?([^\n，。,;；]*)/gi);
    if (fileMatches) {
      fileMatches.forEach((match) => {
        const cleanMatch = match.replace(/^(?:新增|添加|创建|删除|移除|修改|更新)(?:了)?(?:\s*[:：]?\s*)?/, "").trim();
        if (cleanMatch && cleanMatch.length > 0 && cleanMatch.length < 50) {
          details.push(cleanMatch);
        }
      });
    }
    if (lowerContent.includes("\u5220\u9664") || lowerContent.includes("\u79FB\u9664")) {
      commitType = "chore";
      if (lowerContent.includes("\u6587\u6863") || lowerContent.includes("markdown") || lowerContent.includes(".md")) {
        description = "\u6E05\u7406\u9879\u76EE\u6587\u6863";
      } else if (lowerContent.includes("\u914D\u7F6E") || lowerContent.includes("\u63D2\u4EF6") || lowerContent.includes("\u8F85\u52A9\u5DE5\u5177")) {
        description = "\u79FB\u9664\u8F85\u52A9\u5DE5\u5177\u6587\u4EF6";
      } else if (details.length > 0) {
        description = `\u6E05\u7406${details[0]}\u7B49\u6587\u4EF6`;
      } else {
        description = "\u6E05\u7406\u9879\u76EE\u6587\u4EF6";
      }
    } else if (lowerContent.includes("\u65B0\u589E") || lowerContent.includes("\u6DFB\u52A0") || lowerContent.includes("\u521B\u5EFA")) {
      commitType = "feat";
      if (lowerContent.includes("\u6587\u6863") || lowerContent.includes("markdown")) {
        description = "\u6DFB\u52A0\u9879\u76EE\u6587\u6863";
      } else if (lowerContent.includes("\u529F\u80FD") || lowerContent.includes("\u7279\u6027")) {
        description = "\u6DFB\u52A0\u65B0\u529F\u80FD";
      } else if (details.length > 0) {
        description = `\u6DFB\u52A0${details[0]}\u7B49\u6587\u4EF6`;
      } else {
        description = "\u6DFB\u52A0\u65B0\u5185\u5BB9";
      }
    } else if (lowerContent.includes("\u4FEE\u6539") || lowerContent.includes("\u66F4\u65B0")) {
      if (lowerContent.includes("\u6587\u6863") || lowerContent.includes("markdown")) {
        commitType = "docs";
        description = "\u66F4\u65B0\u9879\u76EE\u6587\u6863";
      } else if (lowerContent.includes("\u914D\u7F6E")) {
        commitType = "chore";
        description = "\u66F4\u65B0\u914D\u7F6E\u6587\u4EF6";
      } else if (lowerContent.includes("\u529F\u80FD")) {
        commitType = "feat";
        description = "\u66F4\u65B0\u529F\u80FD";
      } else if (details.length > 0) {
        commitType = "feat";
        description = `\u66F4\u65B0${details[0]}`;
      } else {
        commitType = "feat";
        description = "\u66F4\u65B0\u5185\u5BB9";
      }
    } else if (lowerContent.includes("\u4FEE\u590D") || lowerContent.includes("\u4FEE\u6B63")) {
      commitType = "fix";
      description = "\u4FEE\u590D\u95EE\u9898";
    } else if (lowerContent.includes("\u91CD\u6784") || lowerContent.includes("\u4F18\u5316")) {
      commitType = "refactor";
      description = "\u91CD\u6784\u4EE3\u7801";
    } else if (lowerContent.includes("\u683C\u5F0F") || lowerContent.includes("\u6837\u5F0F")) {
      commitType = "style";
      description = "\u8C03\u6574\u683C\u5F0F";
    }
    let result = `${commitType}: ${description}`;
    if (details.length > 0 && details.length <= 3) {
      result += "\n\n";
      details.forEach((detail) => {
        if (detail.trim()) {
          result += `- ${detail.trim()}
`;
        }
      });
      result = result.trim();
    } else if (details.length > 3) {
      result += `

- \u5305\u542B${details.length}\u4E2A\u6587\u4EF6\u7684\u53D8\u66F4`;
    }
    this.debugLog("\u57FA\u4E8E\u63A8\u7406\u5185\u5BB9\u751F\u6210\u63D0\u4EA4\u4FE1\u606F:", result);
    return result;
  }
  /**
   * 验证提取的内容是否像一个有效的提交信息
   */
  isValidCommitMessage(message) {
    if (!message || message.length < 5) {
      return false;
    }
    const commitTypes = ["feat", "fix", "docs", "style", "refactor", "chore", "test", "perf"];
    const hasCommitType = commitTypes.some(
      (type) => message.toLowerCase().startsWith(type + ":") || message.toLowerCase().includes(type + ":")
    );
    if (hasCommitType) {
      return true;
    }
    const commitVerbs = ["\u65B0\u589E", "\u4FEE\u6539", "\u5220\u9664", "\u66F4\u65B0", "\u91CD\u6784", "\u6DFB\u52A0", "\u79FB\u9664", "\u4F18\u5316", "\u4FEE\u590D"];
    const hasCommitVerb = commitVerbs.some((verb) => message.includes(verb));
    if (hasCommitVerb && message.length > 10) {
      return true;
    }
    const reasoningIndicators = ["\u8BA9\u6211", "\u6211\u6765", "\u5206\u6790", "\u9996\u5148", "\u7136\u540E", "\u63A5\u4E0B\u6765", "\u6839\u636E"];
    const hasReasoningIndicator = reasoningIndicators.some(
      (indicator) => message.startsWith(indicator)
    );
    return !hasReasoningIndicator;
  }
  /**
   * 生成基于文件变更的基本提交信息
   */
  generateBasicCommitMessage(fileChanges) {
    if (fileChanges.length === 0) {
      return "\u66F4\u65B0\u6587\u4EF6\u5185\u5BB9";
    }
    if (fileChanges.length === 1) {
      const change = fileChanges[0];
      return `${change.status} ${change.file}`;
    }
    const statusCounts = fileChanges.reduce((acc, change) => {
      acc[change.status] = (acc[change.status] || 0) + 1;
      return acc;
    }, {});
    const parts = [];
    for (const [status, count] of Object.entries(statusCounts)) {
      if (count === 1) {
        parts.push(status);
      } else {
        parts.push(`${status}${count}\u4E2A\u6587\u4EF6`);
      }
    }
    return parts.join("\uFF0C");
  }
  /**
   * 解析文件变更信息
   */
  parseFileChanges(gitDiff) {
    return gitDiff.split("\n").filter((line) => line.trim()).map((line) => {
      var _a;
      const [status, file] = line.split("	");
      const fileExtension = ((_a = file.split(".").pop()) == null ? void 0 : _a.toLowerCase()) || "";
      const fileType = this.getFileType(fileExtension);
      return {
        status: this.translateStatus(status),
        file,
        type: fileType
      };
    });
  }
  /**
   * 翻译Git状态码
   */
  translateStatus(status) {
    const statusMap = {
      "A": "\u65B0\u589E",
      "M": "\u4FEE\u6539",
      "D": "\u5220\u9664",
      "R": "\u91CD\u547D\u540D",
      "C": "\u590D\u5236",
      "U": "\u66F4\u65B0"
    };
    return statusMap[status] || "\u4FEE\u6539";
  }
  /**
   * 获取文件类型
   */
  getFileType(extension) {
    const typeMap = {
      "md": "\u7B14\u8BB0",
      "txt": "\u6587\u672C",
      "json": "\u914D\u7F6E",
      "js": "\u811A\u672C",
      "ts": "\u811A\u672C",
      "css": "\u6837\u5F0F",
      "html": "\u9875\u9762",
      "png": "\u56FE\u7247",
      "jpg": "\u56FE\u7247",
      "jpeg": "\u56FE\u7247",
      "gif": "\u56FE\u7247",
      "pdf": "\u6587\u6863",
      "canvas": "\u753B\u5E03"
    };
    return typeMap[extension] || "\u6587\u4EF6";
  }
  /**
   * 构建上下文信息
   */
  buildContextInfo(fileChanges, diffContent) {
    const summary = fileChanges.map(
      (change) => `${change.status} ${change.file} (${change.type})`
    ).join("\n");
    let details = diffContent;
    const maxLength = 8e3;
    if (details.length > maxLength) {
      this.debugLog(`Diff\u5185\u5BB9\u8FC7\u957F (${details.length}\u5B57\u7B26)\uFF0C\u6B63\u5728\u667A\u80FD\u622A\u65AD...`);
      const lines = details.split("\n");
      const importantLines = [];
      let currentLength = 0;
      for (const line of lines) {
        if (line.startsWith("+++") || line.startsWith("---") || line.startsWith("@@")) {
          importantLines.push(line);
          currentLength += line.length + 1;
        } else if (line.startsWith("+") && !line.startsWith("+++") && line.trim().length > 10 || line.startsWith("-") && !line.startsWith("---") && line.trim().length > 10) {
          if (currentLength + line.length + 1 < maxLength - 200) {
            importantLines.push(line);
            currentLength += line.length + 1;
          }
        }
        if (importantLines.length > 100 || currentLength > maxLength - 200) {
          break;
        }
      }
      details = importantLines.join("\n") + `

... (\u5DF2\u622A\u65AD\uFF0C\u539F\u59CB\u957F\u5EA6: ${diffContent.length}\u5B57\u7B26, \u663E\u793A: ${importantLines.length}\u884C)`;
    }
    return { summary, details };
  }
  /**
   * 根据文件数量构建动态提示词
   */
  buildDynamicPrompt(fileCount) {
    const isReasoningModel = this.isReasoningModelByName();
    const basePrompt = `\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684Git\u63D0\u4EA4\u4FE1\u606F\u751F\u6210\u52A9\u624B\u3002\u8BF7\u6839\u636E\u63D0\u4F9B\u7684git diff\u5185\u5BB9\uFF0C\u751F\u6210\u7B26\u5408Conventional Commits\u89C4\u8303\u7684\u8BE6\u7EC6\u63D0\u4EA4\u4FE1\u606F\u3002

## \u8F93\u51FA\u683C\u5F0F\u8981\u6C42\uFF1A
\u5FC5\u987B\u4F7F\u7528\u4EE5\u4E0B\u683C\u5F0F\u8F93\u51FA\uFF1A

\`\`\`
<type>: <\u7B80\u77ED\u63CF\u8FF0>

<\u8BE6\u7EC6\u5185\u5BB9>
\`\`\`

## \u63D0\u4EA4\u7C7B\u578B\u89C4\u8303\uFF1A
- feat: \u65B0\u589E\u529F\u80FD\u6216\u7279\u6027
- fix: \u4FEE\u590D\u95EE\u9898\u6216\u9519\u8BEF  
- docs: \u6587\u6863\u76F8\u5173\u53D8\u66F4
- style: \u683C\u5F0F\u8C03\u6574\uFF08\u4E0D\u5F71\u54CD\u4EE3\u7801\u903B\u8F91\uFF09
- refactor: \u91CD\u6784\u4EE3\u7801
- chore: \u6784\u5EFA\u8FC7\u7A0B\u6216\u8F85\u52A9\u5DE5\u5177\u7684\u53D8\u52A8
- test: \u6D4B\u8BD5\u76F8\u5173
- perf: \u6027\u80FD\u4F18\u5316`;
    const reasoningInstructions = isReasoningModel ? `

## \u7279\u522B\u8BF4\u660E\uFF08\u63A8\u7406\u6A21\u578B\uFF09\uFF1A
\u{1F50D} \u8BF7\u5728\u5206\u6790\u8FC7\u7A0B\u7ED3\u675F\u540E\uFF0C\u5728\u56DE\u7B54\u7684\u6700\u540E\u90E8\u5206\u660E\u786E\u7ED9\u51FA\u6700\u7EC8\u7684\u63D0\u4EA4\u4FE1\u606F\u3002
\u{1F4DD} \u6700\u7EC8\u7B54\u6848\u5FC5\u987B\u653E\u5728\u4EE3\u7801\u5757\u4E2D\uFF0C\u683C\u5F0F\u5982\u4E0B\uFF1A

\u6700\u7EC8\u7B54\u6848\uFF1A
\`\`\`
<type>: <\u7B80\u77ED\u63CF\u8FF0>

<\u8BE6\u7EC6\u5185\u5BB9>
\`\`\`

\u26A0\uFE0F \u91CD\u8981\uFF1A\u786E\u4FDD\u6700\u7EC8\u7B54\u6848\u5B8C\u6574\uFF0C\u5305\u542B\u7C7B\u578B\u524D\u7F00\u548C\u8BE6\u7EC6\u63CF\u8FF0\u3002` : "";
    if (fileCount <= 5) {
      return basePrompt + reasoningInstructions + `

## \u8BE6\u7EC6\u63CF\u8FF0\u8981\u6C42\uFF08\u5C11\u91CF\u6587\u4EF6\uFF09\uFF1A
- \u4E3A\u6BCF\u4E2A\u91CD\u8981\u6587\u4EF6\u751F\u6210\u4E00\u884C\u8BE6\u7EC6\u63CF\u8FF0
- \u8BF4\u660E\u6587\u4EF6\u7684\u5177\u4F53\u6539\u52A8\u5185\u5BB9\u548C\u76EE\u7684
- \u7A81\u51FA\u53D8\u66F4\u7684\u4E1A\u52A1\u4EF7\u503C\u6216\u6280\u672F\u610F\u4E49

## \u793A\u4F8B\u8F93\u51FA\uFF1A
\`\`\`
feat: \u6DFB\u52A0\u7528\u6237\u8BA4\u8BC1\u548C\u6743\u9650\u7BA1\u7406\u529F\u80FD

\u65B0\u589E\u4E86\u5B8C\u6574\u7684\u7528\u6237\u8BA4\u8BC1\u7CFB\u7EDF\uFF1A
- UserService.js: \u5B9E\u73B0\u7528\u6237\u767B\u5F55\u3001\u6CE8\u518C\u548C\u5BC6\u7801\u91CD\u7F6E\u529F\u80FD
- AuthMiddleware.js: \u6DFB\u52A0JWT\u4EE4\u724C\u9A8C\u8BC1\u4E2D\u95F4\u4EF6
- PermissionManager.js: \u5B9E\u73B0\u57FA\u4E8E\u89D2\u8272\u7684\u6743\u9650\u63A7\u5236

\u66F4\u65B0\u4E86\u76F8\u5173\u914D\u7F6E\u6587\u4EF6\uFF1A
- config/auth.json: \u914D\u7F6E\u8BA4\u8BC1\u670D\u52A1\u7684\u53C2\u6570\u548C\u5B89\u5168\u7B56\u7565
- README.md: \u6DFB\u52A0\u8BA4\u8BC1\u529F\u80FD\u7684\u4F7F\u7528\u8BF4\u660E\u548CAPI\u6587\u6863
\`\`\``;
    } else {
      return basePrompt + reasoningInstructions + `

## \u8BE6\u7EC6\u63CF\u8FF0\u8981\u6C42\uFF08\u5927\u91CF\u6587\u4EF6\uFF09\uFF1A
- \u6309\u529F\u80FD\u6A21\u5757\u6216\u6587\u4EF6\u7C7B\u578B\u5206\u7EC4\u63CF\u8FF0
- \u6BCF\u4E2A\u5206\u7EC4\u8BF4\u660E\u6574\u4F53\u7684\u53D8\u66F4\u76EE\u7684
- \u9002\u5F53\u63D0\u53CA\u91CD\u8981\u6587\u4EF6\u6570\u91CF\u548C\u4E3B\u8981\u6539\u52A8

## \u793A\u4F8B\u8F93\u51FA\uFF1A
\`\`\`
feat: \u91CD\u6784\u9879\u76EE\u67B6\u6784\u5E76\u6DFB\u52A0\u591A\u4E2A\u6838\u5FC3\u6A21\u5757

\u65B0\u589E\u6838\u5FC3\u4E1A\u52A1\u6A21\u5757\uFF08\u51718\u4E2A\u6587\u4EF6\uFF09\uFF1A
- \u7528\u6237\u7BA1\u7406\u6A21\u5757: \u5B8C\u6574\u7684\u7528\u6237CRUD\u64CD\u4F5C\u548C\u6743\u9650\u63A7\u5236
- \u6570\u636E\u5904\u7406\u6A21\u5757: \u5B9E\u73B0\u6570\u636E\u9A8C\u8BC1\u3001\u8F6C\u6362\u548C\u5B58\u50A8\u903B\u8F91
- API\u7F51\u5173\u6A21\u5757: \u7EDF\u4E00\u7684\u8BF7\u6C42\u8DEF\u7531\u548C\u54CD\u5E94\u5904\u7406

\u66F4\u65B0\u9879\u76EE\u914D\u7F6E\u548C\u6587\u6863\uFF08\u51715\u4E2A\u6587\u4EF6\uFF09\uFF1A
- \u91CD\u6784\u4E86\u9879\u76EE\u76EE\u5F55\u7ED3\u6784\u548C\u4F9D\u8D56\u7BA1\u7406
- \u66F4\u65B0\u4E86\u90E8\u7F72\u811A\u672C\u548C\u73AF\u5883\u914D\u7F6E
- \u5B8C\u5584\u4E86API\u6587\u6863\u548C\u5F00\u53D1\u6307\u5357

\u4F18\u5316\u73B0\u6709\u529F\u80FD\u6A21\u5757\uFF08\u517112\u4E2A\u6587\u4EF6\uFF09\uFF1A
- \u91CD\u6784\u4E86\u6570\u636E\u5E93\u8BBF\u95EE\u5C42\uFF0C\u63D0\u9AD8\u67E5\u8BE2\u6027\u80FD
- \u4F18\u5316\u4E86\u524D\u7AEF\u7EC4\u4EF6\u7ED3\u6784\uFF0C\u589E\u5F3A\u53EF\u7EF4\u62A4\u6027
- \u7EDF\u4E00\u4E86\u4EE3\u7801\u98CE\u683C\u548C\u9519\u8BEF\u5904\u7406\u673A\u5236
\`\`\``;
    }
  }
  /**
   * 格式化提交信息
   */
  formatCommitMessage(aiMessage) {
    let cleanMessage = aiMessage.replace(/^["']|["']$/g, "").replace(/^提交信息[:：]\s*/, "").trim();
    cleanMessage = cleanMessage.replace(/^```[\s\S]*?\n/, "").replace(/\n```$/, "").replace(/^```/g, "").replace(/```$/g, "").trim();
    if (!cleanMessage) {
      return "\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9";
    }
    const lines = cleanMessage.split("\n").map((line) => line.trim()).filter((line) => line.length > 0);
    if (lines.length === 0) {
      return "\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9";
    }
    if (lines.length === 1 && lines[0].length < 20) {
      return `${lines[0]} - ${new Date().toLocaleString("zh-CN", { month: "numeric", day: "numeric", hour: "2-digit", minute: "2-digit" })}`;
    }
    return lines.join("\n");
  }
  /**
   * 转义提交信息中的特殊字符，支持多行提交信息
   */
  escapeCommitMessage(message) {
    if (message.includes("\n")) {
      return message.split("\n").map((line) => line.trim()).filter((line) => line.length > 0).map((line) => {
        return line.replace(/"/g, '\\"').replace(/\\/g, "\\\\").replace(/[\x00-\x1F\x7F]/g, "");
      }).join("\n");
    } else {
      let escaped = message.replace(/\s+/g, " ").replace(/"/g, '\\"').replace(/\\/g, "\\\\").replace(/[\x00-\x1F\x7F]/g, "").trim();
      if (escaped.length > 500) {
        escaped = escaped.substring(0, 497) + "...";
      }
      if (!escaped) {
        escaped = "\u66F4\u65B0\u6587\u4EF6\u5185\u5BB9";
      }
      return escaped;
    }
  }
  /**
   * 调用AI提供商API
   */
  async callAIProvider(systemPrompt, contextInfo, fileCount) {
    const defaultModel = this.modelManager.getDefaultModel();
    this.debugLog("callAIProvider \u83B7\u53D6\u5230\u7684\u9ED8\u8BA4\u6A21\u578B:", defaultModel);
    if (!defaultModel) {
      throw new Error("\u672A\u914D\u7F6E\u9ED8\u8BA4AI\u6A21\u578B");
    }
    const maxTokens = defaultModel.maxOutputTokens;
    this.debugLog("\u4F7F\u7528\u6A21\u578B\u914D\u7F6E\u7684max_tokens:", maxTokens);
    this.debugLog("\u6587\u4EF6\u6570\u91CF:", fileCount);
    if (fileCount > 50) {
      console.log("Git Auto Commit - \u6587\u4EF6\u8F83\u591A\uFF0C\u5EFA\u8BAE\u4F7F\u7528\u8F83\u5927\u7684token\u9650\u5236\u4EE5\u83B7\u5F97\u8BE6\u7EC6\u63CF\u8FF0");
    } else if (fileCount > 20) {
      console.log("Git Auto Commit - \u6587\u4EF6\u6570\u91CF\u4E2D\u7B49\uFF0C\u5F53\u524Dtoken\u914D\u7F6E\u5E94\u8BE5\u8DB3\u591F");
    } else {
      console.log("Git Auto Commit - \u6587\u4EF6\u8F83\u5C11\uFF0C\u5F53\u524Dtoken\u914D\u7F6E\u5145\u8DB3");
    }
    const userContent = `\u8BF7\u4E3A\u4EE5\u4E0BGit\u53D8\u66F4\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\uFF1A

\u6587\u4EF6\u53D8\u66F4\u7EDF\u8BA1\uFF1A
${contextInfo.summary}

\u8BE6\u7EC6\u53D8\u66F4\u5185\u5BB9\uFF1A
${contextInfo.details}`;
    const requestBody = this.buildAPIRequestBody(systemPrompt, userContent, maxTokens, defaultModel);
    const headers = this.buildAPIHeaders(defaultModel);
    this.debugLog("API\u8BF7\u6C42URL:", `${defaultModel.baseURL}/chat/completions`);
    this.debugLog("API\u8BF7\u6C42\u5934:", headers);
    this.debugLog("API\u8BF7\u6C42\u4F53:", JSON.stringify(requestBody, null, 2));
    return fetch(`${defaultModel.baseURL}/chat/completions`, {
      method: "POST",
      headers,
      body: JSON.stringify(requestBody)
    });
  }
  /**
   * 构建API请求体
   */
  buildAPIRequestBody(systemPrompt, userContent, maxTokens, model) {
    const baseBody = {
      model: model.modelName,
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userContent
        }
      ],
      max_tokens: maxTokens,
      temperature: 0.7
    };
    switch (model.provider) {
      case "zhipu":
        return {
          ...baseBody,
          top_p: 0.7,
          stream: false
        };
      case "qwen":
        return {
          ...baseBody,
          top_p: 0.8,
          enable_search: false
        };
      case "openrouter":
        return {
          ...baseBody,
          top_p: 0.9
        };
      default:
        return baseBody;
    }
  }
  /**
   * 构建API请求头
   */
  buildAPIHeaders(model) {
    const baseHeaders = {
      "Content-Type": "application/json"
    };
    switch (model.provider) {
      case "deepseek":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`
        };
      case "zhipu":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`
        };
      case "qwen":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`,
          "X-DashScope-SSE": "disable"
        };
      case "openrouter":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`,
          "HTTP-Referer": "https://obsidian.md",
          "X-Title": "Obsidian Git Auto Commit"
        };
      default:
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`
        };
    }
  }
  async executeGitOperationsWithBatching(filesToCommit, commitMessage) {
    if (!this.settings.batchProcessingEnabled) {
      console.log("Git Auto Commit - \u5206\u6279\u5904\u7406\u5DF2\u7981\u7528\uFF0C\u6267\u884C\u6B63\u5E38\u63D0\u4EA4");
      await this.executeGitOperations(filesToCommit, commitMessage);
      return;
    }
    const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
    try {
      const overallSize = await this.calculateChangeSize(filesToCommit, vaultPath);
      const sizeLimitMB = this.settings.batchSizeLimitMB;
      const sizeLimit = sizeLimitMB * 1024 * 1024;
      this.debugLog(`\u68C0\u6D4B\u5230\u53D8\u66F4\u603B\u5927\u5C0F: ${(overallSize / 1024 / 1024).toFixed(2)}MB`);
      if (overallSize <= sizeLimit) {
        console.log("Git Auto Commit - \u53D8\u66F4\u5927\u5C0F\u5728\u9650\u5236\u5185\uFF0C\u6267\u884C\u6B63\u5E38\u63D0\u4EA4");
        await this.executeGitOperations(filesToCommit, commitMessage);
        return;
      }
      this.debugLog(`\u53D8\u66F4\u5927\u5C0F\u8D85\u8FC7${sizeLimitMB}MB\u9650\u5236\uFF0C\u5F00\u59CB\u667A\u80FD\u5206\u6279\u5904\u7406`);
      new import_obsidian4.Notice(`\u{1F4E6} \u68C0\u6D4B\u5230\u5927\u91CF\u53D8\u66F4(${(overallSize / 1024 / 1024).toFixed(1)}MB)\uFF0C\u6B63\u5728\u667A\u80FD\u5206\u6279\u63D0\u4EA4...`, 4e3);
      const batches = await this.createSmartBatches(filesToCommit, vaultPath, sizeLimit);
      this.debugLog(`\u5206\u4E3A ${batches.length} \u4E2A\u6279\u6B21\u5904\u7406`);
      let batchNumber = 1;
      let totalBatches = batches.length;
      for (const batch of batches) {
        try {
          this.debugLog(`\u5904\u7406\u6279\u6B21 ${batchNumber}/${totalBatches}\uFF0C\u5305\u542B ${batch.files.length} \u4E2A\u6587\u4EF6`);
          new import_obsidian4.Notice(`\u{1F4E6} \u63D0\u4EA4\u6279\u6B21 ${batchNumber}/${totalBatches} (${batch.files.length}\u4E2A\u6587\u4EF6)`, 2e3);
          const batchCommitMessage = this.generateBatchCommitMessage(commitMessage, batchNumber, totalBatches, batch);
          await this.executeGitOperations(batch.files, batchCommitMessage);
          this.debugLog(`\u6279\u6B21 ${batchNumber} \u63D0\u4EA4\u6210\u529F`);
          batchNumber++;
          if (batchNumber <= totalBatches) {
            await new Promise((resolve) => setTimeout(resolve, 1e3));
          }
        } catch (error) {
          console.error(`Git Auto Commit - \u6279\u6B21 ${batchNumber} \u63D0\u4EA4\u5931\u8D25:`, error);
          throw new Error(`\u6279\u6B21 ${batchNumber} \u63D0\u4EA4\u5931\u8D25: ${error.message}`);
        }
      }
      new import_obsidian4.Notice(`\u2705 \u5206\u6279\u63D0\u4EA4\u5B8C\u6210\uFF01\u5171\u5904\u7406 ${totalBatches} \u4E2A\u6279\u6B21`, 3e3);
      this.debugLog(`\u6240\u6709\u6279\u6B21\u63D0\u4EA4\u5B8C\u6210\uFF0C\u5171 ${totalBatches} \u4E2A\u6279\u6B21`);
    } catch (error) {
      this.debugError("\u5206\u6279\u63D0\u4EA4\u5931\u8D25:", error);
      throw error;
    }
  }
  async calculateChangeSize(filesToCommit, vaultPath) {
    try {
      if (filesToCommit.length > 0) {
        for (const file of filesToCommit) {
          await execAsync(`git add "${file}"`, {
            cwd: vaultPath,
            maxBuffer: 5 * 1024 * 1024
          });
        }
      } else {
        await execAsync("git add .", {
          cwd: vaultPath,
          maxBuffer: 10 * 1024 * 1024
        });
      }
      const { stdout: diffStat } = await execAsync("git diff --cached --numstat", {
        cwd: vaultPath,
        maxBuffer: 10 * 1024 * 1024
      });
      let totalChanges = 0;
      const lines = diffStat.trim().split("\n").filter((line) => line.trim());
      for (const line of lines) {
        const [added, deleted] = line.split("	");
        if (added !== "-" && deleted !== "-") {
          totalChanges += parseInt(added || "0") + parseInt(deleted || "0");
        }
      }
      const estimatedSize = totalChanges * 50;
      await execAsync("git reset", {
        cwd: vaultPath,
        maxBuffer: 5 * 1024 * 1024
      });
      return estimatedSize;
    } catch (error) {
      this.debugError("\u8BA1\u7B97\u53D8\u66F4\u5927\u5C0F\u5931\u8D25:", error);
      return 20 * 1024 * 1024;
    }
  }
  async createSmartBatches(filesToCommit, vaultPath, sizeLimit) {
    const batches = [];
    const filesWithSizes = [];
    const filesToProcess = filesToCommit.length > 0 ? filesToCommit : await this.getAllModifiedFiles(vaultPath);
    for (const file of filesToProcess) {
      try {
        const size = await this.estimateFileChangeSize(file, vaultPath);
        filesWithSizes.push({ file, size });
      } catch (error) {
        this.debugWarn(`\u65E0\u6CD5\u4F30\u7B97\u6587\u4EF6 ${file} \u7684\u5927\u5C0F\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u503C`);
        filesWithSizes.push({ file, size: 100 * 1024 });
      }
    }
    filesWithSizes.sort((a, b) => b.size - a.size);
    let currentBatch = [];
    let currentSize = 0;
    const targetSize = sizeLimit * 0.8;
    for (const { file, size } of filesWithSizes) {
      if (size > targetSize) {
        if (currentBatch.length > 0) {
          batches.push({ files: [...currentBatch], estimatedSize: currentSize });
          currentBatch = [];
          currentSize = 0;
        }
        batches.push({ files: [file], estimatedSize: size });
        continue;
      }
      if (currentSize + size > targetSize && currentBatch.length > 0) {
        batches.push({ files: [...currentBatch], estimatedSize: currentSize });
        currentBatch = [file];
        currentSize = size;
      } else {
        currentBatch.push(file);
        currentSize += size;
      }
    }
    if (currentBatch.length > 0) {
      batches.push({ files: [...currentBatch], estimatedSize: currentSize });
    }
    return batches;
  }
  async getAllModifiedFiles(vaultPath) {
    const { stdout } = await execAsync("git status --porcelain", {
      cwd: vaultPath,
      maxBuffer: 10 * 1024 * 1024
    });
    return stdout.split("\n").filter((line) => line.trim()).map((line) => line.substring(3)).filter((file) => {
      const isExcluded = this.settings.excludePatterns.some(
        (pattern) => file.includes(pattern)
      );
      return !isExcluded;
    });
  }
  async estimateFileChangeSize(file, vaultPath) {
    try {
      await execAsync(`git add "${file}"`, {
        cwd: vaultPath,
        maxBuffer: 5 * 1024 * 1024
      });
      const { stdout: diffStat } = await execAsync(`git diff --cached --numstat -- "${file}"`, {
        cwd: vaultPath,
        maxBuffer: 5 * 1024 * 1024
      });
      await execAsync(`git reset -- "${file}"`, {
        cwd: vaultPath,
        maxBuffer: 1024 * 1024
      });
      if (diffStat.trim()) {
        const [added, deleted] = diffStat.trim().split("	");
        if (added !== "-" && deleted !== "-") {
          const changes = parseInt(added || "0") + parseInt(deleted || "0");
          return changes * 50;
        }
      }
      return 1024;
    } catch (error) {
      console.warn(`Git Auto Commit - \u4F30\u7B97\u6587\u4EF6 ${file} \u5927\u5C0F\u5931\u8D25:`, error);
      return 10 * 1024;
    }
  }
  generateBatchCommitMessage(originalMessage, batchNumber, totalBatches, batch) {
    const sizeInMB = (batch.estimatedSize / 1024 / 1024).toFixed(1);
    const fileCount = batch.files.length;
    const mainMessage = originalMessage.split("\n")[0] || originalMessage;
    const batchInfo = totalBatches > 1 ? ` [\u6279\u6B21 ${batchNumber}/${totalBatches}]` : "";
    const batchMessage = `${mainMessage}${batchInfo}

\u6279\u6B21\u4FE1\u606F:
- \u6587\u4EF6\u6570\u91CF: ${fileCount}
- \u9884\u4F30\u5927\u5C0F: ${sizeInMB}MB
- \u6279\u6B21\u53F7: ${batchNumber}/${totalBatches}

\u5305\u542B\u6587\u4EF6:
${batch.files.slice(0, 10).map((f) => `- ${f}`).join("\n")}${batch.files.length > 10 ? `
... \u8FD8\u6709 ${batch.files.length - 10} \u4E2A\u6587\u4EF6` : ""}`;
    return batchMessage;
  }
  // 用于测试分批处理逻辑的方法
  async testBatchProcessing() {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      const modifiedFiles = await this.getModifiedFiles();
      this.debugLog("\u5F53\u524D\u4FEE\u6539\u7684\u6587\u4EF6:", modifiedFiles);
      if (modifiedFiles.length === 0) {
        new import_obsidian4.Notice("\u{1F4E6} \u6CA1\u6709\u68C0\u6D4B\u5230\u4FEE\u6539\u7684\u6587\u4EF6");
        return;
      }
      const changeSize = await this.calculateChangeSize(modifiedFiles, vaultPath);
      this.debugLog(`\u9884\u4F30\u53D8\u66F4\u5927\u5C0F: ${(changeSize / 1024 / 1024).toFixed(2)}MB`);
      const sizeLimit = this.settings.batchSizeLimitMB * 1024 * 1024;
      this.debugLog(`\u914D\u7F6E\u7684\u5927\u5C0F\u9650\u5236: ${this.settings.batchSizeLimitMB}MB`);
      if (changeSize > sizeLimit) {
        const batches = await this.createSmartBatches(modifiedFiles, vaultPath, sizeLimit);
        this.debugLog(`\u5C06\u5206\u4E3A ${batches.length} \u4E2A\u6279\u6B21:`);
        let totalFiles = 0;
        let totalSize = 0;
        batches.forEach((batch, index) => {
          console.log(`  \u6279\u6B21 ${index + 1}: ${batch.files.length} \u4E2A\u6587\u4EF6, ${(batch.estimatedSize / 1024 / 1024).toFixed(2)}MB`);
          totalFiles += batch.files.length;
          totalSize += batch.estimatedSize;
        });
        this.debugLog(`\u603B\u8BA1: ${totalFiles} \u4E2A\u6587\u4EF6, ${(totalSize / 1024 / 1024).toFixed(2)}MB`);
        new import_obsidian4.Notice(
          `\u{1F4E6} \u5206\u6279\u5904\u7406\u6D4B\u8BD5\u7ED3\u679C:
\u53D8\u66F4\u5927\u5C0F: ${(changeSize / 1024 / 1024).toFixed(2)}MB
\u5C06\u5206\u4E3A: ${batches.length} \u4E2A\u6279\u6B21
\u603B\u6587\u4EF6\u6570: ${totalFiles}`,
          5e3
        );
      } else {
        new import_obsidian4.Notice(
          `\u{1F4E6} \u5206\u6279\u5904\u7406\u6D4B\u8BD5\u7ED3\u679C:
\u53D8\u66F4\u5927\u5C0F: ${(changeSize / 1024 / 1024).toFixed(2)}MB
\u65E0\u9700\u5206\u6279\uFF0C\u53EF\u76F4\u63A5\u63D0\u4EA4`,
          3e3
        );
      }
    } catch (error) {
      this.debugError("\u5206\u6279\u5904\u7406\u6D4B\u8BD5\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u274C \u5206\u6279\u5904\u7406\u6D4B\u8BD5\u5931\u8D25: ${error.message}`);
    }
  }
  async executeGitOperations(filesToCommit, commitMessage) {
    const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
    try {
      if (filesToCommit.length > 0) {
        for (const file of filesToCommit) {
          await execAsync(`git add "${file}"`, {
            cwd: vaultPath,
            maxBuffer: 5 * 1024 * 1024
            // 5MB 缓冲区
          });
        }
      } else {
        await execAsync("git add .", {
          cwd: vaultPath,
          maxBuffer: 10 * 1024 * 1024
          // 10MB 缓冲区
        });
      }
      const { stdout: stagedFiles } = await execAsync("git diff --cached --name-only", {
        cwd: vaultPath,
        maxBuffer: 10 * 1024 * 1024
        // 10MB 缓冲区
      });
      if (!stagedFiles.trim()) {
        throw new Error("\u6CA1\u6709\u6587\u4EF6\u9700\u8981\u63D0\u4EA4");
      }
      const escapedMessage = this.escapeCommitMessage(commitMessage);
      if (escapedMessage.includes("\n")) {
        const { writeFile, unlink } = require("fs").promises;
        const path = require("path");
        const tmpFile = path.join(vaultPath, ".git_commit_msg_tmp");
        try {
          await writeFile(tmpFile, escapedMessage, "utf8");
          await execAsync(`git commit -F "${tmpFile}"`, {
            cwd: vaultPath,
            maxBuffer: 5 * 1024 * 1024
            // 5MB 缓冲区
          });
          await unlink(tmpFile);
        } catch (error) {
          try {
            await unlink(tmpFile);
          } catch (unlinkError) {
          }
          throw error;
        }
      } else {
        await execAsync(`git commit -m "${escapedMessage}"`, {
          cwd: vaultPath,
          maxBuffer: 5 * 1024 * 1024
          // 5MB 缓冲区
        });
      }
      if (this.settings.pushToRemote) {
        await execAsync(`git push origin ${this.settings.remoteBranch}`, {
          cwd: vaultPath,
          maxBuffer: 10 * 1024 * 1024
          // 10MB 缓冲区
        });
      }
    } catch (error) {
      throw new Error(`Git\u64CD\u4F5C\u5931\u8D25: ${error.message}`);
    }
  }
  async showFileSelectionModal(files) {
    return new Promise((resolve) => {
      const modal = new FileSelectionModal(this.app, files, resolve);
      modal.open();
    });
  }
  async showCommitMessageModal(defaultMessage) {
    return new Promise((resolve) => {
      const modal = new CommitMessageModal(this.app, defaultMessage, resolve);
      modal.open();
    });
  }
  debugAIConfig() {
    console.log("=== Git Auto Commit \u8C03\u8BD5\u4FE1\u606F ===");
    console.log("\u63D2\u4EF6\u8BBE\u7F6E:", this.settings);
    console.log("\u6A21\u578B\u7BA1\u7406\u5668:", this.modelManager);
    const allModels = this.modelManager.getAllModels();
    console.log("\u6240\u6709\u6A21\u578B\u6570\u91CF:", allModels.length);
    console.log("\u6240\u6709\u6A21\u578B:", allModels);
    const verifiedModels = this.modelManager.getVerifiedModels();
    console.log("\u5DF2\u9A8C\u8BC1\u7684\u6A21\u578B\u6570\u91CF:", verifiedModels.length);
    console.log("\u5DF2\u9A8C\u8BC1\u7684\u6A21\u578B:", verifiedModels);
    const defaultModel = this.modelManager.getDefaultModel();
    console.log("\u9ED8\u8BA4\u6A21\u578B:", defaultModel);
    console.log("\u9ED8\u8BA4\u6A21\u578BID:", this.modelManager.getDefaultModelId());
    new import_obsidian4.Notice("\u8C03\u8BD5\u4FE1\u606F\u5DF2\u8F93\u51FA\u5230\u63A7\u5236\u53F0\uFF0C\u8BF7\u6309F12\u67E5\u770B");
  }
  async debugDataStatus() {
    console.log("=== Git Auto Commit \u6570\u636E\u72B6\u6001\u8C03\u8BD5 ===");
    console.log("\u6570\u636E\u7BA1\u7406\u5668:", this.dataManager);
    console.log("\u6570\u636E\u6587\u4EF6\u8DEF\u5F84:", this.dataManager.getDataFilePath());
    console.log("\u6570\u636E\u6587\u4EF6\u662F\u5426\u5B58\u5728:", await this.dataManager.dataFileExists());
    console.log("\u5F53\u524D\u63D2\u4EF6\u8BBE\u7F6E:", this.dataManager.getSettings());
    console.log("\u5F53\u524D\u6A21\u578B\u914D\u7F6E:", this.dataManager.getAllModels());
    console.log("\u9ED8\u8BA4\u6A21\u578BID:", this.dataManager.getDefaultModelId());
    const exportedConfig = this.dataManager.exportConfig();
    console.log("\u5B8C\u6574\u914D\u7F6E\u5BFC\u51FA:", exportedConfig);
    new import_obsidian4.Notice("\u6570\u636E\u72B6\u6001\u8C03\u8BD5\u4FE1\u606F\u5DF2\u8F93\u51FA\u5230\u63A7\u5236\u53F0\uFF0C\u8BF7\u6309F12\u67E5\u770B");
  }
  async resetPluginData() {
    try {
      await this.dataManager.resetToDefaults();
      await this.loadSettings();
      new import_obsidian4.Notice("\u2705 \u63D2\u4EF6\u6570\u636E\u5DF2\u91CD\u7F6E\u4E3A\u521D\u59CB\u72B6\u6001");
      console.log("Git Auto Commit - \u63D2\u4EF6\u6570\u636E\u5DF2\u91CD\u7F6E");
    } catch (error) {
      this.debugError("\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E\u5931\u8D25:", error);
      new import_obsidian4.Notice(`\u274C \u91CD\u7F6E\u5931\u8D25: ${error.message}`);
    }
  }
  /**
   * 启动定时自动提交
   */
  startTimedAutoCommit() {
    if (this.timedAutoCommitManager) {
      this.timedAutoCommitManager.start();
    }
  }
  /**
   * 停止定时自动提交
   */
  stopTimedAutoCommit() {
    if (this.timedAutoCommitManager) {
      this.timedAutoCommitManager.stop();
    }
  }
  /**
   * 重启定时自动提交
   */
  restartTimedAutoCommit() {
    if (this.timedAutoCommitManager) {
      this.timedAutoCommitManager.restart();
    }
  }
  /**
   * 触发一次定时自动提交检查（强制）
   * 从插件侧调用管理器执行一次立即检查
   */
  async triggerTimedAutoCommitCheck() {
    if (this.timedAutoCommitManager) {
      this.debugLog("\u63D2\u4EF6\u89E6\u53D1\uFF1A\u7ACB\u5373\u68C0\u67E5\u4E00\u6B21\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4");
      await this.timedAutoCommitManager.triggerImmediateCheck();
    } else {
      this.debugWarn("\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u7BA1\u7406\u5668\u672A\u521D\u59CB\u5316\uFF0C\u65E0\u6CD5\u89E6\u53D1\u68C0\u67E5");
    }
  }
  /**
   * 获取定时自动提交状态
   */
  getTimedCommitStatus() {
    if (this.timedAutoCommitManager) {
      return this.timedAutoCommitManager.getStatus();
    }
    return "\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u7BA1\u7406\u5668\u672A\u521D\u59CB\u5316";
  }
};
var FileSelectionModal = class extends import_obsidian4.Modal {
  constructor(app, files, onSelect) {
    super(app);
    this.files = files;
    this.onSelect = onSelect;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("git-auto-commit-file-selection");
    contentEl.createEl("h2", { text: "\u9009\u62E9\u8981\u63D0\u4EA4\u7684\u6587\u4EF6", cls: "modal-title" });
    const fileList = contentEl.createEl("div", { cls: "file-list" });
    this.files.forEach((file) => {
      const fileItem = fileList.createEl("div", {
        cls: "file-item",
        text: `\u{1F4C4} ${file}`
      });
      fileItem.addEventListener("click", () => {
        this.onSelect(file);
        this.close();
      });
    });
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.onSelect(null);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CommitMessageModal = class extends import_obsidian4.Modal {
  constructor(app, defaultMessage, onSubmit) {
    super(app);
    this.defaultMessage = defaultMessage;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("git-auto-commit-commit-message");
    contentEl.createEl("h2", { text: "\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F", cls: "modal-title" });
    const inputEl = contentEl.createEl("textarea", {
      cls: "commit-input",
      placeholder: "\u8BF7\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F...",
      value: this.defaultMessage || `\u66F4\u65B0\u7B14\u8BB0 - ${new Date().toLocaleString("zh-CN")}`
    });
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    const submitButton = buttonContainer.createEl("button", {
      text: "\u63D0\u4EA4",
      cls: "submit-button"
    });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    submitButton.addEventListener("click", () => {
      const message = inputEl.value.trim();
      if (message) {
        this.onSubmit(message);
        this.close();
      } else {
        new import_obsidian4.Notice("\u8BF7\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F");
      }
    });
    cancelButton.addEventListener("click", () => {
      this.onSubmit(null);
      this.close();
    });
    inputEl.focus();
    inputEl.select();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var GitAutoCommitSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.defaultModelSelector = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("git-auto-commit-settings");
    containerEl.createEl("h2", { text: "Git\u81EA\u52A8\u63D0\u4EA4\u8BBE\u7F6E" });
    const aiSettingsHeader = containerEl.createEl("div", { cls: "ai-settings-header" });
    aiSettingsHeader.style.display = "flex";
    aiSettingsHeader.style.justifyContent = "space-between";
    aiSettingsHeader.style.alignItems = "center";
    aiSettingsHeader.style.marginBottom = "16px";
    const aiTitle = aiSettingsHeader.createEl("h3", { text: "\u{1F916} AI\u8BBE\u7F6E" });
    aiTitle.style.margin = "0";
    const addModelButton = aiSettingsHeader.createEl("button", { text: "\u6DFB\u52A0AI\u6A21\u578B", cls: "mod-cta" });
    addModelButton.addEventListener("click", () => {
      const modal = new ModelManagementModal(this.app, this.plugin.modelManager, () => {
        this.refreshDefaultModelSelector();
      });
      modal.open();
    });
    const defaultModelSetting = new import_obsidian4.Setting(containerEl).setName("\u9ED8\u8BA4\u6A21\u578B").setDesc("\u9009\u62E9\u7528\u4E8E\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u7684\u9ED8\u8BA4AI\u6A21\u578B");
    const selectorContainer = defaultModelSetting.controlEl.createEl("div");
    this.defaultModelSelector = new DefaultModelSelector(
      selectorContainer,
      this.plugin.modelManager,
      (modelId) => {
        console.log("\u9ED8\u8BA4\u6A21\u578B\u5DF2\u5207\u6362:", modelId);
      }
    );
    containerEl.createEl("h3", { text: "\u2699\uFE0F \u9ED8\u8BA4\u884C\u4E3A" });
    new import_obsidian4.Setting(containerEl).setName("\u9ED8\u8BA4\u63D0\u4EA4\u8303\u56F4").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u63D0\u4EA4\u8303\u56F4").addDropdown((dropdown) => dropdown.addOption("all", "\u63D0\u4EA4\u6240\u6709\u6587\u4EF6").addOption("single", "\u63D0\u4EA4\u5355\u4E2A\u6587\u4EF6").setValue(this.plugin.settings.defaultCommitScope).onChange(async (value) => {
      this.plugin.settings.defaultCommitScope = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u9ED8\u8BA4\u63D0\u4EA4\u4FE1\u606F\u7C7B\u578B").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u63D0\u4EA4\u4FE1\u606F\u751F\u6210\u65B9\u5F0F").addDropdown((dropdown) => dropdown.addOption("ai", "AI\u81EA\u52A8\u751F\u6210").addOption("manual", "\u624B\u52A8\u8F93\u5165").setValue(this.plugin.settings.defaultMessageType).onChange(async (value) => {
      this.plugin.settings.defaultMessageType = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u81EA\u52A8\u63D0\u4EA4\u6A21\u5F0F").setDesc("\u5F00\u542F\u540E\u5C06\u4F7F\u7528\u9ED8\u8BA4\u8BBE\u7F6E\u76F4\u63A5\u63D0\u4EA4\uFF0C\u4E0D\u663E\u793A\u9009\u62E9\u754C\u9762").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoCommit).onChange(async (value) => {
      this.plugin.settings.autoCommit = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u663E\u793A\u901A\u77E5").setDesc("\u662F\u5426\u663E\u793A\u64CD\u4F5C\u901A\u77E5").addToggle((toggle) => toggle.setValue(this.plugin.settings.showNotifications).onChange(async (value) => {
      this.plugin.settings.showNotifications = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u{1F4E4} Git\u8BBE\u7F6E" });
    new import_obsidian4.Setting(containerEl).setName("\u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93").setDesc("\u63D0\u4EA4\u540E\u662F\u5426\u81EA\u52A8\u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93").addToggle((toggle) => toggle.setValue(this.plugin.settings.pushToRemote).onChange(async (value) => {
      this.plugin.settings.pushToRemote = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u8FDC\u7A0B\u5206\u652F\u540D\u79F0").setDesc("\u63A8\u9001\u5230\u7684\u8FDC\u7A0B\u5206\u652F\u540D\u79F0").addText((text) => text.setPlaceholder("main").setValue(this.plugin.settings.remoteBranch).onChange(async (value) => {
      this.plugin.settings.remoteBranch = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u{1F4C1} \u6587\u4EF6\u8FC7\u6EE4" });
    new import_obsidian4.Setting(containerEl).setName("\u6392\u9664\u7684\u8DEF\u5F84\u6A21\u5F0F").setDesc("\u8981\u6392\u9664\u7684\u8DEF\u5F84\u6A21\u5F0F\uFF08\u7528\u9017\u53F7\u5206\u9694\uFF09").addText((text) => text.setPlaceholder(".obsidian/,node_modules/,.git/").setValue(this.plugin.settings.excludePatterns.join(",")).onChange(async (value) => {
      this.plugin.settings.excludePatterns = value.split(",").map((s) => s.trim()).filter((s) => s);
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u{1F4E6} \u5206\u6279\u5904\u7406" });
    new import_obsidian4.Setting(containerEl).setName("\u542F\u7528\u667A\u80FD\u5206\u6279\u5904\u7406").setDesc("\u5F53\u53D8\u66F4\u91CF\u8D85\u8FC7\u9650\u5236\u65F6\uFF0C\u81EA\u52A8\u5206\u6279\u63D0\u4EA4\u4EE5\u907F\u514D\u7F13\u51B2\u533A\u6EA2\u51FA\u9519\u8BEF").addToggle((toggle) => toggle.setValue(this.plugin.settings.batchProcessingEnabled).onChange(async (value) => {
      this.plugin.settings.batchProcessingEnabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u5206\u6279\u5927\u5C0F\u9650\u5236 (MB)").setDesc("\u5355\u6B21\u63D0\u4EA4\u7684\u6700\u5927\u6570\u636E\u91CF\u3002\u8D85\u8FC7\u6B64\u9650\u5236\u65F6\u5C06\u81EA\u52A8\u5206\u6279\u5904\u7406 (\u5EFA\u8BAE\u8303\u56F4: 5-50MB)").addSlider((slider) => slider.setLimits(1, 50, 1).setValue(this.plugin.settings.batchSizeLimitMB).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.batchSizeLimitMB = value;
      await this.plugin.saveSettings();
    })).addExtraButton((button) => button.setIcon("info").setTooltip("\u5206\u6279\u5904\u7406\u8BF4\u660E").onClick(() => {
      new import_obsidian4.Notice(
        '\u{1F4E6} \u5206\u6279\u5904\u7406\u529F\u80FD:\n\u2022 \u5F53\u68C0\u6D4B\u5230\u5927\u91CF\u6587\u4EF6\u53D8\u66F4\u65F6\u81EA\u52A8\u5206\u6279\u63D0\u4EA4\n\u2022 \u907F\u514D "maxBuffer exceeded" \u9519\u8BEF\n\u2022 \u6BCF\u4E2A\u6279\u6B21\u90FD\u6709\u72EC\u7ACB\u7684\u63D0\u4EA4\u4FE1\u606F\n\u2022 \u8F83\u5C0F\u7684\u503C\u4F1A\u4EA7\u751F\u66F4\u591A\u6279\u6B21\uFF0C\u4F46\u66F4\u7A33\u5B9A\n\u2022 \u5EFA\u8BAE\u6839\u636E\u4ED3\u5E93\u5927\u5C0F\u8C03\u6574 (\u5C0F\u4ED3\u5E935-10MB\uFF0C\u5927\u4ED3\u5E9320-50MB)',
        8e3
      );
    }));
    containerEl.createEl("h3", { text: "\u23F0 \u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4" });
    new import_obsidian4.Setting(containerEl).setName("\u542F\u7528\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4").setDesc("\u5F00\u542F\u540E\u5C06\u6309\u8BBE\u5B9A\u95F4\u9694\u81EA\u52A8\u6267\u884C\u63D0\u4EA4\u64CD\u4F5C").addToggle((toggle) => toggle.setValue(this.plugin.settings.timedAutoCommit).onChange(async (value) => {
      this.plugin.settings.timedAutoCommit = value;
      await this.plugin.saveSettings();
      this.display();
      if (value) {
        new import_obsidian4.Notice("\u2705 \u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u5DF2\u542F\u7528");
        this.plugin.startTimedAutoCommit();
      } else {
        new import_obsidian4.Notice("\u{1F4F4} \u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u5DF2\u5173\u95ED");
        this.plugin.stopTimedAutoCommit();
      }
    }));
    if (this.plugin.settings.timedAutoCommit) {
      new import_obsidian4.Setting(containerEl).setName("\u81EA\u52A8\u63D0\u4EA4\u95F4\u9694\uFF08\u5206\u949F\uFF09").setDesc("\u8BBE\u7F6E\u81EA\u52A8\u63D0\u4EA4\u7684\u65F6\u95F4\u95F4\u9694\uFF0C\u5EFA\u8BAE\u4E0D\u5C11\u4E8E5\u5206\u949F").addSlider((slider) => slider.setLimits(5, 120, 5).setValue(this.plugin.settings.autoCommitInterval).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.autoCommitInterval = value;
        await this.plugin.saveSettings();
        this.plugin.restartTimedAutoCommit();
      })).addExtraButton((button) => button.setIcon("info").setTooltip("\u95F4\u9694\u65F6\u95F4\u8BF4\u660E").onClick(() => {
        new import_obsidian4.Notice(
          "\u23F0 \u81EA\u52A8\u63D0\u4EA4\u95F4\u9694\u8BF4\u660E:\n\u2022 \u95F4\u9694\u65F6\u95F4\u4ECE\u4E0A\u6B21\u63D0\u4EA4\u6216Obsidian\u542F\u52A8\u65F6\u5F00\u59CB\u8BA1\u7B97\n\u2022 \u5EFA\u8BAE\u8BBE\u7F6E\u4E0D\u5C11\u4E8E5\u5206\u949F\uFF0C\u907F\u514D\u9891\u7E41\u63D0\u4EA4\n\u2022 \u8F83\u957F\u95F4\u9694\u53EF\u51CF\u5C11\u4ED3\u5E93\u5386\u53F2\u8BB0\u5F55\u7684\u788E\u7247\u5316\n\u2022 \u4FEE\u6539\u95F4\u9694\u540E\u4F1A\u7ACB\u5373\u91CD\u542F\u5B9A\u65F6\u5668",
          6e3
        );
      }));
      new import_obsidian4.Setting(containerEl).setName("\u542F\u7528\u7F16\u8F91\u5EF6\u8FDF\u63D0\u4EA4").setDesc("\u5F00\u542F\u540E\uFF0C\u5728\u505C\u6B62\u6587\u4EF6\u7F16\u8F91\u4E00\u6BB5\u65F6\u95F4\u540E\u624D\u6267\u884C\u81EA\u52A8\u63D0\u4EA4").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableEditingDelay).onChange(async (value) => {
        this.plugin.settings.enableEditingDelay = value;
        await this.plugin.saveSettings();
        this.display();
      }));
      if (this.plugin.settings.enableEditingDelay) {
        new import_obsidian4.Setting(containerEl).setName("\u505C\u6B62\u7F16\u8F91\u540E\u5EF6\u8FDF\u65F6\u95F4\uFF08\u5206\u949F\uFF09").setDesc("\u505C\u6B62\u7F16\u8F91\u6587\u4EF6\u540E\u7B49\u5F85\u591A\u957F\u65F6\u95F4\u518D\u6267\u884C\u81EA\u52A8\u63D0\u4EA4").addSlider((slider) => slider.setLimits(1, 30, 1).setValue(this.plugin.settings.editingDelayMinutes).setDynamicTooltip().onChange(async (value) => {
          this.plugin.settings.editingDelayMinutes = value;
          await this.plugin.saveSettings();
        })).addExtraButton((button) => button.setIcon("info").setTooltip("\u7F16\u8F91\u5EF6\u8FDF\u8BF4\u660E").onClick(() => {
          new import_obsidian4.Notice(
            "\u270F\uFE0F \u7F16\u8F91\u5EF6\u8FDF\u529F\u80FD\u8BF4\u660E:\n\u2022 \u68C0\u6D4B\u5230\u6587\u4EF6\u7F16\u8F91\u6D3B\u52A8\u65F6\u4F1A\u5EF6\u8FDF\u81EA\u52A8\u63D0\u4EA4\n\u2022 \u907F\u514D\u5728\u7F16\u8F91\u8FC7\u7A0B\u4E2D\u610F\u5916\u89E6\u53D1\u63D0\u4EA4\n\u2022 \u505C\u6B62\u7F16\u8F91\u540E\u7B49\u5F85\u8BBE\u5B9A\u65F6\u95F4\u518D\u6267\u884C\u63D0\u4EA4\n\u2022 \u5982\u679C\u5173\u95ED\u6B64\u529F\u80FD\uFF0C\u5C06\u4E25\u683C\u6309\u95F4\u9694\u65F6\u95F4\u63D0\u4EA4",
            6e3
          );
        }));
      }
      const statusSetting = new import_obsidian4.Setting(containerEl).setName("\u5F53\u524D\u72B6\u6001").setDesc("\u663E\u793A\u5B9A\u65F6\u81EA\u52A8\u63D0\u4EA4\u7684\u5F53\u524D\u8FD0\u884C\u72B6\u6001");
      const statusEl = statusSetting.controlEl.createEl("div", {
        cls: "timed-commit-status",
        text: this.plugin.getTimedCommitStatus()
      });
      statusEl.style.padding = "8px 12px";
      statusEl.style.backgroundColor = "var(--background-secondary)";
      statusEl.style.borderRadius = "4px";
      statusEl.style.fontFamily = "var(--font-monospace)";
      statusEl.style.fontSize = "0.9em";
      statusSetting.addExtraButton((btn) => btn.setIcon("refresh-ccw").setTooltip("\u5237\u65B0\u72B6\u6001").onClick(() => {
        const text = this.plugin.getTimedCommitStatus();
        statusEl.textContent = text;
        this.plugin.debugLog("\u8BBE\u7F6E\u9762\u677F\uFF1A\u5237\u65B0\u5F53\u524D\u72B6\u6001 =>", text);
        new import_obsidian4.Notice("\u{1F504} \u72B6\u6001\u5DF2\u5237\u65B0");
      })).addExtraButton((btn) => btn.setIcon("zap").setTooltip("\u7ACB\u5373\u68C0\u67E5\u4E00\u6B21").onClick(async () => {
        await this.plugin.triggerTimedAutoCommitCheck();
        statusEl.textContent = this.plugin.getTimedCommitStatus();
        this.plugin.debugLog("\u8BBE\u7F6E\u9762\u677F\uFF1A\u5DF2\u89E6\u53D1\u4E00\u6B21\u7ACB\u5373\u68C0\u67E5");
        new import_obsidian4.Notice("\u26A1 \u5DF2\u89E6\u53D1\u4E00\u6B21\u68C0\u67E5");
      }));
    }
    containerEl.createEl("h3", { text: "\u{1F527} \u8C03\u8BD5\u8BBE\u7F6E" });
    new import_obsidian4.Setting(containerEl).setName("\u542F\u7528\u8C03\u8BD5\u6A21\u5F0F").setDesc("\u5F00\u542F\u540E\u4F1A\u5728\u6D4F\u89C8\u5668\u63A7\u5236\u53F0\u663E\u793A\u8BE6\u7EC6\u7684\u8C03\u8BD5\u4FE1\u606F\uFF0C\u5305\u62ECGit\u64CD\u4F5C\u3001AI\u751F\u6210\u3001\u6309\u94AE\u72B6\u6001\u7B49").addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
      this.plugin.settings.debugMode = value;
      await this.plugin.saveSettings();
      if (value) {
        new import_obsidian4.Notice("\u2705 \u8C03\u8BD5\u6A21\u5F0F\u5DF2\u5F00\u542F\uFF0C\u8BF7\u6253\u5F00\u6D4F\u89C8\u5668\u63A7\u5236\u53F0\u67E5\u770B\u8C03\u8BD5\u4FE1\u606F");
      } else {
        new import_obsidian4.Notice("\u{1F4F4} \u8C03\u8BD5\u6A21\u5F0F\u5DF2\u5173\u95ED");
      }
    }));
    new import_obsidian4.Setting(containerEl).setName("\u91CD\u7F6E\u8BBE\u7F6E").setDesc("\u5C06\u6240\u6709\u8BBE\u7F6E\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C").addButton((button) => button.setButtonText("\u91CD\u7F6E").setWarning().onClick(async () => {
      await this.plugin.dataManager.resetToDefaults();
      await this.plugin.loadSettings();
      this.display();
      new import_obsidian4.Notice("\u2705 \u8BBE\u7F6E\u5DF2\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C");
    }));
  }
  /**
   * 刷新默认模型选择器
   */
  refreshDefaultModelSelector() {
    if (this.defaultModelSelector) {
      this.defaultModelSelector.refresh();
    }
  }
};
