/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GitAutoCommitPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");
var import_child_process = require("child_process");
var import_util = require("util");

// data-manager.ts
var DEFAULT_PLUGIN_DATA = {
  settings: {
    defaultCommitScope: "all",
    defaultMessageType: "ai",
    pushToRemote: true,
    remoteBranch: "main",
    autoCommit: false,
    includeFileTypes: [".md", ".txt", ".canvas", ".json"],
    excludePatterns: [".obsidian/", "node_modules/", ".git/"],
    showNotifications: true
  },
  models: {
    configs: [],
    defaultModelId: null
  },
  preferences: {},
  version: "1.0.0",
  lastModified: Date.now()
};
var DataManager = class {
  constructor(app, pluginDir) {
    this.app = app;
    this.dataFile = `${pluginDir}/plugin-data.json`;
    this.data = { ...DEFAULT_PLUGIN_DATA };
  }
  /**
   * 初始化数据管理器
   */
  async initialize() {
    try {
      await this.loadData();
      await this.migrateOldData();
    } catch (error) {
      console.log("Git Auto Commit - \u6570\u636E\u6587\u4EF6\u4E0D\u5B58\u5728\u6216\u635F\u574F\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u6570\u636E");
      this.data = { ...DEFAULT_PLUGIN_DATA };
      await this.saveData();
    }
  }
  /**
   * 从文件加载数据
   */
  async loadData() {
    try {
      const fileExists = await this.app.vault.adapter.exists(this.dataFile);
      if (!fileExists) {
        console.log("Git Auto Commit - \u6570\u636E\u6587\u4EF6\u4E0D\u5B58\u5728\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u914D\u7F6E");
        this.data = { ...DEFAULT_PLUGIN_DATA };
        return;
      }
      const fileContent = await this.app.vault.adapter.read(this.dataFile);
      const loadedData = JSON.parse(fileContent);
      this.data = this.mergeWithDefaults(loadedData);
      console.log("Git Auto Commit - \u6570\u636E\u52A0\u8F7D\u6210\u529F");
    } catch (error) {
      console.error("Git Auto Commit - \u52A0\u8F7D\u6570\u636E\u5931\u8D25:", error);
      throw error;
    }
  }
  /**
   * 保存数据到文件
   */
  async saveData() {
    try {
      this.data.lastModified = Date.now();
      const jsonContent = JSON.stringify(this.data, null, 2);
      await this.app.vault.adapter.write(this.dataFile, jsonContent);
      console.log("Git Auto Commit - \u6570\u636E\u4FDD\u5B58\u6210\u529F");
    } catch (error) {
      console.error("Git Auto Commit - \u4FDD\u5B58\u6570\u636E\u5931\u8D25:", error);
      throw error;
    }
  }
  /**
   * 合并默认数据，确保数据结构完整
   */
  mergeWithDefaults(loadedData) {
    const merged = { ...DEFAULT_PLUGIN_DATA };
    if (loadedData) {
      if (loadedData.settings) {
        merged.settings = { ...merged.settings, ...loadedData.settings };
      }
      if (loadedData.models) {
        merged.models = {
          configs: loadedData.models.configs || [],
          defaultModelId: loadedData.models.defaultModelId || null
        };
      }
      if (loadedData.preferences) {
        merged.preferences = { ...loadedData.preferences };
      }
      if (loadedData.version) {
        merged.version = loadedData.version;
      }
    }
    return merged;
  }
  /**
   * 从旧的存储方式迁移数据
   */
  async migrateOldData() {
    let hasMigration = false;
    try {
      const oldModels = localStorage.getItem("git-auto-commit-models");
      const oldDefaultModel = localStorage.getItem("git-auto-commit-default-model");
      if (oldModels && this.data.models.configs.length === 0) {
        const parsedModels = JSON.parse(oldModels);
        this.data.models.configs = parsedModels.map((model) => ({
          ...model,
          encodedApiKey: this.encodeApiKey(model.apiKey)
          // 编码API密钥
        }));
        if (oldDefaultModel) {
          this.data.models.defaultModelId = oldDefaultModel;
        }
        hasMigration = true;
        console.log("Git Auto Commit - \u8FC1\u79FB\u4E86\u6A21\u578B\u914D\u7F6E\u6570\u636E");
      }
      if (hasMigration) {
        localStorage.removeItem("git-auto-commit-models");
        localStorage.removeItem("git-auto-commit-default-model");
        await this.saveData();
        console.log("Git Auto Commit - \u6570\u636E\u8FC1\u79FB\u5B8C\u6210\uFF0C\u5DF2\u6E05\u7406\u65E7\u5B58\u50A8");
      }
    } catch (error) {
      console.warn("Git Auto Commit - \u6570\u636E\u8FC1\u79FB\u8FC7\u7A0B\u4E2D\u51FA\u73B0\u9519\u8BEF:", error);
    }
  }
  /**
   * 编码API密钥
   */
  encodeApiKey(apiKey) {
    if (!apiKey)
      return "";
    try {
      return btoa(unescape(encodeURIComponent(apiKey)));
    } catch (error) {
      console.error("Git Auto Commit - API\u5BC6\u94A5\u7F16\u7801\u5931\u8D25:", error);
      return apiKey;
    }
  }
  /**
   * 解码API密钥
   */
  decodeApiKey(encodedApiKey) {
    if (!encodedApiKey)
      return "";
    try {
      return decodeURIComponent(escape(atob(encodedApiKey)));
    } catch (error) {
      console.error("Git Auto Commit - API\u5BC6\u94A5\u89E3\u7801\u5931\u8D25:", error);
      return encodedApiKey;
    }
  }
  // ========== 插件设置相关方法 ==========
  /**
   * 获取插件设置
   */
  getSettings() {
    return { ...this.data.settings };
  }
  /**
   * 更新插件设置
   */
  async updateSettings(newSettings) {
    this.data.settings = { ...this.data.settings, ...newSettings };
    await this.saveData();
  }
  // ========== 模型配置相关方法 ==========
  /**
   * 获取所有模型配置
   */
  getAllModels() {
    return [...this.data.models.configs];
  }
  /**
   * 获取已验证的模型
   */
  getVerifiedModels() {
    return this.data.models.configs.filter((model) => model.isVerified);
  }
  /**
   * 根据ID获取模型
   */
  getModelById(id) {
    return this.data.models.configs.find((model) => model.id === id) || null;
  }
  /**
   * 添加新模型
   */
  async addModel(config) {
    const now = Date.now();
    const newModel = {
      id: this.generateId(),
      ...config,
      encodedApiKey: this.encodeApiKey(config.apiKey),
      isVerified: false,
      createdAt: now,
      lastModified: now
    };
    this.data.models.configs.push(newModel);
    await this.saveData();
    return newModel.id;
  }
  /**
   * 更新模型配置
   */
  async updateModel(id, updates) {
    const index = this.data.models.configs.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    const updateData = { ...updates };
    if (updates.apiKey) {
      updateData.encodedApiKey = this.encodeApiKey(updates.apiKey);
      delete updateData.apiKey;
    }
    this.data.models.configs[index] = {
      ...this.data.models.configs[index],
      ...updateData,
      lastModified: Date.now()
    };
    await this.saveData();
    return true;
  }
  /**
   * 删除模型
   */
  async deleteModel(id) {
    const index = this.data.models.configs.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    this.data.models.configs.splice(index, 1);
    if (this.data.models.defaultModelId === id) {
      this.data.models.defaultModelId = null;
    }
    await this.saveData();
    return true;
  }
  /**
   * 设置默认模型
   */
  async setDefaultModel(id) {
    const model = this.getModelById(id);
    if (!model || !model.isVerified)
      return false;
    this.data.models.defaultModelId = id;
    await this.saveData();
    return true;
  }
  /**
   * 获取默认模型
   */
  getDefaultModel() {
    if (!this.data.models.defaultModelId)
      return null;
    return this.getModelById(this.data.models.defaultModelId);
  }
  /**
   * 获取默认模型ID
   */
  getDefaultModelId() {
    return this.data.models.defaultModelId;
  }
  /**
   * 清空所有模型配置
   */
  async clearAllModels() {
    this.data.models.configs = [];
    this.data.models.defaultModelId = null;
    await this.saveData();
  }
  getPreference(key, defaultValue) {
    return this.data.preferences[key] !== void 0 ? this.data.preferences[key] : defaultValue;
  }
  /**
   * 设置个性化设置
   */
  async setPreference(key, value) {
    this.data.preferences[key] = value;
    await this.saveData();
  }
  /**
   * 删除个性化设置
   */
  async removePreference(key) {
    delete this.data.preferences[key];
    await this.saveData();
  }
  // ========== 工具方法 ==========
  /**
   * 生成唯一ID
   */
  generateId() {
    return "model_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9);
  }
  /**
   * 导出配置
   */
  exportConfig() {
    return JSON.stringify({
      ...this.data,
      exportedAt: Date.now()
    }, null, 2);
  }
  /**
   * 导入配置
   */
  async importConfig(configJson) {
    try {
      const config = JSON.parse(configJson);
      if (!config.models || !Array.isArray(config.models.configs)) {
        return { success: false, error: "\u65E0\u6548\u7684\u914D\u7F6E\u683C\u5F0F", imported: 0 };
      }
      let imported = 0;
      for (const modelConfig of config.models.configs) {
        if (this.isValidModelConfig(modelConfig)) {
          await this.addModel({
            displayName: modelConfig.displayName,
            modelName: modelConfig.modelName,
            provider: modelConfig.provider,
            baseURL: modelConfig.baseURL,
            apiKey: this.decodeApiKey(modelConfig.encodedApiKey),
            // 解码API密钥
            maxContextTokens: modelConfig.maxContextTokens || 32e3,
            maxOutputTokens: modelConfig.maxOutputTokens || 4e3
          });
          imported++;
        }
      }
      if (config.models.defaultModelId && imported > 0) {
        this.data.models.defaultModelId = config.models.defaultModelId;
        await this.saveData();
      }
      return { success: true, imported };
    } catch (error) {
      return { success: false, error: error.message, imported: 0 };
    }
  }
  /**
   * 验证模型配置格式
   */
  isValidModelConfig(config) {
    return config && typeof config.displayName === "string" && typeof config.modelName === "string" && typeof config.provider === "string" && typeof config.baseURL === "string" && typeof config.encodedApiKey === "string" && (typeof config.maxContextTokens === "number" || config.maxContextTokens === void 0) && (typeof config.maxOutputTokens === "number" || config.maxOutputTokens === void 0);
  }
  /**
   * 重置所有数据到初始状态
   */
  async resetToDefaults() {
    this.data = { ...DEFAULT_PLUGIN_DATA };
    this.data.lastModified = Date.now();
    await this.saveData();
    console.log("Git Auto Commit - \u6240\u6709\u6570\u636E\u5DF2\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C");
  }
  /**
   * 删除数据文件（用于测试或彻底重置）
   */
  async deleteDataFile() {
    try {
      const fileExists = await this.app.vault.adapter.exists(this.dataFile);
      if (fileExists) {
        await this.app.vault.adapter.remove(this.dataFile);
        console.log("Git Auto Commit - \u6570\u636E\u6587\u4EF6\u5DF2\u5220\u9664");
      }
      this.data = { ...DEFAULT_PLUGIN_DATA };
    } catch (error) {
      console.error("Git Auto Commit - \u5220\u9664\u6570\u636E\u6587\u4EF6\u5931\u8D25:", error);
      throw error;
    }
  }
  /**
   * 获取数据文件路径（用于调试）
   */
  getDataFilePath() {
    return this.dataFile;
  }
  /**
   * 检查数据文件是否存在
   */
  async dataFileExists() {
    return await this.app.vault.adapter.exists(this.dataFile);
  }
};

// new-model-config-manager.ts
var NewModelConfigManager = class {
  constructor(dataManager) {
    this.dataManager = dataManager;
  }
  // ========== 模型管理方法 ==========
  /**
   * 添加新模型
   */
  async addModel(config) {
    return await this.dataManager.addModel(config);
  }
  /**
   * 更新模型配置
   */
  async updateModel(id, updates) {
    return await this.dataManager.updateModel(id, updates);
  }
  /**
   * 删除模型
   */
  async deleteModel(id) {
    return await this.dataManager.deleteModel(id);
  }
  /**
   * 获取所有模型（解码API密钥）
   */
  getAllModels() {
    const models = this.dataManager.getAllModels();
    return models.map((model) => this.convertToModelConfig(model));
  }
  /**
   * 获取已验证的模型
   */
  getVerifiedModels() {
    const models = this.dataManager.getVerifiedModels();
    return models.map((model) => this.convertToModelConfig(model));
  }
  /**
   * 根据ID获取模型
   */
  getModelById(id) {
    const modelData = this.dataManager.getModelById(id);
    if (!modelData)
      return null;
    return this.convertToModelConfig(modelData);
  }
  /**
   * 设置默认模型
   */
  async setDefaultModel(id) {
    return await this.dataManager.setDefaultModel(id);
  }
  /**
   * 获取默认模型
   */
  getDefaultModel() {
    const modelData = this.dataManager.getDefaultModel();
    if (!modelData)
      return null;
    return this.convertToModelConfig(modelData);
  }
  /**
   * 获取默认模型ID
   */
  getDefaultModelId() {
    return this.dataManager.getDefaultModelId();
  }
  /**
   * 清空所有模型配置
   */
  async clearAllModels() {
    await this.dataManager.clearAllModels();
  }
  // ========== 模型验证和测试方法 ==========
  /**
   * 验证模型配置
   */
  async verifyModel(id) {
    const model = this.getModelById(id);
    if (!model) {
      return { success: false, error: "\u6A21\u578B\u4E0D\u5B58\u5728" };
    }
    try {
      const response = await this.testModelConnection(model);
      if (response.success) {
        await this.updateModel(id, { isVerified: true });
        return { success: true };
      } else {
        await this.updateModel(id, { isVerified: false });
        return { success: false, error: response.error };
      }
    } catch (error) {
      await this.updateModel(id, { isVerified: false });
      return { success: false, error: error.message };
    }
  }
  /**
   * 直接测试模型配置（不添加到管理器）
   */
  async testModelConfig(config) {
    const tempModel = {
      id: "temp",
      ...config,
      isVerified: false,
      createdAt: Date.now(),
      lastModified: Date.now()
    };
    return this.testModelConnection(tempModel);
  }
  /**
   * 测试模型连接
   */
  async testModelConnection(model) {
    var _a;
    try {
      const testMessage = "\u6D4B\u8BD5\u8FDE\u63A5";
      const requestBody = {
        model: model.modelName,
        messages: [
          {
            role: "user",
            content: testMessage
          }
        ],
        max_tokens: 10,
        temperature: 0.1
      };
      const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${model.apiKey}`
      };
      if (model.provider === "qwen") {
        headers["X-DashScope-SSE"] = "disable";
      } else if (model.provider === "openrouter") {
        headers["HTTP-Referer"] = "https://obsidian.md";
        headers["X-Title"] = "Obsidian Git Auto Commit";
      }
      const response = await fetch(`${model.baseURL}/chat/completions`, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody)
      });
      if (response.ok) {
        return { success: true };
      } else {
        const errorData = await response.json().catch(() => ({}));
        return {
          success: false,
          error: `HTTP ${response.status}: ${((_a = errorData.error) == null ? void 0 : _a.message) || response.statusText}`
        };
      }
    } catch (error) {
      return {
        success: false,
        error: `\u8FDE\u63A5\u5931\u8D25: ${error.message}`
      };
    }
  }
  // ========== 配置导入导出方法 ==========
  /**
   * 导出配置
   */
  exportConfig() {
    return this.dataManager.exportConfig();
  }
  /**
   * 导入配置
   */
  async importConfig(configJson) {
    return await this.dataManager.importConfig(configJson);
  }
  // ========== 向后兼容性方法 ==========
  /**
   * 从存储中加载模型配置（保持与旧API兼容）
   */
  loadFromStorage() {
    console.log("Git Auto Commit - \u4F7F\u7528\u65B0\u7684\u6570\u636E\u7BA1\u7406\u5668\uFF0C\u8DF3\u8FC7\u65E7\u7684\u52A0\u8F7D\u65B9\u5F0F");
  }
  /**
   * 保存到存储（保持与旧API兼容）
   */
  saveToStorage() {
    console.log("Git Auto Commit - \u4F7F\u7528\u65B0\u7684\u6570\u636E\u7BA1\u7406\u5668\uFF0C\u81EA\u52A8\u4FDD\u5B58");
  }
  /**
   * 迁移旧配置，为没有token参数的模型添加默认值
   */
  migrateOldConfigs() {
    console.log("Git Auto Commit - \u6570\u636E\u8FC1\u79FB\u7531\u6570\u636E\u7BA1\u7406\u5668\u5904\u7406");
  }
  // ========== 工具方法 ==========
  /**
   * 将ModelConfigData转换为ModelConfig（解码API密钥）
   */
  convertToModelConfig(modelData) {
    return {
      ...modelData,
      apiKey: this.dataManager.decodeApiKey(modelData.encodedApiKey)
    };
  }
  /**
   * 验证模型配置格式
   */
  isValidModelConfig(config) {
    return config && typeof config.displayName === "string" && typeof config.modelName === "string" && typeof config.provider === "string" && typeof config.baseURL === "string" && typeof config.apiKey === "string" && (typeof config.maxContextTokens === "number" || config.maxContextTokens === void 0) && (typeof config.maxOutputTokens === "number" || config.maxOutputTokens === void 0);
  }
};

// ai-settings-components.ts
var import_obsidian = require("obsidian");

// model-config.ts
var PREDEFINED_PROVIDERS = {
  deepseek: {
    name: "DeepSeek",
    defaultBaseURL: "https://api.deepseek.com/v1",
    commonModels: ["deepseek-chat", "deepseek-coder"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Adeepseek-chat"
  },
  zhipu: {
    name: "\u667A\u8C31AI",
    defaultBaseURL: "https://open.bigmodel.cn/api/paas/v4",
    commonModels: ["glm-4-plus", "glm-4", "glm-4-air", "glm-4-flash"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Aglm-4-plus"
  },
  qwen: {
    name: "\u901A\u4E49\u5343\u95EE",
    defaultBaseURL: "https://dashscope.aliyuncs.com/compatible-mode/v1",
    commonModels: ["qwen-plus", "qwen-turbo", "qwen-max", "qwen-max-longcontext"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Aqwen-plus"
  },
  openrouter: {
    name: "OpenRouter",
    defaultBaseURL: "https://openrouter.ai/api/v1",
    commonModels: ["anthropic/claude-3.5-sonnet", "openai/gpt-4o", "meta-llama/llama-3.1-405b-instruct"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Aanthropic/claude-3.5-sonnet"
  },
  custom: {
    name: "\u81EA\u5B9A\u4E49\u6A21\u578B",
    defaultBaseURL: "https://api.openai.com/v1",
    commonModels: ["gpt-4o", "gpt-4o-mini", "gpt-3.5-turbo"],
    modelPlaceholder: "\u4F8B\u5982\uFF1Agpt-4o"
  }
};
var ModelConfigManager = class {
  constructor() {
    this.models = [];
    this.defaultModelId = null;
    this.loadFromStorage();
    this.migrateOldConfigs();
  }
  // 从存储中加载模型配置
  loadFromStorage() {
    try {
      const savedModels = localStorage.getItem("git-auto-commit-models");
      const savedDefaultModel = localStorage.getItem("git-auto-commit-default-model");
      if (savedModels) {
        this.models = JSON.parse(savedModels);
      }
      if (savedDefaultModel) {
        this.defaultModelId = savedDefaultModel;
      }
    } catch (error) {
      console.error("\u52A0\u8F7D\u6A21\u578B\u914D\u7F6E\u5931\u8D25:", error);
      this.models = [];
      this.defaultModelId = null;
    }
  }
  // 保存到存储
  saveToStorage() {
    try {
      localStorage.setItem("git-auto-commit-models", JSON.stringify(this.models));
      if (this.defaultModelId) {
        localStorage.setItem("git-auto-commit-default-model", this.defaultModelId);
      } else {
        localStorage.removeItem("git-auto-commit-default-model");
      }
    } catch (error) {
      console.error("\u4FDD\u5B58\u6A21\u578B\u914D\u7F6E\u5931\u8D25:", error);
    }
  }
  // 迁移旧配置，为没有token参数的模型添加默认值
  migrateOldConfigs() {
    let needsSave = false;
    for (const model of this.models) {
      if (typeof model.maxContextTokens === "undefined") {
        model.maxContextTokens = 32e3;
        needsSave = true;
      }
      if (typeof model.maxOutputTokens === "undefined") {
        model.maxOutputTokens = 4e3;
        needsSave = true;
      }
    }
    if (needsSave) {
      console.log("Git Auto Commit - \u8FC1\u79FB\u4E86", this.models.length, "\u4E2A\u6A21\u578B\u914D\u7F6E");
      this.saveToStorage();
    }
  }
  // 生成唯一ID
  generateId() {
    return "model_" + Date.now() + "_" + Math.random().toString(36).substr(2, 9);
  }
  // 添加新模型
  addModel(config) {
    const now = Date.now();
    const newModel = {
      id: this.generateId(),
      ...config,
      isVerified: false,
      createdAt: now,
      lastModified: now
    };
    this.models.push(newModel);
    this.saveToStorage();
    return newModel.id;
  }
  // 更新模型配置
  updateModel(id, updates) {
    const index = this.models.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    this.models[index] = {
      ...this.models[index],
      ...updates,
      lastModified: Date.now()
    };
    this.saveToStorage();
    return true;
  }
  // 删除模型
  deleteModel(id) {
    const index = this.models.findIndex((model) => model.id === id);
    if (index === -1)
      return false;
    this.models.splice(index, 1);
    if (this.defaultModelId === id) {
      this.defaultModelId = null;
    }
    this.saveToStorage();
    return true;
  }
  // 获取所有模型
  getAllModels() {
    return [...this.models];
  }
  // 获取已验证的模型
  getVerifiedModels() {
    return this.models.filter((model) => model.isVerified);
  }
  // 根据ID获取模型
  getModelById(id) {
    return this.models.find((model) => model.id === id) || null;
  }
  // 设置默认模型
  setDefaultModel(id) {
    const model = this.getModelById(id);
    if (!model || !model.isVerified)
      return false;
    this.defaultModelId = id;
    this.saveToStorage();
    return true;
  }
  // 获取默认模型
  getDefaultModel() {
    if (!this.defaultModelId)
      return null;
    return this.getModelById(this.defaultModelId);
  }
  // 获取默认模型ID
  getDefaultModelId() {
    return this.defaultModelId;
  }
  // 验证模型配置
  async verifyModel(id) {
    const model = this.getModelById(id);
    if (!model) {
      return { success: false, error: "\u6A21\u578B\u4E0D\u5B58\u5728" };
    }
    try {
      const response = await this.testModelConnection(model);
      if (response.success) {
        this.updateModel(id, { isVerified: true });
        return { success: true };
      } else {
        this.updateModel(id, { isVerified: false });
        return { success: false, error: response.error };
      }
    } catch (error) {
      this.updateModel(id, { isVerified: false });
      return { success: false, error: error.message };
    }
  }
  // 直接测试模型配置（不添加到管理器）
  async testModelConfig(config) {
    const tempModel = {
      id: "temp",
      ...config,
      isVerified: false,
      createdAt: Date.now(),
      lastModified: Date.now()
    };
    return this.testModelConnection(tempModel);
  }
  // 测试模型连接
  async testModelConnection(model) {
    var _a;
    try {
      const testMessage = "\u6D4B\u8BD5\u8FDE\u63A5";
      const requestBody = {
        model: model.modelName,
        messages: [
          {
            role: "user",
            content: testMessage
          }
        ],
        max_tokens: 10,
        temperature: 0.1
      };
      const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${model.apiKey}`
      };
      if (model.provider === "qwen") {
        headers["X-DashScope-SSE"] = "disable";
      } else if (model.provider === "openrouter") {
        headers["HTTP-Referer"] = "https://obsidian.md";
        headers["X-Title"] = "Obsidian Git Auto Commit";
      }
      const response = await fetch(`${model.baseURL}/chat/completions`, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody)
      });
      if (response.ok) {
        return { success: true };
      } else {
        const errorData = await response.json().catch(() => ({}));
        return {
          success: false,
          error: `HTTP ${response.status}: ${((_a = errorData.error) == null ? void 0 : _a.message) || response.statusText}`
        };
      }
    } catch (error) {
      return {
        success: false,
        error: `\u8FDE\u63A5\u5931\u8D25: ${error.message}`
      };
    }
  }
  // 清空所有模型配置
  clearAllModels() {
    this.models = [];
    this.defaultModelId = null;
    this.saveToStorage();
  }
  // 导出配置
  exportConfig() {
    return JSON.stringify({
      models: this.models,
      defaultModelId: this.defaultModelId,
      exportedAt: Date.now()
    }, null, 2);
  }
  // 导入配置
  importConfig(configJson) {
    try {
      const config = JSON.parse(configJson);
      if (!config.models || !Array.isArray(config.models)) {
        return { success: false, error: "\u65E0\u6548\u7684\u914D\u7F6E\u683C\u5F0F", imported: 0 };
      }
      let imported = 0;
      for (const modelConfig of config.models) {
        if (this.isValidModelConfig(modelConfig)) {
          this.addModel({
            displayName: modelConfig.displayName,
            modelName: modelConfig.modelName,
            provider: modelConfig.provider,
            baseURL: modelConfig.baseURL,
            apiKey: modelConfig.apiKey,
            maxContextTokens: modelConfig.maxContextTokens || 8e3,
            maxOutputTokens: modelConfig.maxOutputTokens || 4e3
          });
          imported++;
        }
      }
      return { success: true, imported };
    } catch (error) {
      return { success: false, error: error.message, imported: 0 };
    }
  }
  // 验证模型配置格式
  isValidModelConfig(config) {
    return config && typeof config.displayName === "string" && typeof config.modelName === "string" && typeof config.provider === "string" && typeof config.baseURL === "string" && typeof config.apiKey === "string" && (typeof config.maxContextTokens === "number" || config.maxContextTokens === void 0) && (typeof config.maxOutputTokens === "number" || config.maxOutputTokens === void 0);
  }
};
var modelConfigManager = new ModelConfigManager();

// ai-settings-components.ts
var ModelManagementModal = class extends import_obsidian.Modal {
  constructor(app, modelManager, onUpdate) {
    super(app);
    this.modelManager = modelManager;
    this.onUpdate = onUpdate;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("model-management-modal");
    const titleEl = contentEl.createEl("h2", { text: "AI\u6A21\u578B\u7BA1\u7406", cls: "modal-title" });
    titleEl.style.display = "flex";
    titleEl.style.justifyContent = "space-between";
    titleEl.style.alignItems = "center";
    titleEl.style.marginBottom = "20px";
    const addButton = titleEl.createEl("button", { text: "\u6DFB\u52A0AI\u6A21\u578B", cls: "mod-cta" });
    addButton.style.fontSize = "14px";
    addButton.style.padding = "8px 16px";
    addButton.addEventListener("click", () => {
      const addModal = new ModelFormModal(this.app, this.modelManager, null, () => {
        this.refreshModelList();
        this.onUpdate();
      }, this);
      addModal.open();
    });
    this.createModelList(contentEl);
    const buttonContainer = contentEl.createEl("div", { cls: "modal-button-container" });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.textAlign = "right";
    const closeButton = buttonContainer.createEl("button", { text: "\u5173\u95ED" });
    closeButton.addEventListener("click", () => this.close());
  }
  createModelList(containerEl) {
    const listContainer = containerEl.createEl("div", { cls: "model-list-container" });
    listContainer.style.maxHeight = "400px";
    listContainer.style.overflowY = "auto";
    listContainer.style.border = "1px solid var(--background-modifier-border)";
    listContainer.style.borderRadius = "8px";
    listContainer.style.padding = "12px";
    this.refreshModelList();
  }
  refreshModelList() {
    const listContainer = this.contentEl.querySelector(".model-list-container");
    if (!listContainer)
      return;
    listContainer.empty();
    const models = this.modelManager.getAllModels();
    if (models.length === 0) {
      const emptyMessage = listContainer.createEl("div", {
        text: '\u6682\u65E0\u914D\u7F6E\u7684\u6A21\u578B\uFF0C\u70B9\u51FB\u4E0A\u65B9"\u6DFB\u52A0AI\u6A21\u578B"\u6309\u94AE\u5F00\u59CB\u914D\u7F6E',
        cls: "empty-message"
      });
      emptyMessage.style.textAlign = "center";
      emptyMessage.style.color = "var(--text-muted)";
      emptyMessage.style.padding = "40px 20px";
      return;
    }
    models.forEach((model) => {
      this.createModelItem(listContainer, model);
    });
  }
  createModelItem(container, model) {
    var _a;
    const itemEl = container.createEl("div", { cls: "model-item" });
    itemEl.style.display = "flex";
    itemEl.style.justifyContent = "space-between";
    itemEl.style.alignItems = "center";
    itemEl.style.padding = "12px";
    itemEl.style.marginBottom = "8px";
    itemEl.style.border = "1px solid var(--background-modifier-border)";
    itemEl.style.borderRadius = "6px";
    itemEl.style.backgroundColor = "var(--background-secondary)";
    const infoEl = itemEl.createEl("div", { cls: "model-info" });
    const nameEl = infoEl.createEl("div", { cls: "model-name" });
    nameEl.style.fontWeight = "bold";
    nameEl.style.marginBottom = "4px";
    const statusIcon = model.isVerified ? "\u2705" : "\u274C";
    nameEl.textContent = `${statusIcon} ${model.displayName}`;
    const detailsEl = infoEl.createEl("div", { cls: "model-details" });
    detailsEl.style.fontSize = "12px";
    detailsEl.style.color = "var(--text-muted)";
    const contextTokens = model.maxContextTokens ? `${(model.maxContextTokens / 1e3).toFixed(0)}K` : "N/A";
    const outputTokens = model.maxOutputTokens ? `${(model.maxOutputTokens / 1e3).toFixed(0)}K` : "N/A";
    detailsEl.textContent = `${model.modelName} | ${((_a = PREDEFINED_PROVIDERS[model.provider]) == null ? void 0 : _a.name) || model.provider} | \u4E0A\u4E0B\u6587:${contextTokens} \u8F93\u51FA:${outputTokens}`;
    const buttonsEl = itemEl.createEl("div", { cls: "model-buttons" });
    buttonsEl.style.display = "flex";
    buttonsEl.style.gap = "8px";
    const editButton = buttonsEl.createEl("button", { text: "\u8BBE\u7F6E", cls: "mod-small" });
    editButton.addEventListener("click", () => {
      const editModal = new ModelFormModal(this.app, this.modelManager, model, () => {
        this.refreshModelList();
        this.onUpdate();
      }, this);
      editModal.open();
    });
    const deleteButton = buttonsEl.createEl("button", { text: "\u5220\u9664", cls: "mod-small mod-warning" });
    deleteButton.addEventListener("click", async () => {
      await this.modelManager.deleteModel(model.id);
      this.refreshModelList();
      this.onUpdate();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ModelFormModal = class extends import_obsidian.Modal {
  constructor(app, modelManager, model, onSave, parentModal) {
    super(app);
    this.formData = {};
    this.parentModal = null;
    this.baseURLInput = null;
    this.modelNameInput = null;
    this.isNewModelVerified = false;
    this.modelManager = modelManager;
    this.model = model;
    this.onSave = onSave;
    this.parentModal = parentModal || null;
    if (model) {
      this.formData = { ...model };
    } else {
      this.formData = {
        displayName: "",
        modelName: "",
        provider: "deepseek",
        baseURL: PREDEFINED_PROVIDERS.deepseek.defaultBaseURL,
        apiKey: "",
        maxContextTokens: 32e3,
        // 默认32K上下文
        maxOutputTokens: 4e3
        // 默认4K输出
      };
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("model-form-modal");
    this.baseURLInput = null;
    this.modelNameInput = null;
    this.isNewModelVerified = false;
    const title = this.model ? "\u7F16\u8F91\u6A21\u578B\u914D\u7F6E" : "\u6DFB\u52A0\u6A21\u578B\u914D\u7F6E";
    contentEl.createEl("h2", { text: title, cls: "modal-title" });
    const formEl = contentEl.createEl("div", { cls: "model-form" });
    formEl.style.padding = "20px 0";
    this.createFormFields(formEl);
    this.createButtons(contentEl);
  }
  createFormFields(container) {
    const displayNameSetting = new import_obsidian.Setting(container).setName("\u663E\u793A\u540D\u79F0").setDesc("\u4E3A\u6B64\u6A21\u578B\u8BBE\u7F6E\u4E00\u4E2A\u81EA\u5B9A\u4E49\u540D\u79F0").addText((text) => {
      text.setPlaceholder("\u4F8B\u5982\uFF1A\u6211\u7684DeepSeek\u6A21\u578B").setValue(this.formData.displayName || "").onChange((value) => {
        this.formData.displayName = value;
      });
    });
    const modelNameSetting = new import_obsidian.Setting(container).setName("\u6A21\u578B\u578B\u53F7").setDesc("\u8F93\u5165\u5177\u4F53\u7684\u6A21\u578B\u578B\u53F7\u540D\u79F0").addText((text) => {
      text.setPlaceholder(this.getModelPlaceholder()).setValue(this.formData.modelName || "").onChange((value) => {
        this.formData.modelName = value;
      });
      this.modelNameInput = text.inputEl;
    });
    const providerSetting = new import_obsidian.Setting(container).setName("AI\u63D0\u4F9B\u5546").setDesc("\u9009\u62E9AI\u670D\u52A1\u63D0\u4F9B\u5546").addDropdown((dropdown) => {
      Object.entries(PREDEFINED_PROVIDERS).forEach(([key, provider]) => {
        dropdown.addOption(key, provider.name);
      });
      dropdown.setValue(this.formData.provider || "deepseek").onChange((value) => {
        var _a;
        this.formData.provider = value;
        this.formData.baseURL = ((_a = PREDEFINED_PROVIDERS[value]) == null ? void 0 : _a.defaultBaseURL) || "";
        this.updateProviderRelatedFields();
      });
    });
    const baseURLSetting = new import_obsidian.Setting(container).setName("\u57FA\u7840URL").setDesc("API\u670D\u52A1\u7684\u57FA\u7840URL\u5730\u5740").addText((text) => {
      text.setPlaceholder("https://api.example.com/v1").setValue(this.formData.baseURL || "").onChange((value) => {
        this.formData.baseURL = value;
      });
      this.baseURLInput = text.inputEl;
    });
    const apiKeySetting = new import_obsidian.Setting(container).setName("API\u5BC6\u94A5").setDesc("\u8F93\u5165\u60A8\u7684API\u5BC6\u94A5").addText((text) => {
      text.setPlaceholder("sk-...").setValue(this.formData.apiKey || "").onChange((value) => {
        this.formData.apiKey = value;
      });
      text.inputEl.type = "password";
    });
    const maxContextSetting = new import_obsidian.Setting(container).setName("\u6700\u5927\u4E0A\u4E0B\u6587\u957F\u5EA6").setDesc("\u6A21\u578B\u652F\u6301\u7684\u6700\u5927\u4E0A\u4E0B\u6587\u4EE4\u724C\u6570\uFF08\u4F8B\u5982\uFF1A32000\u8868\u793A32K\uFF09").addText((text) => {
      var _a;
      text.setPlaceholder("32000").setValue(((_a = this.formData.maxContextTokens) == null ? void 0 : _a.toString()) || "32000").onChange((value) => {
        const numValue = parseInt(value);
        if (!isNaN(numValue) && numValue > 0) {
          this.formData.maxContextTokens = numValue;
        }
      });
      text.inputEl.type = "number";
      text.inputEl.min = "1000";
      text.inputEl.step = "1000";
    });
    const maxOutputSetting = new import_obsidian.Setting(container).setName("\u6700\u5927\u8F93\u51FA\u4EE4\u724C\u6570").setDesc("\u6A21\u578B\u5355\u6B21\u8F93\u51FA\u7684\u6700\u5927\u4EE4\u724C\u6570\uFF08\u4F8B\u5982\uFF1A4000\u8868\u793A4K\uFF09").addText((text) => {
      var _a;
      text.setPlaceholder("4000").setValue(((_a = this.formData.maxOutputTokens) == null ? void 0 : _a.toString()) || "4000").onChange((value) => {
        const numValue = parseInt(value);
        if (!isNaN(numValue) && numValue > 0) {
          this.formData.maxOutputTokens = numValue;
        }
      });
      text.inputEl.type = "number";
      text.inputEl.min = "100";
      text.inputEl.step = "100";
    });
  }
  createButtons(container) {
    const buttonContainer = container.createEl("div", { cls: "modal-button-container" });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "space-between";
    buttonContainer.style.gap = "10px";
    const leftButtons = buttonContainer.createEl("div");
    const verifyButton = leftButtons.createEl("button", { text: "\u9A8C\u8BC1", cls: "mod-cta verify-model-btn" });
    verifyButton.addEventListener("click", () => this.verifyModel());
    const rightButtons = buttonContainer.createEl("div");
    rightButtons.style.display = "flex";
    rightButtons.style.gap = "10px";
    const saveButton = rightButtons.createEl("button", { text: "\u4FDD\u5B58", cls: "mod-cta" });
    saveButton.addEventListener("click", () => this.saveModel());
    const cancelButton = rightButtons.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => this.close());
  }
  getModelPlaceholder() {
    var _a;
    const provider = this.formData.provider || "deepseek";
    return ((_a = PREDEFINED_PROVIDERS[provider]) == null ? void 0 : _a.modelPlaceholder) || "\u8F93\u5165\u6A21\u578B\u578B\u53F7";
  }
  updateProviderRelatedFields() {
    if (this.baseURLInput) {
      this.baseURLInput.value = this.formData.baseURL || "";
    }
    if (this.modelNameInput) {
      this.modelNameInput.placeholder = this.getModelPlaceholder();
    }
  }
  async verifyModel() {
    if (!this.validateForm())
      return;
    const verifyButton = this.contentEl.querySelector(".verify-model-btn");
    if (verifyButton) {
      verifyButton.textContent = "\u9A8C\u8BC1\u4E2D...";
      verifyButton.disabled = true;
    }
    try {
      let result;
      if (this.model) {
        await this.modelManager.updateModel(this.model.id, {
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3,
          isVerified: false
        });
        result = await this.modelManager.verifyModel(this.model.id);
      } else {
        result = await this.modelManager.testModelConfig({
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3
        });
      }
      if (result.success) {
        new import_obsidian.Notice("\u2705 \u6A21\u578B\u9A8C\u8BC1\u6210\u529F\uFF01");
        if (this.model) {
          this.model.isVerified = true;
          this.model.displayName = this.formData.displayName;
          this.model.modelName = this.formData.modelName;
          this.model.provider = this.formData.provider;
          this.model.baseURL = this.formData.baseURL;
          this.model.apiKey = this.formData.apiKey;
          this.model.maxContextTokens = this.formData.maxContextTokens || 32e3;
          this.model.maxOutputTokens = this.formData.maxOutputTokens || 4e3;
        } else {
          this.isNewModelVerified = true;
        }
        if (this.parentModal) {
          this.parentModal.refreshModelList();
        }
      } else {
        new import_obsidian.Notice(`\u274C \u6A21\u578B\u9A8C\u8BC1\u5931\u8D25\uFF1A${result.error}`);
        if (this.model) {
          this.model.isVerified = false;
        } else {
          this.isNewModelVerified = false;
        }
      }
    } catch (error) {
      new import_obsidian.Notice(`\u274C \u9A8C\u8BC1\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF\uFF1A${error.message}`);
      if (this.model) {
        this.model.isVerified = false;
      } else {
        this.isNewModelVerified = false;
      }
    } finally {
      const verifyButton2 = this.contentEl.querySelector(".verify-model-btn");
      if (verifyButton2) {
        verifyButton2.textContent = "\u9A8C\u8BC1";
        verifyButton2.disabled = false;
      }
    }
  }
  async saveModel() {
    if (!this.validateForm())
      return;
    try {
      if (this.model) {
        const originalModel = this.modelManager.getModelById(this.model.id);
        const hasKeyChanges = originalModel && (originalModel.modelName !== this.formData.modelName || originalModel.provider !== this.formData.provider || originalModel.baseURL !== this.formData.baseURL || originalModel.apiKey !== this.formData.apiKey);
        let finalVerifiedStatus;
        if (hasKeyChanges && this.model.isVerified === (originalModel == null ? void 0 : originalModel.isVerified)) {
          finalVerifiedStatus = false;
        } else {
          finalVerifiedStatus = this.model.isVerified;
        }
        await this.modelManager.updateModel(this.model.id, {
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3,
          isVerified: finalVerifiedStatus
        });
      } else {
        const modelId = await this.modelManager.addModel({
          displayName: this.formData.displayName,
          modelName: this.formData.modelName,
          provider: this.formData.provider,
          baseURL: this.formData.baseURL,
          apiKey: this.formData.apiKey,
          maxContextTokens: this.formData.maxContextTokens || 32e3,
          maxOutputTokens: this.formData.maxOutputTokens || 4e3
        });
        if (this.isNewModelVerified) {
          await this.modelManager.updateModel(modelId, { isVerified: true });
        }
      }
      if (this.parentModal) {
        this.parentModal.refreshModelList();
      }
      this.onSave();
      this.close();
    } catch (error) {
      new import_obsidian.Notice(`\u4FDD\u5B58\u5931\u8D25\uFF1A${error.message}`);
    }
  }
  validateForm() {
    var _a;
    const required = ["displayName", "modelName", "provider", "baseURL", "apiKey"];
    for (const field of required) {
      if (!((_a = this.formData[field]) == null ? void 0 : _a.trim())) {
        const fieldNames = {
          displayName: "\u663E\u793A\u540D\u79F0",
          modelName: "\u6A21\u578B\u578B\u53F7",
          provider: "AI\u63D0\u4F9B\u5546",
          baseURL: "\u57FA\u7840URL",
          apiKey: "API\u5BC6\u94A5"
        };
        new import_obsidian.Notice(`\u8BF7\u586B\u5199${fieldNames[field]}`);
        return false;
      }
    }
    if (!this.formData.maxContextTokens || this.formData.maxContextTokens < 1e3) {
      new import_obsidian.Notice("\u6700\u5927\u4E0A\u4E0B\u6587\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E1000");
      return false;
    }
    if (!this.formData.maxOutputTokens || this.formData.maxOutputTokens < 100) {
      new import_obsidian.Notice("\u6700\u5927\u8F93\u51FA\u4EE4\u724C\u6570\u4E0D\u80FD\u5C11\u4E8E100");
      return false;
    }
    return true;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.baseURLInput = null;
    this.modelNameInput = null;
  }
};
var DefaultModelSelector = class {
  constructor(container, modelManager, onModelChange) {
    this.container = container;
    this.modelManager = modelManager;
    this.onModelChange = onModelChange;
    this.render();
  }
  render() {
    this.container.empty();
    this.selectEl = this.container.createEl("select", { cls: "dropdown" });
    this.selectEl.style.width = "100%";
    this.selectEl.style.padding = "8px";
    this.selectEl.style.borderRadius = "4px";
    this.selectEl.style.border = "1px solid var(--background-modifier-border)";
    this.selectEl.style.backgroundColor = "var(--background-primary)";
    this.updateOptions();
    this.selectEl.addEventListener("change", async () => {
      const selectedValue = this.selectEl.value;
      const modelId = selectedValue === "" ? null : selectedValue;
      if (modelId) {
        await this.modelManager.setDefaultModel(modelId);
      }
      this.onModelChange(modelId);
    });
  }
  updateOptions() {
    if (!this.selectEl)
      return;
    this.selectEl.innerHTML = "";
    const defaultOption = this.selectEl.createEl("option", { value: "", text: "\u8BF7\u9009\u62E9\u9ED8\u8BA4\u6A21\u578B" });
    const verifiedModels = this.modelManager.getVerifiedModels();
    if (verifiedModels.length === 0) {
      const noModelOption = this.selectEl.createEl("option", {
        value: "",
        text: "\u6682\u65E0\u53EF\u7528\u6A21\u578B\uFF08\u8BF7\u5148\u6DFB\u52A0\u5E76\u9A8C\u8BC1\u6A21\u578B\uFF09"
      });
      noModelOption.disabled = true;
      this.selectEl.disabled = true;
    } else {
      this.selectEl.disabled = false;
      verifiedModels.forEach((model) => {
        const option = this.selectEl.createEl("option", {
          value: model.id,
          text: model.displayName
        });
      });
    }
    const defaultModelId = this.modelManager.getDefaultModelId();
    if (defaultModelId) {
      this.selectEl.value = defaultModelId;
    }
  }
  // 外部调用以更新选项
  refresh() {
    this.updateOptions();
  }
};

// data-migration-modal.ts
var import_obsidian2 = require("obsidian");
var DataMigrationModal = class extends import_obsidian2.Modal {
  constructor(app, dataManager, hasOldData) {
    super(app);
    this.dataManager = dataManager;
    this.hasOldData = hasOldData;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("data-migration-modal");
    if (this.hasOldData) {
      this.showMigrationCompleteView(contentEl);
    } else {
      this.showNewDataSystemView(contentEl);
    }
  }
  showMigrationCompleteView(container) {
    const titleEl = container.createEl("h2", {
      text: "\u{1F389} \u6570\u636E\u8FC1\u79FB\u5B8C\u6210\uFF01",
      cls: "modal-title"
    });
    titleEl.style.color = "var(--color-green)";
    titleEl.style.textAlign = "center";
    titleEl.style.marginBottom = "20px";
    const contentDiv = container.createEl("div", { cls: "migration-content" });
    contentDiv.style.padding = "20px";
    contentDiv.style.lineHeight = "1.6";
    contentDiv.createEl("p", {
      text: "\u60A8\u7684\u65E7\u914D\u7F6E\u6570\u636E\u5DF2\u6210\u529F\u8FC1\u79FB\u5230\u65B0\u7684\u6570\u636E\u5B58\u50A8\u7CFB\u7EDF\uFF01"
    });
    const changesTitle = contentDiv.createEl("h3", { text: "\u{1F4CB} \u4E3B\u8981\u6539\u53D8" });
    changesTitle.style.marginTop = "20px";
    changesTitle.style.marginBottom = "10px";
    const changesList = contentDiv.createEl("ul");
    changesList.style.paddingLeft = "20px";
    const changes = [
      "\u{1F512} API\u5BC6\u94A5\u73B0\u5728\u5DF2\u52A0\u5BC6\u5B58\u50A8\uFF0C\u66F4\u52A0\u5B89\u5168",
      "\u{1F4C1} \u6240\u6709\u914D\u7F6E\u6570\u636E\u4FDD\u5B58\u5728\u72EC\u7ACB\u7684 plugin-data.json \u6587\u4EF6\u4E2D",
      "\u{1F9F9} \u5DF2\u6E05\u7406 localStorage \u4E2D\u7684\u65E7\u6570\u636E",
      "\u{1F680} \u63D2\u4EF6\u5206\u4EAB\u66F4\u65B9\u4FBF\uFF0C\u53EA\u9700\u590D\u5236\u6838\u5FC3\u6587\u4EF6"
    ];
    changes.forEach((change) => {
      const li = changesList.createEl("li");
      li.textContent = change;
      li.style.marginBottom = "8px";
    });
    const locationTitle = contentDiv.createEl("h3", { text: "\u{1F4CD} \u6570\u636E\u6587\u4EF6\u4F4D\u7F6E" });
    locationTitle.style.marginTop = "20px";
    locationTitle.style.marginBottom = "10px";
    const locationCode = contentDiv.createEl("code", {
      text: this.dataManager.getDataFilePath()
    });
    locationCode.style.backgroundColor = "var(--background-secondary)";
    locationCode.style.padding = "8px 12px";
    locationCode.style.borderRadius = "4px";
    locationCode.style.display = "block";
    locationCode.style.marginBottom = "15px";
    const reminderDiv = contentDiv.createEl("div", { cls: "reminder-box" });
    reminderDiv.style.backgroundColor = "var(--background-modifier-border)";
    reminderDiv.style.border = "1px solid var(--color-accent)";
    reminderDiv.style.borderRadius = "8px";
    reminderDiv.style.padding = "15px";
    reminderDiv.style.marginTop = "20px";
    const reminderTitle = reminderDiv.createEl("h4", { text: "\u{1F4A1} \u5206\u4EAB\u63D2\u4EF6\u65F6" });
    reminderTitle.style.color = "var(--color-accent)";
    reminderTitle.style.marginBottom = "10px";
    reminderDiv.createEl("p", {
      text: "\u73B0\u5728\u60A8\u53EF\u4EE5\u5B89\u5168\u5730\u5206\u4EAB\u63D2\u4EF6\uFF0C\u53EA\u9700\u590D\u5236\u4EE5\u4E0B\u4E09\u4E2A\u6587\u4EF6\uFF1A"
    });
    const filesList = reminderDiv.createEl("ul");
    ["main.js", "styles.css", "manifest.json"].forEach((file) => {
      const li = filesList.createEl("li");
      li.textContent = file;
    });
    reminderDiv.createEl("p", {
      text: "\u4E0D\u8981\u590D\u5236 plugin-data.json \u6587\u4EF6\uFF0C\u8FD9\u6837\u5176\u4ED6\u4EBA\u4F1A\u83B7\u5F97\u4E00\u4E2A\u5E72\u51C0\u7684\u521D\u59CB\u72B6\u6001\u63D2\u4EF6\u3002",
      cls: "text-muted"
    });
    this.addButtons(container, "\u6211\u77E5\u9053\u4E86");
  }
  showNewDataSystemView(container) {
    const titleEl = container.createEl("h2", {
      text: "\u{1F195} \u65B0\u7684\u6570\u636E\u5B58\u50A8\u7CFB\u7EDF",
      cls: "modal-title"
    });
    titleEl.style.color = "var(--color-accent)";
    titleEl.style.textAlign = "center";
    titleEl.style.marginBottom = "20px";
    const contentDiv = container.createEl("div", { cls: "new-system-content" });
    contentDiv.style.padding = "20px";
    contentDiv.style.lineHeight = "1.6";
    contentDiv.createEl("p", {
      text: "\u6B22\u8FCE\u4F7F\u7528 Git \u81EA\u52A8\u63D0\u4EA4\u63D2\u4EF6\uFF01\u6211\u4EEC\u4F7F\u7528\u4E86\u5168\u65B0\u7684\u6570\u636E\u5B58\u50A8\u7CFB\u7EDF\uFF0C\u8BA9\u60A8\u7684\u914D\u7F6E\u66F4\u5B89\u5168\u3001\u66F4\u6613\u7BA1\u7406\u3002"
    });
    const featuresTitle = contentDiv.createEl("h3", { text: "\u2728 \u4E3B\u8981\u7279\u6027" });
    featuresTitle.style.marginTop = "20px";
    featuresTitle.style.marginBottom = "10px";
    const featuresList = contentDiv.createEl("ul");
    featuresList.style.paddingLeft = "20px";
    const features = [
      "\u{1F510} API\u5BC6\u94A5\u52A0\u5BC6\u5B58\u50A8\uFF0C\u4FDD\u62A4\u60A8\u7684\u9690\u79C1",
      "\u{1F4C1} \u72EC\u7ACB\u6570\u636E\u6587\u4EF6\uFF0C\u914D\u7F6E\u4E0E\u4EE3\u7801\u5206\u79BB",
      "\u{1F504} \u81EA\u52A8\u6570\u636E\u5907\u4EFD\u548C\u6062\u590D",
      "\u{1F4E4} \u7B80\u5316\u7684\u63D2\u4EF6\u5206\u4EAB\u6D41\u7A0B",
      "\u{1F39B}\uFE0F \u7075\u6D3B\u7684\u4E2A\u6027\u5316\u8BBE\u7F6E\u9009\u9879"
    ];
    features.forEach((feature) => {
      const li = featuresList.createEl("li");
      li.textContent = feature;
      li.style.marginBottom = "8px";
    });
    const startTitle = contentDiv.createEl("h3", { text: "\u{1F680} \u5F00\u59CB\u4F7F\u7528" });
    startTitle.style.marginTop = "20px";
    startTitle.style.marginBottom = "10px";
    const startList = contentDiv.createEl("ol");
    startList.style.paddingLeft = "20px";
    const steps = [
      "\u5728\u8BBE\u7F6E\u4E2D\u6DFB\u52A0\u60A8\u7684\u7B2C\u4E00\u4E2AAI\u6A21\u578B",
      "\u914D\u7F6E\u6A21\u578B\u7684API\u5BC6\u94A5\u548C\u53C2\u6570",
      "\u9A8C\u8BC1\u6A21\u578B\u8FDE\u63A5\u662F\u5426\u6B63\u5E38",
      "\u8BBE\u7F6E\u4E3A\u9ED8\u8BA4\u6A21\u578B\u5F00\u59CB\u4F7F\u7528"
    ];
    steps.forEach((step) => {
      const li = startList.createEl("li");
      li.textContent = step;
      li.style.marginBottom = "8px";
    });
    const tipDiv = contentDiv.createEl("div", { cls: "tip-box" });
    tipDiv.style.backgroundColor = "var(--background-secondary)";
    tipDiv.style.border = "1px solid var(--color-green)";
    tipDiv.style.borderRadius = "8px";
    tipDiv.style.padding = "15px";
    tipDiv.style.marginTop = "20px";
    const tipTitle = tipDiv.createEl("h4", { text: "\u{1F4A1} \u5C0F\u63D0\u793A" });
    tipTitle.style.color = "var(--color-green)";
    tipTitle.style.marginBottom = "10px";
    tipDiv.createEl("p", {
      text: '\u60A8\u53EF\u4EE5\u968F\u65F6\u4F7F\u7528"\u8C03\u8BD5\u6570\u636E\u72B6\u6001"\u547D\u4EE4\u6765\u67E5\u770B\u5F53\u524D\u7684\u914D\u7F6E\u72B6\u6001\uFF0C\u6216\u4F7F\u7528"\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E"\u547D\u4EE4\u6062\u590D\u5230\u521D\u59CB\u72B6\u6001\u3002'
    });
    this.addButtons(container, "\u5F00\u59CB\u914D\u7F6E");
  }
  addButtons(container, primaryButtonText) {
    const buttonContainer = container.createEl("div", { cls: "modal-button-container" });
    buttonContainer.style.marginTop = "30px";
    buttonContainer.style.textAlign = "center";
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.justifyContent = "center";
    const primaryButton = buttonContainer.createEl("button", {
      text: primaryButtonText,
      cls: "mod-cta"
    });
    primaryButton.style.padding = "10px 20px";
    primaryButton.addEventListener("click", () => {
      this.close();
    });
    const detailsButton = buttonContainer.createEl("button", {
      text: "\u67E5\u770B\u8BE6\u7EC6\u8BF4\u660E"
    });
    detailsButton.style.padding = "10px 20px";
    detailsButton.addEventListener("click", () => {
      this.showDetailedInfo();
    });
  }
  showDetailedInfo() {
    const info = `
# Git \u81EA\u52A8\u63D0\u4EA4\u63D2\u4EF6 - \u6570\u636E\u5B58\u50A8\u8BF4\u660E

## \u6570\u636E\u6587\u4EF6\u4F4D\u7F6E
${this.dataManager.getDataFilePath()}

## \u4E3B\u8981\u6539\u8FDB
1. **\u5B89\u5168\u6027**: API\u5BC6\u94A5\u4F7F\u7528Base64\u7F16\u7801\u5B58\u50A8
2. **\u72EC\u7ACB\u6027**: \u914D\u7F6E\u6570\u636E\u4E0E\u63D2\u4EF6\u4EE3\u7801\u5B8C\u5168\u5206\u79BB  
3. **\u4FBF\u643A\u6027**: \u66F4\u5BB9\u6613\u5206\u4EAB\u548C\u5907\u4EFD\u63D2\u4EF6
4. **\u53EF\u7EF4\u62A4\u6027**: \u6E05\u6670\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u4FBF\u4E8E\u7BA1\u7406

## \u91CD\u7F6E\u8BF4\u660E
- \u5220\u9664\u6570\u636E\u6587\u4EF6\u5373\u53EF\u91CD\u7F6E\u4E3A\u521D\u59CB\u72B6\u6001
- \u53EF\u4F7F\u7528"\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E"\u547D\u4EE4
- \u63D2\u4EF6\u4F1A\u81EA\u52A8\u521B\u5EFA\u65B0\u7684\u9ED8\u8BA4\u914D\u7F6E

## \u8C03\u8BD5\u5DE5\u5177
- "\u8C03\u8BD5AI\u914D\u7F6E": \u67E5\u770B\u6A21\u578B\u914D\u7F6E\u72B6\u6001
- "\u8C03\u8BD5\u6570\u636E\u72B6\u6001": \u67E5\u770B\u5B8C\u6574\u6570\u636E\u72B6\u6001
- "\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E": \u6062\u590D\u521D\u59CB\u72B6\u6001

\u66F4\u591A\u8BE6\u7EC6\u4FE1\u606F\u8BF7\u67E5\u770B\u63D2\u4EF6\u76EE\u5F55\u4E2D\u7684 DATA_STORAGE.md \u6587\u4EF6\u3002
        `;
    navigator.clipboard.writeText(info).then(() => {
      new import_obsidian2.Notice("\u8BE6\u7EC6\u8BF4\u660E\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F");
    }).catch(() => {
      console.log("Git Auto Commit - \u8BE6\u7EC6\u8BF4\u660E:", info);
      new import_obsidian2.Notice("\u8BE6\u7EC6\u8BF4\u660E\u5DF2\u8F93\u51FA\u5230\u63A7\u5236\u53F0\uFF0C\u8BF7\u6309F12\u67E5\u770B");
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DataMigrationChecker = class {
  static async checkAndShowMigrationIfNeeded(app, dataManager) {
    try {
      const hasOldModels = localStorage.getItem("git-auto-commit-models") !== null;
      const hasOldDefaultModel = localStorage.getItem("git-auto-commit-default-model") !== null;
      const hasOldData = hasOldModels || hasOldDefaultModel;
      const dataFileExists = await dataManager.dataFileExists();
      const isFirstRun = !dataFileExists && !hasOldData;
      if (hasOldData || isFirstRun) {
        const modal = new DataMigrationModal(app, dataManager, hasOldData);
        modal.open();
      }
    } catch (error) {
      console.warn("Git Auto Commit - \u8FC1\u79FB\u68C0\u67E5\u5931\u8D25:", error);
    }
  }
};

// main.ts
var execAsync = (0, import_util.promisify)(import_child_process.exec);
var GitAutoCommitPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    this.dataManager = new DataManager(this.app, this.manifest.dir || "");
    await this.dataManager.initialize();
    this.modelManager = new NewModelConfigManager(this.dataManager);
    await this.loadSettings();
    await DataMigrationChecker.checkAndShowMigrationIfNeeded(this.app, this.dataManager);
    this.addRibbonIcon("upload", "Git\u81EA\u52A8\u63D0\u4EA4", (evt) => {
      this.performGitCommit();
    });
    this.addCommand({
      id: "git-auto-commit",
      name: "\u6267\u884CGit\u63D0\u4EA4",
      callback: () => {
        this.performGitCommit();
      }
    });
    this.addCommand({
      id: "git-commit-current-file",
      name: "\u63D0\u4EA4\u5F53\u524D\u6587\u4EF6",
      callback: () => {
        this.performGitCommit("current");
      }
    });
    this.addCommand({
      id: "git-commit-all-files",
      name: "\u63D0\u4EA4\u6240\u6709\u6587\u4EF6",
      callback: () => {
        this.performGitCommit("all");
      }
    });
    this.addCommand({
      id: "debug-ai-config",
      name: "\u8C03\u8BD5AI\u914D\u7F6E",
      callback: () => {
        this.debugAIConfig();
      }
    });
    this.addCommand({
      id: "debug-data-status",
      name: "\u8C03\u8BD5\u6570\u636E\u72B6\u6001",
      callback: () => {
        this.debugDataStatus();
      }
    });
    this.addCommand({
      id: "reset-plugin-data",
      name: "\u91CD\u7F6E\u63D2\u4EF6\u6570\u636E",
      callback: async () => {
        await this.resetPluginData();
      }
    });
    this.addSettingTab(new GitAutoCommitSettingTab(this.app, this));
    console.log("Git Auto Commit \u63D2\u4EF6\u5DF2\u52A0\u8F7D - \u4F7F\u7528\u65B0\u7684\u6570\u636E\u5B58\u50A8\u7CFB\u7EDF");
  }
  onunload() {
    console.log("Git Auto Commit \u63D2\u4EF6\u5DF2\u5378\u8F7D");
  }
  async loadSettings() {
    this.settings = this.dataManager.getSettings();
  }
  async saveSettings() {
    await this.dataManager.updateSettings(this.settings);
  }
  async performGitCommit(scope) {
    try {
      if (!await this.validateRepository()) {
        return;
      }
      let commitScope = scope || this.settings.defaultCommitScope;
      let filesToCommit = [];
      if (commitScope === "current") {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
          new import_obsidian3.Notice("\u274C \u6CA1\u6709\u6253\u5F00\u7684\u6587\u4EF6");
          return;
        }
        filesToCommit = [activeFile.path];
        commitScope = "single";
      } else if (commitScope === "single" && !this.settings.autoCommit) {
        const modifiedFiles = await this.getModifiedFiles();
        if (modifiedFiles.length === 0) {
          new import_obsidian3.Notice("\u6CA1\u6709\u4FEE\u6539\u7684\u6587\u4EF6\u9700\u8981\u63D0\u4EA4");
          return;
        }
        const selectedFile = await this.showFileSelectionModal(modifiedFiles);
        if (!selectedFile)
          return;
        filesToCommit = [selectedFile];
      }
      let messageType = this.settings.defaultMessageType;
      let commitMessage = "";
      if (messageType === "ai") {
        const defaultModel = this.modelManager.getDefaultModel();
        console.log("Git Auto Commit - \u9ED8\u8BA4\u6A21\u578B:", defaultModel);
        if (!defaultModel) {
          new import_obsidian3.Notice("\u274C \u672A\u914D\u7F6E\u9ED8\u8BA4AI\u6A21\u578B\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E");
          console.error("Git Auto Commit - \u672A\u627E\u5230\u9ED8\u8BA4\u6A21\u578B");
          return;
        }
        if (!defaultModel.isVerified) {
          new import_obsidian3.Notice("\u274C \u9ED8\u8BA4AI\u6A21\u578B\u672A\u9A8C\u8BC1\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u9A8C\u8BC1\u6A21\u578B\u914D\u7F6E");
          console.error("Git Auto Commit - \u9ED8\u8BA4\u6A21\u578B\u672A\u9A8C\u8BC1:", defaultModel);
          return;
        }
        if (this.settings.showNotifications) {
          new import_obsidian3.Notice("\u6B63\u5728\u4F7F\u7528AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F...");
        }
        console.log("Git Auto Commit - \u5F00\u59CB\u751F\u6210AI\u63D0\u4EA4\u4FE1\u606F...");
        commitMessage = await this.generateCommitMessageWithAI(filesToCommit);
        console.log("Git Auto Commit - AI\u751F\u6210\u7684\u63D0\u4EA4\u4FE1\u606F:", commitMessage);
        if (!this.settings.autoCommit) {
          const userMessage = await this.showCommitMessageModal(commitMessage);
          if (!userMessage)
            return;
          commitMessage = userMessage;
        }
      } else {
        if (this.settings.autoCommit) {
          commitMessage = `\u66F4\u65B0\u7B14\u8BB0 - ${new Date().toLocaleString("zh-CN")}`;
        } else {
          const userMessage = await this.showCommitMessageModal();
          if (!userMessage)
            return;
          commitMessage = userMessage;
        }
      }
      await this.executeGitOperations(filesToCommit, commitMessage);
      if (this.settings.showNotifications) {
        new import_obsidian3.Notice("\u2705 Git\u63D0\u4EA4\u5B8C\u6210\uFF01");
      }
    } catch (error) {
      console.error("Git\u63D0\u4EA4\u5931\u8D25:", error);
      new import_obsidian3.Notice(`\u274C Git\u63D0\u4EA4\u5931\u8D25: ${error.message}`);
    }
  }
  async validateRepository() {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      await execAsync("git rev-parse --git-dir", { cwd: vaultPath });
      return true;
    } catch (error) {
      new import_obsidian3.Notice("\u274C \u5F53\u524D\u76EE\u5F55\u4E0D\u662FGit\u4ED3\u5E93\uFF0C\u8BF7\u5148\u521D\u59CB\u5316Git\u4ED3\u5E93");
      return false;
    }
  }
  async getModifiedFiles() {
    try {
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      const { stdout } = await execAsync("git status --porcelain", { cwd: vaultPath });
      if (!stdout.trim()) {
        return [];
      }
      return stdout.split("\n").filter((line) => line.trim()).map((line) => line.substring(3)).filter((file) => {
        const hasValidExtension = this.settings.includeFileTypes.some(
          (ext) => file.endsWith(ext)
        );
        if (!hasValidExtension)
          return false;
        const isExcluded = this.settings.excludePatterns.some(
          (pattern) => file.includes(pattern)
        );
        return !isExcluded;
      });
    } catch (error) {
      console.error("\u83B7\u53D6\u4FEE\u6539\u6587\u4EF6\u5217\u8868\u5931\u8D25:", error);
      return [];
    }
  }
  async generateCommitMessageWithAI(filesToCommit) {
    try {
      console.log("Git Auto Commit - generateCommitMessageWithAI \u5F00\u59CB\u6267\u884C");
      const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
      console.log("Git Auto Commit - \u5DE5\u4F5C\u76EE\u5F55:", vaultPath);
      if (filesToCommit.length > 0) {
        console.log("Git Auto Commit - \u6DFB\u52A0\u6307\u5B9A\u6587\u4EF6\u5230\u6682\u5B58\u533A:", filesToCommit);
        for (const file of filesToCommit) {
          await execAsync(`git add "${file}"`, { cwd: vaultPath });
        }
      } else {
        console.log("Git Auto Commit - \u6DFB\u52A0\u6240\u6709\u6587\u4EF6\u5230\u6682\u5B58\u533A");
        await execAsync("git add .", { cwd: vaultPath });
      }
      const { stdout: gitDiff } = await execAsync("git diff --cached --name-status", { cwd: vaultPath });
      const { stdout: gitDiffContent } = await execAsync("git diff --cached", { cwd: vaultPath });
      console.log("Git Auto Commit - Git diff \u72B6\u6001:", gitDiff);
      console.log("Git Auto Commit - Git diff \u5185\u5BB9\u957F\u5EA6:", gitDiffContent.length);
      if (!gitDiff.trim()) {
        console.log("Git Auto Commit - \u6CA1\u6709\u68C0\u6D4B\u5230\u6587\u4EF6\u53D8\u66F4\uFF0C\u4F7F\u7528\u9ED8\u8BA4\u63D0\u4EA4\u4FE1\u606F");
        return "\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9";
      }
      const fileChanges = this.parseFileChanges(gitDiff);
      const fileCount = fileChanges.length;
      console.log("Git Auto Commit - \u89E3\u6790\u5230\u7684\u6587\u4EF6\u53D8\u66F4:", fileChanges);
      const contextInfo = this.buildContextInfo(fileChanges, gitDiffContent);
      console.log("Git Auto Commit - \u4E0A\u4E0B\u6587\u4FE1\u606F:", contextInfo);
      const systemPrompt = this.buildDynamicPrompt(fileCount);
      console.log("Git Auto Commit - \u7CFB\u7EDF\u63D0\u793A\u8BCD\u957F\u5EA6:", systemPrompt.length);
      console.log("Git Auto Commit - \u5F00\u59CB\u8C03\u7528AI API...");
      const response = await this.callAIProvider(systemPrompt, contextInfo, fileCount);
      console.log("Git Auto Commit - API\u54CD\u5E94\u72B6\u6001:", response.status, response.statusText);
      if (!response.ok) {
        const defaultModel = this.modelManager.getDefaultModel();
        const providerName = defaultModel ? defaultModel.displayName : "AI\u6A21\u578B";
        const errorText = await response.text();
        console.error("Git Auto Commit - API\u8BF7\u6C42\u5931\u8D25:", response.status, errorText);
        throw new Error(`${providerName} API\u8BF7\u6C42\u5931\u8D25: ${response.status} - ${errorText}`);
      }
      const data = await response.json();
      console.log("Git Auto Commit - API\u54CD\u5E94\u6570\u636E:", data);
      console.log("Git Auto Commit - choices\u6570\u7EC4:", data.choices);
      if (data.choices && data.choices[0]) {
        console.log("Git Auto Commit - \u7B2C\u4E00\u4E2Achoice:", data.choices[0]);
        console.log("Git Auto Commit - message\u5BF9\u8C61:", data.choices[0].message);
      }
      if (!data.choices || !data.choices[0]) {
        console.error("Git Auto Commit - API\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF:", data);
        throw new Error("API\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF\uFF1A\u7F3A\u5C11choices\u6570\u7EC4");
      }
      let aiMessage = "";
      const choice = data.choices[0];
      console.log("Git Auto Commit - choice\u7684\u6240\u6709\u5C5E\u6027:", Object.keys(choice));
      if (choice.message) {
        console.log("Git Auto Commit - message\u7684\u6240\u6709\u5C5E\u6027:", Object.keys(choice.message));
        console.log("Git Auto Commit - message\u5185\u5BB9:", choice.message);
      }
      const isReasoningModelByName = this.isReasoningModelByName();
      if (isReasoningModelByName) {
        console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\uFF08\u57FA\u4E8E\u6A21\u578B\u540D\u79F0\uFF09\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848");
        aiMessage = this.extractFinalAnswerFromReasoning(choice);
      } else {
        const isReasoningModelByResponse = this.isReasoningModelByResponse(choice);
        if (isReasoningModelByResponse) {
          console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\uFF08\u57FA\u4E8E\u54CD\u5E94\u7ED3\u6784\uFF09\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848");
          aiMessage = this.extractFinalAnswerFromReasoning(choice);
        } else {
          if (choice.message && choice.message.content) {
            const content = choice.message.content;
            if (this.containsReasoningContent(content)) {
              console.log("Git Auto Commit - \u5185\u5BB9\u5305\u542B\u63A8\u7406\u8FC7\u7A0B\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848");
              aiMessage = this.extractFinalAnswerFromContent(content);
            } else {
              aiMessage = content;
              console.log("Git Auto Commit - \u4ECEmessage.content\u63D0\u53D6\u5185\u5BB9");
            }
          } else if (choice.delta && choice.delta.content) {
            aiMessage = choice.delta.content;
            console.log("Git Auto Commit - \u4ECEdelta.content\u63D0\u53D6\u5185\u5BB9");
          } else if (choice.text) {
            aiMessage = choice.text;
            console.log("Git Auto Commit - \u4ECEtext\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
          } else if (choice.content) {
            aiMessage = choice.content;
            console.log("Git Auto Commit - \u4ECEcontent\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
          } else if (choice.message && Object.keys(choice.message).length > 0) {
            console.log("Git Auto Commit - \u5C1D\u8BD5\u4ECEmessage\u7684\u5176\u4ED6\u5C5E\u6027\u63D0\u53D6\u5185\u5BB9");
            for (const [key, value] of Object.entries(choice.message)) {
              if (typeof value === "string" && value.trim() && key !== "reasoning") {
                if (this.containsReasoningContent(value)) {
                  console.log(`Git Auto Commit - message.${key}\u5305\u542B\u63A8\u7406\u8FC7\u7A0B\uFF0C\u5C1D\u8BD5\u63D0\u53D6\u6700\u7EC8\u7B54\u6848`);
                  aiMessage = this.extractFinalAnswerFromContent(value);
                } else {
                  aiMessage = value;
                  console.log(`Git Auto Commit - \u4ECEmessage.${key}\u63D0\u53D6\u5185\u5BB9`);
                }
                if (aiMessage)
                  break;
              }
            }
          } else {
            console.warn("Git Auto Commit - \u65E0\u6CD5\u4ECEAPI\u54CD\u5E94\u4E2D\u63D0\u53D6\u6D88\u606F\u5185\u5BB9");
            console.log("Git Auto Commit - \u5B8C\u6574\u7684choice\u5BF9\u8C61:", JSON.stringify(choice, null, 2));
            aiMessage = "";
          }
        }
      }
      aiMessage = aiMessage.trim();
      console.log("Git Auto Commit - AI\u539F\u59CB\u6D88\u606F:", aiMessage);
      console.log("Git Auto Commit - AI\u539F\u59CB\u6D88\u606F\u957F\u5EA6:", aiMessage.length);
      if (!aiMessage) {
        console.warn("Git Auto Commit - AI\u8FD4\u56DE\u7A7A\u5185\u5BB9\uFF0C\u751F\u6210\u57FA\u4E8E\u6587\u4EF6\u53D8\u66F4\u7684\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F");
        if (isReasoningModelByName || this.isReasoningModelByResponse(choice)) {
          console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\uFF0C\u4F7F\u7528\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F");
          new import_obsidian3.Notice("\u26A0\uFE0F \u63A8\u7406\u6A21\u578B\u4E0D\u9002\u5408\u751F\u6210\u7B80\u77ED\u7684\u63D0\u4EA4\u4FE1\u606F\uFF0C\u5DF2\u81EA\u52A8\u751F\u6210\u57FA\u4E8E\u6587\u4EF6\u53D8\u66F4\u7684\u63CF\u8FF0");
        }
        const basicMessage = this.generateBasicCommitMessage(fileChanges);
        console.log("Git Auto Commit - \u57FA\u672C\u63D0\u4EA4\u4FE1\u606F:", basicMessage);
        return basicMessage;
      }
      const finalMessage = this.formatCommitMessage(aiMessage);
      console.log("Git Auto Commit - \u683C\u5F0F\u5316\u540E\u7684\u63D0\u4EA4\u4FE1\u606F:", finalMessage);
      return finalMessage;
    } catch (error) {
      console.error("Git Auto Commit - AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u5931\u8D25:", error);
      new import_obsidian3.Notice(`\u274C AI\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u5931\u8D25: ${error.message}`);
      try {
        const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
        const { stdout: gitDiff } = await execAsync("git diff --cached --name-status", { cwd: vaultPath });
        if (gitDiff.trim()) {
          const fileChanges = this.parseFileChanges(gitDiff);
          const basicMessage = this.generateBasicCommitMessage(fileChanges);
          console.log("Git Auto Commit - \u4F7F\u7528\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F\u4F5C\u4E3A\u5907\u7528:", basicMessage);
          return basicMessage;
        }
      } catch (fallbackError) {
        console.error("Git Auto Commit - \u751F\u6210\u57FA\u672C\u63D0\u4EA4\u4FE1\u606F\u4E5F\u5931\u8D25:", fallbackError);
      }
      return `\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9 - ${new Date().toLocaleString("zh-CN")}`;
    }
  }
  /**
   * 基于模型名称检测是否是推理模型
   */
  isReasoningModelByName() {
    const defaultModel = this.modelManager.getDefaultModel();
    if (defaultModel && defaultModel.modelName) {
      const modelName = defaultModel.modelName.toLowerCase();
      const openaiReasoningModels = ["o1", "o1-preview", "o1-mini", "o3", "o3-mini"];
      for (const model of openaiReasoningModels) {
        if (modelName.includes(model)) {
          console.log(`Git Auto Commit - \u68C0\u6D4B\u5230OpenAI\u63A8\u7406\u6A21\u578B: ${model}`);
          return true;
        }
      }
      if (modelName.includes("glm") && (modelName.includes("think") || modelName.includes("reasoning") || modelName.includes("cot"))) {
        console.log(`Git Auto Commit - \u68C0\u6D4B\u5230\u667A\u8C31AI\u63A8\u7406\u6A21\u578B: ${modelName}`);
        return true;
      }
      if (modelName.includes("deepseek") && (modelName.includes("r1") || modelName.includes("reasoner"))) {
        console.log(`Git Auto Commit - \u68C0\u6D4B\u5230DeepSeek\u63A8\u7406\u6A21\u578B: ${modelName}`);
        return true;
      }
      const reasoningKeywords = ["reasoner", "reasoning", "think", "cot", "chain-of-thought"];
      for (const keyword of reasoningKeywords) {
        if (modelName.includes(keyword)) {
          console.log(`Git Auto Commit - \u6A21\u578B\u540D\u79F0\u5305\u542B\u63A8\u7406\u5173\u952E\u8BCD"${keyword}"\uFF0C\u5224\u5B9A\u4E3A\u63A8\u7406\u6A21\u578B`);
          return true;
        }
      }
    }
    return false;
  }
  /**
   * 基于响应结构检测是否是推理模型
   */
  isReasoningModelByResponse(choice) {
    if (choice.message && choice.message.reasoning) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230OpenAI\u63A8\u7406\u6A21\u578B\u5B57\u6BB5: reasoning");
      return true;
    }
    if (choice.message && choice.message.reasoning_content) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u667A\u8C31AI\u63A8\u7406\u6A21\u578B\u5B57\u6BB5: reasoning_content");
      return true;
    }
    if (choice.message && choice.message.thinking) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\u5B57\u6BB5: thinking");
      return true;
    }
    if (choice.finish_reason && choice.finish_reason.includes("reasoning")) {
      console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u63A8\u7406\u6A21\u578B\u5B8C\u6210\u539F\u56E0\u6807\u8BB0");
      return true;
    }
    return false;
  }
  /**
   * 检测内容是否包含推理过程特征
   */
  containsReasoningContent(content) {
    if (!content || typeof content !== "string") {
      return false;
    }
    const lowerContent = content.toLowerCase();
    const reasoningPhrases = [
      "\u8BA9\u6211\u5206\u6790",
      "\u8BA9\u6211\u6765\u5206\u6790",
      "\u8BA9\u6211\u601D\u8003",
      "\u9996\u5148\u5206\u6790",
      "\u6211\u6765\u5206\u6790",
      "\u8BA9\u6211\u770B\u770B",
      "\u8BA9\u6211\u68C0\u67E5",
      "\u5206\u6790\u4E00\u4E0B",
      "\u6211\u9700\u8981\u5206\u6790",
      "\u4ECE\u63D0\u4F9B\u7684",
      "\u6839\u636E\u63D0\u4F9B\u7684",
      "\u6211\u5206\u6790",
      "\u8BA9\u6211\u4EEC\u5206\u6790",
      "\u9996\u5148\uFF0C\u8BA9\u6211",
      "\u8BA9\u6211\u7406\u89E3"
    ];
    for (const phrase of reasoningPhrases) {
      if (lowerContent.includes(phrase)) {
        console.log(`Git Auto Commit - \u5185\u5BB9\u5305\u542B\u63A8\u7406\u77ED\u8BED"${phrase}"\uFF0C\u5224\u5B9A\u4E3A\u63A8\u7406\u5185\u5BB9`);
        return true;
      }
    }
    if (lowerContent.includes("### ") || lowerContent.includes("## ")) {
      console.log("Git Auto Commit - \u5185\u5BB9\u5305\u542B\u5206\u6BB5\u7ED3\u6784\uFF0C\u53EF\u80FD\u662F\u63A8\u7406\u8FC7\u7A0B");
      return true;
    }
    return false;
  }
  /**
   * 从推理模型的响应中提取最终答案
   */
  extractFinalAnswerFromReasoning(choice) {
    console.log("Git Auto Commit - \u63A8\u7406\u6A21\u578B\u54CD\u5E94\u7ED3\u6784:", JSON.stringify(choice, null, 2));
    let content = "";
    let isReasoningContent = false;
    if (choice.message) {
      if (choice.message.reasoning) {
        console.log("Git Auto Commit - \u68C0\u6D4B\u5230OpenAI\u63A8\u7406\u6A21\u578B\u683C\u5F0F(reasoning\u5B57\u6BB5)");
        content = choice.message.reasoning;
        isReasoningContent = true;
      } else if (choice.message.reasoning_content) {
        console.log("Git Auto Commit - \u68C0\u6D4B\u5230\u667A\u8C31AI\u63A8\u7406\u6A21\u578B\u683C\u5F0F(reasoning_content\u5B57\u6BB5)");
        content = choice.message.reasoning_content;
        isReasoningContent = true;
      } else if (choice.message.content) {
        console.log("Git Auto Commit - \u4F7F\u7528\u6807\u51C6content\u5B57\u6BB5");
        content = choice.message.content;
        isReasoningContent = this.containsReasoningContent(content);
      }
    } else if (choice.text) {
      content = choice.text;
      isReasoningContent = this.containsReasoningContent(content);
      console.log("Git Auto Commit - \u4ECEtext\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
    } else if (choice.content) {
      content = choice.content;
      isReasoningContent = this.containsReasoningContent(content);
      console.log("Git Auto Commit - \u4ECEcontent\u5B57\u6BB5\u63D0\u53D6\u5185\u5BB9");
    }
    if (!content) {
      console.log("Git Auto Commit - \u63A8\u7406\u6A21\u578B\u54CD\u5E94\u4E2D\u672A\u627E\u5230\u53EF\u63D0\u53D6\u7684\u5185\u5BB9");
      return "";
    }
    console.log(
      "Git Auto Commit - \u63D0\u53D6\u5230\u7684\u5185\u5BB9\u957F\u5EA6:",
      content.length,
      "\u662F\u63A8\u7406\u5185\u5BB9:",
      isReasoningContent
    );
    if (isReasoningContent) {
      return this.extractFinalAnswerFromContent(content);
    } else {
      return this.formatCommitMessage(content);
    }
  }
  /**
   * 从包含推理过程的内容中提取最终答案
   */
  extractFinalAnswerFromContent(content) {
    if (!content || typeof content !== "string") {
      return "";
    }
    console.log("Git Auto Commit - \u5F00\u59CB\u4ECE\u63A8\u7406\u5185\u5BB9\u4E2D\u63D0\u53D6\u6700\u7EC8\u7B54\u6848\uFF0C\u5185\u5BB9\u957F\u5EA6:", content.length);
    const finalAnswerPatterns = [
      // 查找"最终答案"、"最终建议"等明确标记
      /(?:最终答案|最终建议|最终提交信息|建议的提交信息|推荐的提交信息)[:：]\s*([\s\S]*?)(?=\n\n|$)/gi,
      // 查找代码块中的答案
      /```(?:git|commit)?\s*((?:(?!```)[\s\S])*?)\s*```/gi,
      // 查找通用代码块
      /```\s*((?:(?!```)[\s\S])*?)\s*```/gi,
      // 查找结论性语句
      /(?:因此|所以|综上|总结|结论)[:：，,]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|$)/gi
    ];
    for (const pattern of finalAnswerPatterns) {
      try {
        const matches = content.matchAll(pattern);
        for (const match of matches) {
          if (match[1]) {
            const extracted = match[1].trim();
            if (this.isValidCommitMessage(extracted)) {
              console.log("Git Auto Commit - \u4ECE\u660E\u786E\u7B54\u6848\u6807\u8BB0\u4E2D\u63D0\u53D6\u5230\u6709\u6548\u63D0\u4EA4\u4FE1\u606F");
              return this.formatCommitMessage(extracted);
            }
          }
        }
      } catch (error) {
        console.warn("Git Auto Commit - \u6B63\u5219\u5339\u914D\u9519\u8BEF:", error);
        continue;
      }
    }
    const commitTypePattern = /((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n(?:\s*-\s*[^\n]*|\s*\*\s*[^\n]*|\s{2,}[^\n]*)*)*)/gi;
    try {
      const commitMatches = [...content.matchAll(commitTypePattern)];
      if (commitMatches.length > 0) {
        const lastMatch = commitMatches[commitMatches.length - 1];
        if (lastMatch && lastMatch[1]) {
          const extracted = lastMatch[1].trim();
          if (this.isValidCommitMessage(extracted) && extracted.length > 20) {
            console.log("Git Auto Commit - \u4ECE\u63D0\u4EA4\u7C7B\u578B\u6A21\u5F0F\u4E2D\u63D0\u53D6\u5230\u6709\u6548\u63D0\u4EA4\u4FE1\u606F");
            return this.formatCommitMessage(extracted);
          }
        }
      }
    } catch (error) {
      console.warn("Git Auto Commit - \u63D0\u4EA4\u7C7B\u578B\u5339\u914D\u9519\u8BEF:", error);
    }
    const suggestionPatterns = [
      /建议[:：]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|建议|因此|所以|$)/gi,
      /推荐[:：]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|建议|因此|所以|$)/gi,
      /可以写为[:：]\s*((?:feat|fix|docs|style|refactor|chore|test|perf):\s*[^\n]*(?:\n[\s\S]*?)?)(?=\n\n|建议|因此|所以|$)/gi
    ];
    for (const pattern of suggestionPatterns) {
      try {
        const matches = content.matchAll(pattern);
        for (const match of matches) {
          if (match[1]) {
            const extracted = match[1].trim();
            if (this.isValidCommitMessage(extracted)) {
              console.log("Git Auto Commit - \u4ECE\u5EFA\u8BAE\u6027\u8BED\u53E5\u4E2D\u63D0\u53D6\u5230\u6709\u6548\u63D0\u4EA4\u4FE1\u606F");
              return this.formatCommitMessage(extracted);
            }
          }
        }
      } catch (error) {
        console.warn("Git Auto Commit - \u5EFA\u8BAE\u6027\u8BED\u53E5\u5339\u914D\u9519\u8BEF:", error);
        continue;
      }
    }
    console.log("Git Auto Commit - \u672A\u627E\u5230\u660E\u786E\u7684\u6700\u7EC8\u7B54\u6848\uFF0C\u5C1D\u8BD5\u4ECE\u63A8\u7406\u5185\u5BB9\u751F\u6210\u63D0\u4EA4\u4FE1\u606F");
    return this.generateCommitFromReasoning(content);
  }
  /**
   * 检测内容是否被截断
   */
  isContentTruncated(content) {
    if (!content)
      return false;
    const trimmedContent = content.trim();
    const lastChar = trimmedContent.slice(-1);
    const truncationIndicators = ["-", "\u8FD9", "\u3001", "\u662F", "\u7684", "\u4E86", "\u548C", "\u6216", "\u7B49"];
    return truncationIndicators.includes(lastChar) || trimmedContent.endsWith("...") || trimmedContent.length < 50;
  }
  /**
   * 生成备用的基本提交信息
   */
  generateFallbackCommitMessage(content) {
    const lowerContent = content.toLowerCase();
    if (lowerContent.includes("\u5220\u9664") || lowerContent.includes("\u79FB\u9664")) {
      return "chore: \u6E05\u7406\u548C\u5220\u9664\u6587\u4EF6";
    } else if (lowerContent.includes("\u65B0\u589E") || lowerContent.includes("\u6DFB\u52A0") || lowerContent.includes("\u521B\u5EFA")) {
      return "feat: \u6DFB\u52A0\u65B0\u6587\u4EF6\u548C\u529F\u80FD";
    } else if (lowerContent.includes("\u4FEE\u6539") || lowerContent.includes("\u66F4\u65B0") || lowerContent.includes("\u6539\u52A8")) {
      return "docs: \u66F4\u65B0\u6587\u6863\u548C\u914D\u7F6E\u6587\u4EF6";
    } else if (lowerContent.includes("\u91CD\u6784") || lowerContent.includes("\u4F18\u5316")) {
      return "refactor: \u91CD\u6784\u4EE3\u7801\u7ED3\u6784";
    } else if (lowerContent.includes("\u4FEE\u590D") || lowerContent.includes("\u4FEE\u6B63")) {
      return "fix: \u4FEE\u590D\u95EE\u9898";
    } else if (lowerContent.includes("\u683C\u5F0F") || lowerContent.includes("\u6837\u5F0F")) {
      return "style: \u8C03\u6574\u683C\u5F0F\u548C\u6837\u5F0F";
    }
    return "chore: \u66F4\u65B0\u9879\u76EE\u6587\u4EF6";
  }
  /**
   * 基于推理内容生成合适的提交信息
   */
  generateCommitFromReasoning(content) {
    console.log("Git Auto Commit - \u5F00\u59CB\u57FA\u4E8E\u63A8\u7406\u5185\u5BB9\u751F\u6210\u63D0\u4EA4\u4FE1\u606F");
    const lowerContent = content.toLowerCase();
    let commitType = "chore";
    let description = "\u66F4\u65B0\u9879\u76EE\u6587\u4EF6";
    let details = [];
    const fileMatches = content.match(/(?:新增|添加|创建|删除|移除|修改|更新)(?:了)?(?:\s*[:：]?\s*)?([^\n，。,;；]*)/gi);
    if (fileMatches) {
      fileMatches.forEach((match) => {
        const cleanMatch = match.replace(/^(?:新增|添加|创建|删除|移除|修改|更新)(?:了)?(?:\s*[:：]?\s*)?/, "").trim();
        if (cleanMatch && cleanMatch.length > 0 && cleanMatch.length < 50) {
          details.push(cleanMatch);
        }
      });
    }
    if (lowerContent.includes("\u5220\u9664") || lowerContent.includes("\u79FB\u9664")) {
      commitType = "chore";
      if (lowerContent.includes("\u6587\u6863") || lowerContent.includes("markdown") || lowerContent.includes(".md")) {
        description = "\u6E05\u7406\u9879\u76EE\u6587\u6863";
      } else if (lowerContent.includes("\u914D\u7F6E") || lowerContent.includes("\u63D2\u4EF6") || lowerContent.includes("\u8F85\u52A9\u5DE5\u5177")) {
        description = "\u79FB\u9664\u8F85\u52A9\u5DE5\u5177\u6587\u4EF6";
      } else if (details.length > 0) {
        description = `\u6E05\u7406${details[0]}\u7B49\u6587\u4EF6`;
      } else {
        description = "\u6E05\u7406\u9879\u76EE\u6587\u4EF6";
      }
    } else if (lowerContent.includes("\u65B0\u589E") || lowerContent.includes("\u6DFB\u52A0") || lowerContent.includes("\u521B\u5EFA")) {
      commitType = "feat";
      if (lowerContent.includes("\u6587\u6863") || lowerContent.includes("markdown")) {
        description = "\u6DFB\u52A0\u9879\u76EE\u6587\u6863";
      } else if (lowerContent.includes("\u529F\u80FD") || lowerContent.includes("\u7279\u6027")) {
        description = "\u6DFB\u52A0\u65B0\u529F\u80FD";
      } else if (details.length > 0) {
        description = `\u6DFB\u52A0${details[0]}\u7B49\u6587\u4EF6`;
      } else {
        description = "\u6DFB\u52A0\u65B0\u5185\u5BB9";
      }
    } else if (lowerContent.includes("\u4FEE\u6539") || lowerContent.includes("\u66F4\u65B0")) {
      if (lowerContent.includes("\u6587\u6863") || lowerContent.includes("markdown")) {
        commitType = "docs";
        description = "\u66F4\u65B0\u9879\u76EE\u6587\u6863";
      } else if (lowerContent.includes("\u914D\u7F6E")) {
        commitType = "chore";
        description = "\u66F4\u65B0\u914D\u7F6E\u6587\u4EF6";
      } else if (lowerContent.includes("\u529F\u80FD")) {
        commitType = "feat";
        description = "\u66F4\u65B0\u529F\u80FD";
      } else if (details.length > 0) {
        commitType = "feat";
        description = `\u66F4\u65B0${details[0]}`;
      } else {
        commitType = "feat";
        description = "\u66F4\u65B0\u5185\u5BB9";
      }
    } else if (lowerContent.includes("\u4FEE\u590D") || lowerContent.includes("\u4FEE\u6B63")) {
      commitType = "fix";
      description = "\u4FEE\u590D\u95EE\u9898";
    } else if (lowerContent.includes("\u91CD\u6784") || lowerContent.includes("\u4F18\u5316")) {
      commitType = "refactor";
      description = "\u91CD\u6784\u4EE3\u7801";
    } else if (lowerContent.includes("\u683C\u5F0F") || lowerContent.includes("\u6837\u5F0F")) {
      commitType = "style";
      description = "\u8C03\u6574\u683C\u5F0F";
    }
    let result = `${commitType}: ${description}`;
    if (details.length > 0 && details.length <= 3) {
      result += "\n\n";
      details.forEach((detail) => {
        if (detail.trim()) {
          result += `- ${detail.trim()}
`;
        }
      });
      result = result.trim();
    } else if (details.length > 3) {
      result += `

- \u5305\u542B${details.length}\u4E2A\u6587\u4EF6\u7684\u53D8\u66F4`;
    }
    console.log("Git Auto Commit - \u57FA\u4E8E\u63A8\u7406\u5185\u5BB9\u751F\u6210\u63D0\u4EA4\u4FE1\u606F:", result);
    return result;
  }
  /**
   * 验证提取的内容是否像一个有效的提交信息
   */
  isValidCommitMessage(message) {
    if (!message || message.length < 5) {
      return false;
    }
    const commitTypes = ["feat", "fix", "docs", "style", "refactor", "chore", "test", "perf"];
    const hasCommitType = commitTypes.some(
      (type) => message.toLowerCase().startsWith(type + ":") || message.toLowerCase().includes(type + ":")
    );
    if (hasCommitType) {
      return true;
    }
    const commitVerbs = ["\u65B0\u589E", "\u4FEE\u6539", "\u5220\u9664", "\u66F4\u65B0", "\u91CD\u6784", "\u6DFB\u52A0", "\u79FB\u9664", "\u4F18\u5316", "\u4FEE\u590D"];
    const hasCommitVerb = commitVerbs.some((verb) => message.includes(verb));
    if (hasCommitVerb && message.length > 10) {
      return true;
    }
    const reasoningIndicators = ["\u8BA9\u6211", "\u6211\u6765", "\u5206\u6790", "\u9996\u5148", "\u7136\u540E", "\u63A5\u4E0B\u6765", "\u6839\u636E"];
    const hasReasoningIndicator = reasoningIndicators.some(
      (indicator) => message.startsWith(indicator)
    );
    return !hasReasoningIndicator;
  }
  /**
   * 生成基于文件变更的基本提交信息
   */
  generateBasicCommitMessage(fileChanges) {
    if (fileChanges.length === 0) {
      return "\u66F4\u65B0\u6587\u4EF6\u5185\u5BB9";
    }
    if (fileChanges.length === 1) {
      const change = fileChanges[0];
      return `${change.status} ${change.file}`;
    }
    const statusCounts = fileChanges.reduce((acc, change) => {
      acc[change.status] = (acc[change.status] || 0) + 1;
      return acc;
    }, {});
    const parts = [];
    for (const [status, count] of Object.entries(statusCounts)) {
      if (count === 1) {
        parts.push(status);
      } else {
        parts.push(`${status}${count}\u4E2A\u6587\u4EF6`);
      }
    }
    return parts.join("\uFF0C");
  }
  /**
   * 解析文件变更信息
   */
  parseFileChanges(gitDiff) {
    return gitDiff.split("\n").filter((line) => line.trim()).map((line) => {
      var _a;
      const [status, file] = line.split("	");
      const fileExtension = ((_a = file.split(".").pop()) == null ? void 0 : _a.toLowerCase()) || "";
      const fileType = this.getFileType(fileExtension);
      return {
        status: this.translateStatus(status),
        file,
        type: fileType
      };
    });
  }
  /**
   * 翻译Git状态码
   */
  translateStatus(status) {
    const statusMap = {
      "A": "\u65B0\u589E",
      "M": "\u4FEE\u6539",
      "D": "\u5220\u9664",
      "R": "\u91CD\u547D\u540D",
      "C": "\u590D\u5236",
      "U": "\u66F4\u65B0"
    };
    return statusMap[status] || "\u4FEE\u6539";
  }
  /**
   * 获取文件类型
   */
  getFileType(extension) {
    const typeMap = {
      "md": "\u7B14\u8BB0",
      "txt": "\u6587\u672C",
      "json": "\u914D\u7F6E",
      "js": "\u811A\u672C",
      "ts": "\u811A\u672C",
      "css": "\u6837\u5F0F",
      "html": "\u9875\u9762",
      "png": "\u56FE\u7247",
      "jpg": "\u56FE\u7247",
      "jpeg": "\u56FE\u7247",
      "gif": "\u56FE\u7247",
      "pdf": "\u6587\u6863",
      "canvas": "\u753B\u5E03"
    };
    return typeMap[extension] || "\u6587\u4EF6";
  }
  /**
   * 构建上下文信息
   */
  buildContextInfo(fileChanges, diffContent) {
    const summary = fileChanges.map(
      (change) => `${change.status} ${change.file} (${change.type})`
    ).join("\n");
    let details = diffContent;
    if (details.length > 5e3) {
      const lines = details.split("\n");
      const importantLines = lines.filter(
        (line) => line.startsWith("+++") || line.startsWith("---") || line.startsWith("@@") || line.startsWith("+") && !line.startsWith("+++") && line.length > 20 || line.startsWith("-") && !line.startsWith("---") && line.length > 20
      ).slice(0, 50);
      details = importantLines.join("\n") + "\n... (\u5185\u5BB9\u5DF2\u622A\u65AD)";
    }
    return { summary, details };
  }
  /**
   * 根据文件数量构建动态提示词
   */
  buildDynamicPrompt(fileCount) {
    const isReasoningModel = this.isReasoningModelByName();
    const basePrompt = `\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684Git\u63D0\u4EA4\u4FE1\u606F\u751F\u6210\u52A9\u624B\u3002\u8BF7\u6839\u636E\u63D0\u4F9B\u7684git diff\u5185\u5BB9\uFF0C\u751F\u6210\u7B26\u5408Conventional Commits\u89C4\u8303\u7684\u8BE6\u7EC6\u63D0\u4EA4\u4FE1\u606F\u3002

## \u8F93\u51FA\u683C\u5F0F\u8981\u6C42\uFF1A
\u5FC5\u987B\u4F7F\u7528\u4EE5\u4E0B\u683C\u5F0F\u8F93\u51FA\uFF1A

\`\`\`
<type>: <\u7B80\u77ED\u63CF\u8FF0>

<\u8BE6\u7EC6\u5185\u5BB9>
\`\`\`

## \u63D0\u4EA4\u7C7B\u578B\u89C4\u8303\uFF1A
- feat: \u65B0\u589E\u529F\u80FD\u6216\u7279\u6027
- fix: \u4FEE\u590D\u95EE\u9898\u6216\u9519\u8BEF  
- docs: \u6587\u6863\u76F8\u5173\u53D8\u66F4
- style: \u683C\u5F0F\u8C03\u6574\uFF08\u4E0D\u5F71\u54CD\u4EE3\u7801\u903B\u8F91\uFF09
- refactor: \u91CD\u6784\u4EE3\u7801
- chore: \u6784\u5EFA\u8FC7\u7A0B\u6216\u8F85\u52A9\u5DE5\u5177\u7684\u53D8\u52A8
- test: \u6D4B\u8BD5\u76F8\u5173
- perf: \u6027\u80FD\u4F18\u5316`;
    const reasoningInstructions = isReasoningModel ? `

## \u7279\u522B\u8BF4\u660E\uFF08\u63A8\u7406\u6A21\u578B\uFF09\uFF1A
\u{1F50D} \u8BF7\u5728\u5206\u6790\u8FC7\u7A0B\u7ED3\u675F\u540E\uFF0C\u5728\u56DE\u7B54\u7684\u6700\u540E\u90E8\u5206\u660E\u786E\u7ED9\u51FA\u6700\u7EC8\u7684\u63D0\u4EA4\u4FE1\u606F\u3002
\u{1F4DD} \u6700\u7EC8\u7B54\u6848\u5FC5\u987B\u653E\u5728\u4EE3\u7801\u5757\u4E2D\uFF0C\u683C\u5F0F\u5982\u4E0B\uFF1A

\u6700\u7EC8\u7B54\u6848\uFF1A
\`\`\`
<type>: <\u7B80\u77ED\u63CF\u8FF0>

<\u8BE6\u7EC6\u5185\u5BB9>
\`\`\`

\u26A0\uFE0F \u91CD\u8981\uFF1A\u786E\u4FDD\u6700\u7EC8\u7B54\u6848\u5B8C\u6574\uFF0C\u5305\u542B\u7C7B\u578B\u524D\u7F00\u548C\u8BE6\u7EC6\u63CF\u8FF0\u3002` : "";
    if (fileCount <= 5) {
      return basePrompt + reasoningInstructions + `

## \u8BE6\u7EC6\u63CF\u8FF0\u8981\u6C42\uFF08\u5C11\u91CF\u6587\u4EF6\uFF09\uFF1A
- \u4E3A\u6BCF\u4E2A\u91CD\u8981\u6587\u4EF6\u751F\u6210\u4E00\u884C\u8BE6\u7EC6\u63CF\u8FF0
- \u8BF4\u660E\u6587\u4EF6\u7684\u5177\u4F53\u6539\u52A8\u5185\u5BB9\u548C\u76EE\u7684
- \u7A81\u51FA\u53D8\u66F4\u7684\u4E1A\u52A1\u4EF7\u503C\u6216\u6280\u672F\u610F\u4E49

## \u793A\u4F8B\u8F93\u51FA\uFF1A
\`\`\`
feat: \u6DFB\u52A0\u7528\u6237\u8BA4\u8BC1\u548C\u6743\u9650\u7BA1\u7406\u529F\u80FD

\u65B0\u589E\u4E86\u5B8C\u6574\u7684\u7528\u6237\u8BA4\u8BC1\u7CFB\u7EDF\uFF1A
- UserService.js: \u5B9E\u73B0\u7528\u6237\u767B\u5F55\u3001\u6CE8\u518C\u548C\u5BC6\u7801\u91CD\u7F6E\u529F\u80FD
- AuthMiddleware.js: \u6DFB\u52A0JWT\u4EE4\u724C\u9A8C\u8BC1\u4E2D\u95F4\u4EF6
- PermissionManager.js: \u5B9E\u73B0\u57FA\u4E8E\u89D2\u8272\u7684\u6743\u9650\u63A7\u5236

\u66F4\u65B0\u4E86\u76F8\u5173\u914D\u7F6E\u6587\u4EF6\uFF1A
- config/auth.json: \u914D\u7F6E\u8BA4\u8BC1\u670D\u52A1\u7684\u53C2\u6570\u548C\u5B89\u5168\u7B56\u7565
- README.md: \u6DFB\u52A0\u8BA4\u8BC1\u529F\u80FD\u7684\u4F7F\u7528\u8BF4\u660E\u548CAPI\u6587\u6863
\`\`\``;
    } else {
      return basePrompt + reasoningInstructions + `

## \u8BE6\u7EC6\u63CF\u8FF0\u8981\u6C42\uFF08\u5927\u91CF\u6587\u4EF6\uFF09\uFF1A
- \u6309\u529F\u80FD\u6A21\u5757\u6216\u6587\u4EF6\u7C7B\u578B\u5206\u7EC4\u63CF\u8FF0
- \u6BCF\u4E2A\u5206\u7EC4\u8BF4\u660E\u6574\u4F53\u7684\u53D8\u66F4\u76EE\u7684
- \u9002\u5F53\u63D0\u53CA\u91CD\u8981\u6587\u4EF6\u6570\u91CF\u548C\u4E3B\u8981\u6539\u52A8

## \u793A\u4F8B\u8F93\u51FA\uFF1A
\`\`\`
feat: \u91CD\u6784\u9879\u76EE\u67B6\u6784\u5E76\u6DFB\u52A0\u591A\u4E2A\u6838\u5FC3\u6A21\u5757

\u65B0\u589E\u6838\u5FC3\u4E1A\u52A1\u6A21\u5757\uFF08\u51718\u4E2A\u6587\u4EF6\uFF09\uFF1A
- \u7528\u6237\u7BA1\u7406\u6A21\u5757: \u5B8C\u6574\u7684\u7528\u6237CRUD\u64CD\u4F5C\u548C\u6743\u9650\u63A7\u5236
- \u6570\u636E\u5904\u7406\u6A21\u5757: \u5B9E\u73B0\u6570\u636E\u9A8C\u8BC1\u3001\u8F6C\u6362\u548C\u5B58\u50A8\u903B\u8F91
- API\u7F51\u5173\u6A21\u5757: \u7EDF\u4E00\u7684\u8BF7\u6C42\u8DEF\u7531\u548C\u54CD\u5E94\u5904\u7406

\u66F4\u65B0\u9879\u76EE\u914D\u7F6E\u548C\u6587\u6863\uFF08\u51715\u4E2A\u6587\u4EF6\uFF09\uFF1A
- \u91CD\u6784\u4E86\u9879\u76EE\u76EE\u5F55\u7ED3\u6784\u548C\u4F9D\u8D56\u7BA1\u7406
- \u66F4\u65B0\u4E86\u90E8\u7F72\u811A\u672C\u548C\u73AF\u5883\u914D\u7F6E
- \u5B8C\u5584\u4E86API\u6587\u6863\u548C\u5F00\u53D1\u6307\u5357

\u4F18\u5316\u73B0\u6709\u529F\u80FD\u6A21\u5757\uFF08\u517112\u4E2A\u6587\u4EF6\uFF09\uFF1A
- \u91CD\u6784\u4E86\u6570\u636E\u5E93\u8BBF\u95EE\u5C42\uFF0C\u63D0\u9AD8\u67E5\u8BE2\u6027\u80FD
- \u4F18\u5316\u4E86\u524D\u7AEF\u7EC4\u4EF6\u7ED3\u6784\uFF0C\u589E\u5F3A\u53EF\u7EF4\u62A4\u6027
- \u7EDF\u4E00\u4E86\u4EE3\u7801\u98CE\u683C\u548C\u9519\u8BEF\u5904\u7406\u673A\u5236
\`\`\``;
    }
  }
  /**
   * 格式化提交信息
   */
  formatCommitMessage(aiMessage) {
    let cleanMessage = aiMessage.replace(/^["']|["']$/g, "").replace(/^提交信息[:：]\s*/, "").trim();
    cleanMessage = cleanMessage.replace(/^```[\s\S]*?\n/, "").replace(/\n```$/, "").replace(/^```/g, "").replace(/```$/g, "").trim();
    if (!cleanMessage) {
      return "\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9";
    }
    const lines = cleanMessage.split("\n").map((line) => line.trim()).filter((line) => line.length > 0);
    if (lines.length === 0) {
      return "\u66F4\u65B0\u7B14\u8BB0\u5185\u5BB9";
    }
    if (lines.length === 1 && lines[0].length < 20) {
      return `${lines[0]} - ${new Date().toLocaleString("zh-CN", { month: "numeric", day: "numeric", hour: "2-digit", minute: "2-digit" })}`;
    }
    return lines.join("\n");
  }
  /**
   * 转义提交信息中的特殊字符，支持多行提交信息
   */
  escapeCommitMessage(message) {
    if (message.includes("\n")) {
      return message.split("\n").map((line) => line.trim()).filter((line) => line.length > 0).map((line) => {
        return line.replace(/"/g, '\\"').replace(/\\/g, "\\\\").replace(/[\x00-\x1F\x7F]/g, "");
      }).join("\n");
    } else {
      let escaped = message.replace(/\s+/g, " ").replace(/"/g, '\\"').replace(/\\/g, "\\\\").replace(/[\x00-\x1F\x7F]/g, "").trim();
      if (escaped.length > 500) {
        escaped = escaped.substring(0, 497) + "...";
      }
      if (!escaped) {
        escaped = "\u66F4\u65B0\u6587\u4EF6\u5185\u5BB9";
      }
      return escaped;
    }
  }
  /**
   * 调用AI提供商API
   */
  async callAIProvider(systemPrompt, contextInfo, fileCount) {
    const defaultModel = this.modelManager.getDefaultModel();
    console.log("Git Auto Commit - callAIProvider \u83B7\u53D6\u5230\u7684\u9ED8\u8BA4\u6A21\u578B:", defaultModel);
    if (!defaultModel) {
      throw new Error("\u672A\u914D\u7F6E\u9ED8\u8BA4AI\u6A21\u578B");
    }
    const maxTokens = defaultModel.maxOutputTokens;
    console.log("Git Auto Commit - \u4F7F\u7528\u6A21\u578B\u914D\u7F6E\u7684max_tokens:", maxTokens);
    console.log("Git Auto Commit - \u6587\u4EF6\u6570\u91CF:", fileCount);
    if (fileCount > 50) {
      console.log("Git Auto Commit - \u6587\u4EF6\u8F83\u591A\uFF0C\u5EFA\u8BAE\u4F7F\u7528\u8F83\u5927\u7684token\u9650\u5236\u4EE5\u83B7\u5F97\u8BE6\u7EC6\u63CF\u8FF0");
    } else if (fileCount > 20) {
      console.log("Git Auto Commit - \u6587\u4EF6\u6570\u91CF\u4E2D\u7B49\uFF0C\u5F53\u524Dtoken\u914D\u7F6E\u5E94\u8BE5\u8DB3\u591F");
    } else {
      console.log("Git Auto Commit - \u6587\u4EF6\u8F83\u5C11\uFF0C\u5F53\u524Dtoken\u914D\u7F6E\u5145\u8DB3");
    }
    const userContent = `\u8BF7\u4E3A\u4EE5\u4E0BGit\u53D8\u66F4\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\uFF1A

\u6587\u4EF6\u53D8\u66F4\u7EDF\u8BA1\uFF1A
${contextInfo.summary}

\u8BE6\u7EC6\u53D8\u66F4\u5185\u5BB9\uFF1A
${contextInfo.details}`;
    const requestBody = this.buildAPIRequestBody(systemPrompt, userContent, maxTokens, defaultModel);
    const headers = this.buildAPIHeaders(defaultModel);
    console.log("Git Auto Commit - API\u8BF7\u6C42URL:", `${defaultModel.baseURL}/chat/completions`);
    console.log("Git Auto Commit - API\u8BF7\u6C42\u5934:", headers);
    console.log("Git Auto Commit - API\u8BF7\u6C42\u4F53:", JSON.stringify(requestBody, null, 2));
    return fetch(`${defaultModel.baseURL}/chat/completions`, {
      method: "POST",
      headers,
      body: JSON.stringify(requestBody)
    });
  }
  /**
   * 构建API请求体
   */
  buildAPIRequestBody(systemPrompt, userContent, maxTokens, model) {
    const baseBody = {
      model: model.modelName,
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userContent
        }
      ],
      max_tokens: maxTokens,
      temperature: 0.7
    };
    switch (model.provider) {
      case "zhipu":
        return {
          ...baseBody,
          top_p: 0.7,
          stream: false
        };
      case "qwen":
        return {
          ...baseBody,
          top_p: 0.8,
          enable_search: false
        };
      case "openrouter":
        return {
          ...baseBody,
          top_p: 0.9
        };
      default:
        return baseBody;
    }
  }
  /**
   * 构建API请求头
   */
  buildAPIHeaders(model) {
    const baseHeaders = {
      "Content-Type": "application/json"
    };
    switch (model.provider) {
      case "deepseek":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`
        };
      case "zhipu":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`
        };
      case "qwen":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`,
          "X-DashScope-SSE": "disable"
        };
      case "openrouter":
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`,
          "HTTP-Referer": "https://obsidian.md",
          "X-Title": "Obsidian Git Auto Commit"
        };
      default:
        return {
          ...baseHeaders,
          "Authorization": `Bearer ${model.apiKey}`
        };
    }
  }
  async executeGitOperations(filesToCommit, commitMessage) {
    const vaultPath = this.app.vault.adapter.basePath || this.app.vault.adapter.path || this.app.vault.configDir;
    try {
      if (filesToCommit.length > 0) {
        for (const file of filesToCommit) {
          await execAsync(`git add "${file}"`, { cwd: vaultPath });
        }
      } else {
        await execAsync("git add .", { cwd: vaultPath });
      }
      const { stdout: stagedFiles } = await execAsync("git diff --cached --name-only", { cwd: vaultPath });
      if (!stagedFiles.trim()) {
        throw new Error("\u6CA1\u6709\u6587\u4EF6\u9700\u8981\u63D0\u4EA4");
      }
      const escapedMessage = this.escapeCommitMessage(commitMessage);
      if (escapedMessage.includes("\n")) {
        const { writeFile, unlink } = require("fs").promises;
        const path = require("path");
        const tmpFile = path.join(vaultPath, ".git_commit_msg_tmp");
        try {
          await writeFile(tmpFile, escapedMessage, "utf8");
          await execAsync(`git commit -F "${tmpFile}"`, { cwd: vaultPath });
          await unlink(tmpFile);
        } catch (error) {
          try {
            await unlink(tmpFile);
          } catch (unlinkError) {
          }
          throw error;
        }
      } else {
        await execAsync(`git commit -m "${escapedMessage}"`, { cwd: vaultPath });
      }
      if (this.settings.pushToRemote) {
        await execAsync(`git push origin ${this.settings.remoteBranch}`, { cwd: vaultPath });
      }
    } catch (error) {
      throw new Error(`Git\u64CD\u4F5C\u5931\u8D25: ${error.message}`);
    }
  }
  async showFileSelectionModal(files) {
    return new Promise((resolve) => {
      const modal = new FileSelectionModal(this.app, files, resolve);
      modal.open();
    });
  }
  async showCommitMessageModal(defaultMessage) {
    return new Promise((resolve) => {
      const modal = new CommitMessageModal(this.app, defaultMessage, resolve);
      modal.open();
    });
  }
  debugAIConfig() {
    console.log("=== Git Auto Commit \u8C03\u8BD5\u4FE1\u606F ===");
    console.log("\u63D2\u4EF6\u8BBE\u7F6E:", this.settings);
    console.log("\u6A21\u578B\u7BA1\u7406\u5668:", this.modelManager);
    const allModels = this.modelManager.getAllModels();
    console.log("\u6240\u6709\u6A21\u578B\u6570\u91CF:", allModels.length);
    console.log("\u6240\u6709\u6A21\u578B:", allModels);
    const verifiedModels = this.modelManager.getVerifiedModels();
    console.log("\u5DF2\u9A8C\u8BC1\u7684\u6A21\u578B\u6570\u91CF:", verifiedModels.length);
    console.log("\u5DF2\u9A8C\u8BC1\u7684\u6A21\u578B:", verifiedModels);
    const defaultModel = this.modelManager.getDefaultModel();
    console.log("\u9ED8\u8BA4\u6A21\u578B:", defaultModel);
    console.log("\u9ED8\u8BA4\u6A21\u578BID:", this.modelManager.getDefaultModelId());
    new import_obsidian3.Notice("\u8C03\u8BD5\u4FE1\u606F\u5DF2\u8F93\u51FA\u5230\u63A7\u5236\u53F0\uFF0C\u8BF7\u6309F12\u67E5\u770B");
  }
  async debugDataStatus() {
    console.log("=== Git Auto Commit \u6570\u636E\u72B6\u6001\u8C03\u8BD5 ===");
    console.log("\u6570\u636E\u7BA1\u7406\u5668:", this.dataManager);
    console.log("\u6570\u636E\u6587\u4EF6\u8DEF\u5F84:", this.dataManager.getDataFilePath());
    console.log("\u6570\u636E\u6587\u4EF6\u662F\u5426\u5B58\u5728:", await this.dataManager.dataFileExists());
    console.log("\u5F53\u524D\u63D2\u4EF6\u8BBE\u7F6E:", this.dataManager.getSettings());
    console.log("\u5F53\u524D\u6A21\u578B\u914D\u7F6E:", this.dataManager.getAllModels());
    console.log("\u9ED8\u8BA4\u6A21\u578BID:", this.dataManager.getDefaultModelId());
    const exportedConfig = this.dataManager.exportConfig();
    console.log("\u5B8C\u6574\u914D\u7F6E\u5BFC\u51FA:", exportedConfig);
    new import_obsidian3.Notice("\u6570\u636E\u72B6\u6001\u8C03\u8BD5\u4FE1\u606F\u5DF2\u8F93\u51FA\u5230\u63A7\u5236\u53F0\uFF0C\u8BF7\u6309F12\u67E5\u770B");
  }
  async resetPluginData() {
    try {
      await this.dataManager.resetToDefaults();
      await this.loadSettings();
      new import_obsidian3.Notice("\u2705 \u63D2\u4EF6\u6570\u636E\u5DF2\u91CD\u7F6E\u4E3A\u521D\u59CB\u72B6\u6001");
      console.log("Git Auto Commit - \u63D2\u4EF6\u6570\u636E\u5DF2\u91CD\u7F6E");
    } catch (error) {
      console.error("Git Auto Commit - \u91CD\u7F6E\u63D2\u4EF6\u6570\u636E\u5931\u8D25:", error);
      new import_obsidian3.Notice(`\u274C \u91CD\u7F6E\u5931\u8D25: ${error.message}`);
    }
  }
};
var FileSelectionModal = class extends import_obsidian3.Modal {
  constructor(app, files, onSelect) {
    super(app);
    this.files = files;
    this.onSelect = onSelect;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("git-auto-commit");
    contentEl.createEl("h2", { text: "\u9009\u62E9\u8981\u63D0\u4EA4\u7684\u6587\u4EF6", cls: "modal-title" });
    const fileList = contentEl.createEl("div", { cls: "file-list" });
    this.files.forEach((file) => {
      const fileItem = fileList.createEl("div", {
        cls: "file-item",
        text: `\u{1F4C4} ${file}`
      });
      fileItem.style.padding = "10px";
      fileItem.style.cursor = "pointer";
      fileItem.style.borderRadius = "5px";
      fileItem.style.margin = "5px 0";
      fileItem.addEventListener("mouseenter", () => {
        fileItem.style.backgroundColor = "var(--background-modifier-hover)";
      });
      fileItem.addEventListener("mouseleave", () => {
        fileItem.style.backgroundColor = "";
      });
      fileItem.addEventListener("click", () => {
        this.onSelect(file);
        this.close();
      });
    });
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.textAlign = "right";
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.onSelect(null);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CommitMessageModal = class extends import_obsidian3.Modal {
  constructor(app, defaultMessage, onSubmit) {
    super(app);
    this.defaultMessage = defaultMessage;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("git-auto-commit");
    contentEl.createEl("h2", { text: "\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F", cls: "modal-title" });
    const inputEl = contentEl.createEl("textarea", {
      cls: "commit-message-input",
      placeholder: "\u8BF7\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F...",
      value: this.defaultMessage || `\u66F4\u65B0\u7B14\u8BB0 - ${new Date().toLocaleString("zh-CN")}`
    });
    inputEl.style.width = "100%";
    inputEl.style.height = "100px";
    inputEl.style.marginBottom = "20px";
    inputEl.style.padding = "10px";
    inputEl.style.borderRadius = "5px";
    inputEl.style.border = "1px solid var(--background-modifier-border)";
    inputEl.style.backgroundColor = "var(--background-primary)";
    inputEl.style.color = "var(--text-normal)";
    inputEl.style.resize = "vertical";
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "space-between";
    const submitButton = buttonContainer.createEl("button", { text: "\u63D0\u4EA4" });
    submitButton.style.backgroundColor = "var(--interactive-accent)";
    submitButton.style.color = "var(--text-on-accent)";
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    submitButton.addEventListener("click", () => {
      const message = inputEl.value.trim();
      if (message) {
        this.onSubmit(message);
        this.close();
      } else {
        new import_obsidian3.Notice("\u8BF7\u8F93\u5165\u63D0\u4EA4\u4FE1\u606F");
      }
    });
    cancelButton.addEventListener("click", () => {
      this.onSubmit(null);
      this.close();
    });
    inputEl.focus();
    inputEl.select();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var GitAutoCommitSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.defaultModelSelector = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("git-auto-commit-settings");
    containerEl.createEl("h2", { text: "Git\u81EA\u52A8\u63D0\u4EA4\u8BBE\u7F6E" });
    const aiSettingsHeader = containerEl.createEl("div", { cls: "ai-settings-header" });
    aiSettingsHeader.style.display = "flex";
    aiSettingsHeader.style.justifyContent = "space-between";
    aiSettingsHeader.style.alignItems = "center";
    aiSettingsHeader.style.marginBottom = "16px";
    const aiTitle = aiSettingsHeader.createEl("h3", { text: "\u{1F916} AI\u8BBE\u7F6E" });
    aiTitle.style.margin = "0";
    const addModelButton = aiSettingsHeader.createEl("button", { text: "\u6DFB\u52A0AI\u6A21\u578B", cls: "mod-cta" });
    addModelButton.addEventListener("click", () => {
      const modal = new ModelManagementModal(this.app, this.plugin.modelManager, () => {
        this.refreshDefaultModelSelector();
      });
      modal.open();
    });
    const defaultModelSetting = new import_obsidian3.Setting(containerEl).setName("\u9ED8\u8BA4\u6A21\u578B").setDesc("\u9009\u62E9\u7528\u4E8E\u751F\u6210\u63D0\u4EA4\u4FE1\u606F\u7684\u9ED8\u8BA4AI\u6A21\u578B");
    const selectorContainer = defaultModelSetting.controlEl.createEl("div");
    this.defaultModelSelector = new DefaultModelSelector(
      selectorContainer,
      this.plugin.modelManager,
      (modelId) => {
        console.log("\u9ED8\u8BA4\u6A21\u578B\u5DF2\u5207\u6362:", modelId);
      }
    );
    containerEl.createEl("h3", { text: "\u2699\uFE0F \u9ED8\u8BA4\u884C\u4E3A" });
    new import_obsidian3.Setting(containerEl).setName("\u9ED8\u8BA4\u63D0\u4EA4\u8303\u56F4").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u63D0\u4EA4\u8303\u56F4").addDropdown((dropdown) => dropdown.addOption("all", "\u63D0\u4EA4\u6240\u6709\u6587\u4EF6").addOption("single", "\u63D0\u4EA4\u5355\u4E2A\u6587\u4EF6").setValue(this.plugin.settings.defaultCommitScope).onChange(async (value) => {
      this.plugin.settings.defaultCommitScope = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("\u9ED8\u8BA4\u63D0\u4EA4\u4FE1\u606F\u7C7B\u578B").setDesc("\u8BBE\u7F6E\u9ED8\u8BA4\u7684\u63D0\u4EA4\u4FE1\u606F\u751F\u6210\u65B9\u5F0F").addDropdown((dropdown) => dropdown.addOption("ai", "AI\u81EA\u52A8\u751F\u6210").addOption("manual", "\u624B\u52A8\u8F93\u5165").setValue(this.plugin.settings.defaultMessageType).onChange(async (value) => {
      this.plugin.settings.defaultMessageType = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("\u81EA\u52A8\u63D0\u4EA4\u6A21\u5F0F").setDesc("\u5F00\u542F\u540E\u5C06\u4F7F\u7528\u9ED8\u8BA4\u8BBE\u7F6E\u76F4\u63A5\u63D0\u4EA4\uFF0C\u4E0D\u663E\u793A\u9009\u62E9\u754C\u9762").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoCommit).onChange(async (value) => {
      this.plugin.settings.autoCommit = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("\u663E\u793A\u901A\u77E5").setDesc("\u662F\u5426\u663E\u793A\u64CD\u4F5C\u901A\u77E5").addToggle((toggle) => toggle.setValue(this.plugin.settings.showNotifications).onChange(async (value) => {
      this.plugin.settings.showNotifications = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u{1F4E4} Git\u8BBE\u7F6E" });
    new import_obsidian3.Setting(containerEl).setName("\u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93").setDesc("\u63D0\u4EA4\u540E\u662F\u5426\u81EA\u52A8\u63A8\u9001\u5230\u8FDC\u7A0B\u4ED3\u5E93").addToggle((toggle) => toggle.setValue(this.plugin.settings.pushToRemote).onChange(async (value) => {
      this.plugin.settings.pushToRemote = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("\u8FDC\u7A0B\u5206\u652F\u540D\u79F0").setDesc("\u63A8\u9001\u5230\u7684\u8FDC\u7A0B\u5206\u652F\u540D\u79F0").addText((text) => text.setPlaceholder("main").setValue(this.plugin.settings.remoteBranch).onChange(async (value) => {
      this.plugin.settings.remoteBranch = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u{1F4C1} \u6587\u4EF6\u8FC7\u6EE4" });
    new import_obsidian3.Setting(containerEl).setName("\u5305\u542B\u7684\u6587\u4EF6\u7C7B\u578B").setDesc("\u8981\u5305\u542B\u5728\u63D0\u4EA4\u4E2D\u7684\u6587\u4EF6\u6269\u5C55\u540D\uFF08\u7528\u9017\u53F7\u5206\u9694\uFF09").addText((text) => text.setPlaceholder(".md,.txt,.canvas,.json").setValue(this.plugin.settings.includeFileTypes.join(",")).onChange(async (value) => {
      this.plugin.settings.includeFileTypes = value.split(",").map((s) => s.trim()).filter((s) => s);
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("\u6392\u9664\u7684\u8DEF\u5F84\u6A21\u5F0F").setDesc("\u8981\u6392\u9664\u7684\u8DEF\u5F84\u6A21\u5F0F\uFF08\u7528\u9017\u53F7\u5206\u9694\uFF09").addText((text) => text.setPlaceholder(".obsidian/,node_modules/,.git/").setValue(this.plugin.settings.excludePatterns.join(",")).onChange(async (value) => {
      this.plugin.settings.excludePatterns = value.split(",").map((s) => s.trim()).filter((s) => s);
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("\u91CD\u7F6E\u8BBE\u7F6E").setDesc("\u5C06\u6240\u6709\u8BBE\u7F6E\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C").addButton((button) => button.setButtonText("\u91CD\u7F6E").setWarning().onClick(async () => {
      await this.plugin.dataManager.resetToDefaults();
      await this.plugin.loadSettings();
      this.display();
      new import_obsidian3.Notice("\u2705 \u8BBE\u7F6E\u5DF2\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u503C");
    }));
  }
  /**
   * 刷新默认模型选择器
   */
  refreshDefaultModelSelector() {
    if (this.defaultModelSelector) {
      this.defaultModelSelector.refresh();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
